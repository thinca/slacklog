function! gh#files#tree() abort
  let body = json_decode(join(readfile('test_tree.json')))

  call s:set_file_list(body)
  call setline(1, json_encode(s:tree))
endfunction

function! s:set_file_list(body) abort
  let s:tree = {
        \ 'name': s:file_list.repo.name,
        \ 'path': '',
        \ 'state': 'open',
        \ 'children': []
        \ }
  for file in a:body.tree
    let paths = split(file.path, '/')
    if len(paths) is# 1
      let node = {
            \ 'name': file.path,
            \ 'path': file.path,
            \ }
      if file.type is# 'tree'
        let node['children'] = []
      endif
      call add(s:tree.children, node)
    else
      call s:merge(s:tree.children, file, paths[0], paths[1:])
    endif
  endfor
endfunction

function! s:merge(tree, file, path, rest) abort
  for node in a:tree
    if node.path is# a:path
      call s:merge(node.children, a:file, a:rest[0], a:rest[1:])
      return
    endif
  endfor
  let node = {
        \ 'name': a:path,
        \ 'path': a:file.path,
        \ }

  if a:file.type is# 'tree' || len(a:rest) > 0
    let node['children'] = []
  endif

  if len(a:rest) > 0
    call s:merge(node.children, a:file, a:rest[0], a:rest[1:])
  endif
  let tree = a:tree
  call add(tree, node)
endfunction