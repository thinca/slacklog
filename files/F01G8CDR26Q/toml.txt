[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1
'''

# lsp
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
[[plugins]]
repo = 'mattn/vim-lsp-settings'
[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'vim-airline/vim-airline'
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = 'vim-airline'
hook_add = '''
    let g:airline_theme = 'onedark'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline#extensions#tabline#buffer_idx_mode = 1
'''
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction
'''
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        " Define mappings
        nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('open')
        nnoremap <silent><buffer><expr> c
        \ defx#do_action('copy')
        nnoremap <silent><buffer><expr> m
        \ defx#do_action('move')
        nnoremap <silent><buffer><expr> p
        \ defx#do_action('paste')
        nnoremap <silent><buffer><expr> l
        \ defx#do_action('open')
        nnoremap <silent><buffer><expr> v
        \ defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> o
        \ defx#do_action('open_tree', 'toggle')
        nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> n
        \ defx#do_action('new_file')
        nnoremap <silent><buffer><expr> M
        \ defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns',
        \                'mark:indent:icon:filename:type:size:time')
        nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
        nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
        nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
        nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
        nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
        nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
        nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
        nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
        nnoremap <silent><buffer><expr> <Leader>f
        \ defx#do_action('cd', ['/var/www/html/front-end/'])
        nnoremap <silent><buffer><expr> <Leader>s
        \ defx#do_action('cd', ['/var/www/html/sys/'])
        nnoremap <silent><buffer><expr> <Leader>r
        \ defx#do_action('cd', ['/var/www/html/front-end/react/'])
        nnoremap <silent><buffer><expr> <Leader>t
        \ defx#do_action('cd', ['/var/www/html/front-end/ts/'])
    endfunction
'''
[[plugins]]
repo = 'ryanoasis/vim-devicons'
[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'tomtom/tcomment_vim'

# theme
[[plugins]]
repo = 'joshdick/onedark.vim'

# {}()rainbow
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
'''

# カッコ補完
[[plugins]]
repo = 'cohama/lexima.vim'

# html closetag
[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
let g:closetag_filenames = '*.html,*.phtml,*.tsx,*.php'
'''

# git
[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
let g:blamer_enabled = 1
let g:blamer_show_in_visual_modes = 0
let g:blamer_delay = 300
'''

# ale
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
let g:ale_fixers = {
  \ 'typescript': ['eslint'],
  \ 'typescriptreact': ['eslint'],
  \}
let g:ale_fix_on_save = 1
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
[[plugins]]
repo = 'junegunn/fzf.vim'

# jsx
[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
hook_add = '''
let g:vim_jsx_pretty_colorful_config = 1
'''

# tagbar
[[plugins]]
repo = 'preservim/tagbar'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'MattesGroeger/vim-bookmarks'
hook_add = '''
let g:bookmark_auto_close = 1
'''