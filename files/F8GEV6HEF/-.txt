```
$ bundle -h exec
BUNDLE-EXEC(1)                                                                BUNDLE-EXEC(1)

NAAMMEE
       bbuunnddllee--eexxeecc - Execute a command in the context of the bundle

SYYNNOOPPSSIISS
       bbuunnddllee eexxeecc [--keep-file-descriptors] _c_o_m_m_a_n_d

DEESSCCRRIIPPTTIIOONN
       This command executes the command, making all gems specified in the GGeemmffiillee((55)) avail‐
       able to rreeqquuiirree in Ruby programs.

       Essentially, if you would normally have run something like rrssppeecc ssppeecc//mmyy__ssppeecc..rrbb, and
       you  want  to  use  the  gems  specified  in  the GGeemmffiillee((55)) and installed via bundle
       install(1) _b_u_n_d_l_e_-_i_n_s_t_a_l_l_._1_._h_t_m_l, you should run bbuunnddllee eexxeecc rrssppeecc ssppeecc//mmyy__ssppeecc..rrbb.

       Note that bbuunnddllee eexxeecc does not require  that  an  executable  is  available  on  your
       shell's $$PPAATTHH.

OPPTTIIOONNSS
       ----kkeeeepp--ffiillee--ddeessccrriippttoorrss
              Exec  in  Ruby  2.0  began discarding non-standard file descriptors. When this
              flag is passed, exec will revert to the 1.9  behaviour  of  passing  all  file
              descriptors to the new process.

BUUNNDDLLEE IINNSSTTAALLLL ----BBIINNSSTTUUBBSS
       If  you  use  the ----bbiinnssttuubbss flag in bundle install(1) _b_u_n_d_l_e_-_i_n_s_t_a_l_l_._1_._h_t_m_l, Bundler
       will automatically create a directory (which defaults to aapppp__rroooott//bbiinn) containing all
       of the executables available from gems in the bundle.

       After  using  ----bbiinnssttuubbss, bbiinn//rrssppeecc ssppeecc//mmyy__ssppeecc..rrbb is identical to bbuunnddllee eexxeecc rrssppeecc
       ssppeecc//mmyy__ssppeecc..rrbb.

ENNVVIIRROONNMMEENNTT MMOODDIIFFIICCAATTIIOONNSS
       bbuunnddllee eexxeecc makes a number of changes to the shell  environment,  then  executes  the
       command you specify in full.

       ·   make  sure  that it's still possible to shell out to buunnddllee from inside a command
           invoked by bbuunnddllee eexxeecc (using $$BBUUNNDDLLEE__BBIINN__PPAATTHH)

       ·   put the directory containing executables (like raaiillss,  rrssppeecc,  rraacckkuupp)  for  your
           bundle on $$PPAATTHH

       ·   make  sure  that  if bundler is invoked in the subshell, it uses the same Geemmffiillee
           (by setting BBUUNNDDLLEE__GGEEMMFFIILLEE)

       ·   add -rrbbuunnddlleerr//sseettuupp to $$RRUUBBYYOOPPTT, which makes sure that Ruby programs  invoked  in
           the subshell can see the gems in the bundle

       It also modifies Rubygems:

       ·   disallow loading additional gems not in the bundle

       ·   modify  the geemm method to be a no-op if a gem matching the requirements is in the
           bundle, and to raise a GGeemm::::LLooaaddEErrrroorr if it's not

       ·   Define Geemm..rreeffrreesshh to be a no-op, since the source index is  always  frozen  when
           using bundler, and to prevent gems from the system leaking into the environment

       ·   Override  Geemm..bbiinn__ppaatthh  to  use the gems in the bundle, making system executables
           work

       ·   Add all gems in the bundle into Gem.loaded_specs

   LLooaaddiinngg
       By default, when attempting to bbuunnddllee eexxeecc to a file with  a  ruby  shebang,  Bundler
       will  KKeerrnneell..llooaadd  that  file  instead of using KKeerrnneell..eexxeecc. For the vast majority of
       cases, this is a performance improvement. In a rare few cases, this could cause  some
       subtle  side-effects (such as dependence on the exact contents of $$00 or ____FFIILLEE____) and
       the optimization can be disabled by enabling the ddiissaabbllee__eexxeecc__llooaadd setting.

   SShheelllliinngg oouutt
       Any Ruby code that opens a subshell (like ssyysstteemm, backticks, or %%xx{{}}) will  automati‐
       cally use the current Bundler environment. If you need to shell out to a Ruby command
       that is not part of your current bundle, use the wwiitthh__cclleeaann__eennvv method with a  block.
       Any  subshells  created inside the block will be given the environment present before
       Bundler was activated. For example, Homebrew commands run Ruby, but don't work inside
       a bundle:

           Bundler.with_clean_env do
             `brew install wget`
           end

       Using wwiitthh__cclleeaann__eennvv is also necessary if you are shelling out to a different bundle.
       Any Bundler commands run in a subshell will inherit the current Gemfile, so  commands
       that   need  to  run  in  the  context  of  a  different  bundle  also  need  to  use
       wwiitthh__cclleeaann__eennvv.

           Bundler.with_clean_env do
             Dir.chdir "/other/bundler/project" do
               `bundle exec ./script`
             end
           end

       Bundler provides convenience helpers that wrap ssyysstteemm and eexxeecc, and they can be  used
       like this:

           Bundler.clean_system('brew install wget')
           Bundler.clean_exec('brew install wget')

RUUBBYYGGEEMMSS PPLLUUGGIINNSS
       At present, the Rubygems plugin system requires all files named rruubbyyggeemmss__pplluuggiinn..rrbb on
       the load path of _a_n_y installed gem when any  Ruby  code  requires  rruubbyyggeemmss..rrbb.  This
       includes executables installed into the system, like rraaiillss, rraacckkuupp, and rrssppeecc.

       Since Rubygems plugins can contain arbitrary Ruby code, they commonly end up activat‐
       ing themselves or their dependencies.

       For instance, the ggeemmccuutttteerr 00..55 gem depended on jjssoonn__ppuurree. If you had that version of
       gemcutter  installed  (even  if  you  _a_l_s_o had a newer version without this problem),
       Rubygems would activate ggeemmccuutttteerr 00..55 and jjssoonn__ppuurree <<llaatteesstt>>.

       If your  Gemfile(5)  also  contained  jjssoonn__ppuurree  (or  a  gem  with  a  dependency  on
       jjssoonn__ppuurree), the latest version on your system might conflict with the version in your
       Gemfile(5), or the snapshot version in your GGeemmffiillee..lloocckk.

       If this happens, bundler will say:

           You have already activated json_pure 1.4.6 but your Gemfile
           requires json_pure 1.4.3. Consider using bundle exec.

       In this situation, you almost certainly want to remove the underlying  gem  with  the
       problematic  gem  plugin. In general, the authors of these plugins (in this case, the
       ggeemmccuutttteerr gem) have released newer versions that are more careful in their plugins.

       You can find a list of all the gems containing gem plugins by running

           ruby -rubygems -e "puts Gem.find_files('rubygems_plugin.rb')"

       At the very least, you should remove all but the newest version of each  gem  plugin,
       and also remove all gem plugins that you aren't using (ggeemm uunniinnssttaallll ggeemm__nnaammee).

                                        January 2017                          BUNDLE-EXEC(1)
```