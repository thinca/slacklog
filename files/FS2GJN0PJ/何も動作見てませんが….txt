function! s:vimlsp_setting() abort
  if has('patch-8.1.1113')
    command! -nargs=1 LspRegisterServer autocmd User lsp_setup ++once call lsp#register_server(<args>)
  else
    command! -nargs=1 LspRegisterServer autocmd User lsp_setup call lsp#register_server(<args>)
  endif

  for l:ft in keys(s:settings)
    if has_key(g:, 'lsp_settings_whitelist') && index(g:lsp_settings_whitelist, l:ft) == -1 || empty(s:settings[l:ft])
      continue
    endif
    exe printf('augroup vimlsp_suggest_%s', l:ft)
      au!
      exe 'autocmd FileType' ft 'call s:suggest_ft(' string(ft) ')'
    augroup END
  endfor

  " delcommand LspRegisterServer ???
endfunction

function! s:suggest_ft(ft) abort
  let l:found = 0

  for l:server in s:settings[a:ft]
    let l:command = s:vimlsp_settings_get(l:server.command, 'cmd', l:server.command)
    if type(l:command) == type([])
      let l:command = l:command[0]
    endif
    if s:executable(l:command)
      let l:script = printf('%s/%s.vim', s:settings_dir, l:server.command)
      if filereadable(l:script)
        exe 'source' l:script
        let l:found += 1
        break
      endif
    endif
  endfor

  if l:found ==# 0
    exe printf('augroup! vimlsp_suggest_%s', a:ft)
    call s:vimlsp_settings_suggest()
  elseif !exists(':LspInstallServer')
    command! -buffer LspInstallServer call s:vimlsp_install_server()
  endif

endfunction
