[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'ghifarit53/tokyonight-vim'
hook_add = '''
set termguicolors
let g:tokyonight_style = 'storm'
au MyAutoCmd VimEnter * nested colorscheme tokyonight | hi clear CursorLine
let g:airline_theme = 'tokyonight'
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
nmap n nzz<Plug>(anzu-update-search-status)
nmap N Nzz<Plug>(anzu-update-search-status)
nmap * <Plug>(anzu-star)
nmap # <Plug>(anzu-sharp)
nmap <silent> <Esc><Esc> :<C-u>nohlsearch<CR><Plug>(anzu-clear-search-status)
let g:anzu_status_format = '(%i/%l)'
'''

[[plugins]]
repo = 'dracula/vim'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'mhinz/vim-signify'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['contenxt_filetype.vim']
hook_add = '''
let g:precious_enable_switch_CursorMoved = {
      \ "*": 0
      \}
let g:precious_enable_switch_CursorMoved_i = {
      \ "*": 0
      \}
let g:precious_enable_switch_CursorHold = {
      \ "*": 0
      \}
let g:precious_enable_switchers = {
      \ "vue" : {
      \   "setfiletype": 0
      \},
      \ "*" :{
      \   "setfiletype": 1
      \ }
      \}
augroup VimPrecious
  au!
  autocmd InsertEnter * PreciousSwitch
  autocmd InsertLeave * PreciousReset
augroup END
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
set encoding=utf-8

let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
if exists("g:loaded_webdevicons")
  call webdevicons#refresh()
endif
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
let g:polyglot_disabled = ['markdown']
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
  set completeopt=menuone,noselect,noinsert
  let $NVIM_COC_LOG_LEVEL = 'error'
  let g:coc_global_extensions = ['coc-pairs', 'coc-snippets', 'coc-json', 'coc-yaml']
  inoremap <silent> <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <silent> <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  nmap <silent> gd :vsp<CR><Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  inoremap <silent> <expr> <CR> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<C-r>=coc#on_enter()\<CR>"
  inoremap <silent> <buffer> <nowait> <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
  inoremap <silent> <buffer> <nowait> <expr> jj pumvisible() ? "\<C-e>" : "\<Esc>"
  inoremap <silent> <buffer> <nowait> <expr> „Å£ÔΩä pumvisible() ? "\<C-e>" : "\<Esc>"
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~# '\s'
  endfunction
  function! s:show_documentation()
    if (index(['vim', 'help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction
  autocmd CursorHold * silent call CocActionAsync('highlight')
'''

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'antoinemadec/coc-fzf'
rev = 'release'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  function! ImeStatLine()
    if ImeStat() == 1
      return '„ÅÇ'
    else
      return 'A'
    endif
  endfunction
  let g:airline#extensions#vista#enabled = 1
  let g:airline#extensions#coc#enabled = 1
  " PowerlineÁ≥ª„Éï„Ç©„É≥„Éà„ÇíÂà©Áî®„Åô„Çã
  set laststatus=2
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#whitespace#mixed_indent_algo = 1
  if !exists('g:airline_symbols')
      let g:airline_symbols = {}
  endif

  " unicode symbols
  let g:airline_left_sep = '¬ª'
  let g:airline_left_sep = '‚ñ∂'
  let g:airline_right_sep = '¬´'
  let g:airline_right_sep = '‚óÄ'
  let g:airline_symbols.crypt = 'üîí'
  let g:airline_symbols.linenr = '‚ò∞'
  let g:airline_symbols.linenr = '‚êä'
  let g:airline_symbols.linenr = '‚ê§'
  let g:airline_symbols.linenr = '¬∂'
  let g:airline_symbols.maxlinenr = ''
  let g:airline_symbols.maxlinenr = '„èë'
  let g:airline_symbols.branch = '‚éá'
  let g:airline_symbols.paste = 'œÅ'
  let g:airline_symbols.paste = '√û'
  let g:airline_symbols.paste = '‚à•'
  let g:airline_symbols.spell = 'Íû®'
  let g:airline_symbols.notexists = '‚àÑ'
  let g:airline_symbols.whitespace = 'Œû'

  " powerline symbols
  let g:airline_left_sep = 'ÓÇ∞'
  let g:airline_left_alt_sep = 'ÓÇ±'
  let g:airline_right_sep = 'ÓÇ≤'
  let g:airline_right_alt_sep = 'ÓÇ≥'
  let g:airline_symbols.branch = 'ÓÇ†'
  let g:airline_symbols.readonly = 'ÓÇ¢'
  let g:airline_symbols.linenr = '‚ò∞ '
  let g:airline_symbols.maxlinenr = 'ÓÇ°'
  
  au MyAutoCmd VimEnter * nested let g:airline_section_a = g:airline_section_a . airline#section#create_left(['', '%{ImeStatLine()}'])
  au MyAutoCmd VimEnter * nested let g:airline_section_c .= '%{anzu#search_status()}'

'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
nmap <silent> <C-f><C-v> :<C-u>Vista coc<CR>
nmap <silent> <C-f><C-s> :<C-u>Vista finder coc<CR>
let g:vista_default_executive = 'coc'
let g:vista#rendere#enable_icon = 1
let g:vista_icon_indent = ["‚ï∞‚îÄ‚ñ∏ ", "‚îú‚îÄ‚ñ∏ "]
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'itchyny/vim-parenmatch'

[[plugins]]
repo = 'honza/vim-snippets'
hook_add = '''
  let g:UltiSnipsExpandTrigger="<NUL>"
  let g:UltiSnipsListSnippets="<NUL>"
'''

