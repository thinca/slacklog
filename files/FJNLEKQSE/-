{"version":100,"revision":1,"root":{"children":[{"type":"h3","text":"名前の由来"},{"type":"p","text":"リーナス・トーバルズによれば[27]、","links":{"https://ja.wikipedia.org/wiki/Git#cite_note-27":[14,18]}},{"type":"p","text":"「"},{"type":"p","text":"僕は自己中心的な奴だから、自分のプロジェクトには自分にちなんだ名前を付けるようにしているんだ。最初はLinuxで、今度はGitだ。","links":{"https://ja.wikipedia.org/wiki/Linux":[50,55]}},{"type":"p","text":"」"},{"type":"p","text":"英語のスラングとして、Gitには「バカ」「間抜け」といった類の意味がある。この自虐ネタはもちろん皮肉で、これはリーナスがLinuxの名前を決める際に自身の名前にちなんだ名前を付けるよう強要されたことから来ている。(Linux#名前の由来を参照)","links":{"https://ja.wikipedia.org/wiki/Linux#名前の由来":[107,118]}},{"type":"p","text":"Gitのオフィシャルサイトのウィキでは、“Git”という名前に対して他にもいくつかの解釈がなされている。例としてはGlobal Information Trackerなどが挙げられる[28]。","links":{"https://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A3%E3%82%AD":[14,17],"https://ja.wikipedia.org/wiki/Git#cite_note-28":[91,95]},"formats":{"i":[57,83]}},{"type":"h3","text":"開発初期の歴史"},{"type":"p","text":"Gitの開発は、Linuxカーネルの開発者の多くがBitKeeperのシステムに対するアクセスを禁止されたことに端を発している（BitKeeper#価格変更を参照）。これは、アンドリュー・トリジェル (Andrew Tridgell) がプロプラエタリなソフトウェアであるBitKeeperのプロトコルをリバースエンジニアリングしたことに対し、BitKeeperの著作者であるラリー・マクボイがこれをライセンス違反であるとして、BitKeeperの無料提供を止めたためである。Linux.conf.au 2005のキーノートにおいて、Tridgellはこのリバースエンジニアリングの手順について説明を行ったが、内容はBitKeeperのサーバの適切なポートにtelnetでアクセスし“help”とタイプするだけという単純なものだった[29]。","links":{"https://ja.wikipedia.org/wiki/BitKeeper#価格変更":[64,78],"https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%B3%E3%83%89%E3%83%AA%E3%83%A5%E3%83%BC%E3%83%BB%E3%83%88%E3%83%AA%E3%82%B8%E3%82%A7%E3%83%AB":[87,99],"https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%90%E3%83%BC%E3%82%B9%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0":[152,164],"https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%AA%E3%83%BC%E3%83%BB%E3%83%9E%E3%82%AF%E3%83%9C%E3%82%A4":[188,196],"https://ja.wikipedia.org/wiki/Linux.conf.au":[238,251],"https://ja.wikipedia.org/wiki/Telnet":[329,335],"https://ja.wikipedia.org/wiki/Git#cite_note-29":[366,370]}},{"type":"p","text":"リーナスはBitKeeperと同じように使える分散型バージョン管理システムを探していたが、無料のシステムで彼の要求（特に速度面での要求）に適合するものは見つからなかった。リーナスが書いたメールによると、2005年4月7日頃に最初のプロトタイプを作成していたようである[30]。","links":{"https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%83%88%E3%82%BF%E3%82%A4%E3%83%97":[115,121],"https://ja.wikipedia.org/wiki/Git#cite_note-30":[133,137]}},{"type":"p","text":"「"},{"type":"p","text":"だけど、僕が見たSCMたちはそれ（bk pull相当のこと）をするのが大変だったんだ。僕がやろうとしていることの1つは（実はこれが一番なんだけど）その過程を十分効率的にすること。もし1つのパッチを適用してその変更の境界を記録するなどするのに30秒かかったとすると（正直、Linux規模のプロジェクトで30秒っていうのは大抵のSCMでは速いほうの見積りだけど）、250通（例えばAndrew[31] と同期するときには決して珍しい量じゃない）のメールパッチを適用するのに2時間かかることになる。","links":{"https://ja.wikipedia.org/wiki/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0":[8,11],"https://ja.wikipedia.org/wiki/Git#cite_note-andrews-31":[194,198]},"formats":{"i":[17,24,80,83]}},{"type":"p","text":"BKはスピード狂ではなくて、（他のSCMと比較するとBKは1桁か2桁くらいは高速だけど）Andrew[31]とマージをする時に1メールにつき約10-15秒かかっていた。だけど、BKではそれは大きな問題にならなかったんだ。BK⇔BK間のマージは簡単だから、僕は他の主要な開発者とは時間がかかるメールでのマージをしたことはなかったから。パッチアプリケーションに基づいたSCMにするなら、\"マージ機能\"  をBKよりも速くしなければならなくなる。それは本当に本当に大変なこと。","links":{"https://ja.wikipedia.org/wiki/Git#cite_note-andrews-31":[50,54]},"formats":{"i":[206,208]}},{"type":"p","text":"だから、僕はいまスクリプトを書いていて、変更をずっと速く追跡できるようにしているんだ。最初の目標はパッチを適用するのと同じくらい高速にそれを行うこと。だけどはっきりいって、今のところできたのは多く見積もってもまだ半分くらいで、思わぬ障害にぶつかったら全然嘘になるかもしれないけど。いずれにせよ、僕がそれをすぐにできる理由は、僕のスクリプトがSCMではないからで、とても特別で  \"Linuxの状態を記録する\" ようなものだからなんだ。それはリニアなパッチを十分効率的な時間でマージできるようになるだろう。"},{"type":"p","text":"（パッチの適用が3秒でできるなら、大きな1つながりのパッチでも問題にはならない:  途中で失敗しても1分か2分で気がつくなら、それで十分で、手作業で修正することができる。待ち時間が重要な理由はそこにある。-- \"オフライン\"  で効果的にそれができるなら、問題が起きた時に僕は定義どおりそれを修理できずにいるだろう）"},{"type":"p","text":"」"},{"type":"p","text":"リーナスは以下のような原則に基づいて設計を行っている。"},{"type":"ol","text":"CVSを「悪い見本」とする。設計上のことで確信が持てない場合は、CVSと逆の決断をする。リーナスは冗談めかして以下のように語っている。","links":{"https://ja.wikipedia.org/wiki/Concurrent_Versions_System":[0,3]}},{"type":"ol","text":"“カーネルメンテナンスの最初の10年間、僕らは文字通りtarボールとパッチを使っていた。CVSよりもずっと優れたソース管理システムさ。僕は営利企業（トランスメタ[32]）でCVSを7年間使わされたことで、CVSを強烈に憎むようになった。CVSを強烈に憎んでいると言う時には、このことも言っておかなくちゃいけないね。観衆の中にSVN (Subversion)   のユーザがいるなら、この場から去ったほうがいいかもしれない。僕がCVSを強烈に嫌悪しているということは、僕がSubversionが史上最大の無意味なプロジェクトであると思っていることも意味しているんだ。Subversionのしばらくのスローガンは‘ちゃんとCVSをやる’とかそんなものだったよね。そんなスローガンから始めたら、どこにも辿りつけないよ。CVSをちゃんとやるなんて不可能なのさ。”[33]","links":{"https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BF":[74,80],"https://ja.wikipedia.org/wiki/Git#cite_note-32":[80,84],"https://ja.wikipedia.org/wiki/Apache_Subversion":[167,177],"https://ja.wikipedia.org/wiki/Git#cite_note-linusGoogleTalk-33":[377,381]},"formats":{"i":[74,84]}},{"type":"ol","text":"分散型の、BitKeeperのようなワークフローをサポートする。"},{"type":"ol","text":"“BitKeeperだけが、「まあ使ってもいいかな」と最初に思わせてくれたSCMだというわけではないけれど、BitkeeperはSCMというものの存在意義と、実際にどう使うことができるのかを教えてくれた。だから、Gitは技術的な観点とかいろんなところでBitkeeperとは随分違うものになっているけど（それはもう一つの設計目標でもある。Bitkeeperのクローンではないことをはっきりさせたかったから）、Gitのワークフローの多くは、Bitkeeperが教えてくれたフローから直接きたものになっているんだ。”[33]","links":{"https://ja.wikipedia.org/wiki/Git#cite_note-linusGoogleTalk-33":[256,260]}},{"type":"ol","text":"データ破壊に対する強力な抑止機能。データ破壊は、偶然によるものと意図的なものの両方を想定している[34][33]。","links":{"https://ja.wikipedia.org/wiki/Git#cite_note-34":[48,52],"https://ja.wikipedia.org/wiki/Git#cite_note-linusGoogleTalk-33":[52,56]}},{"type":"ol","text":"非常に高い処理速度。"},{"type":"p","text":"最初の3つの条件によって、既存のバージョン管理システムはMonotoneを除き全て選に漏れてしまい、4つ目の条件で該当するものがなくなってしまった[33]。そのため、Linuxカーネル2.6.12-rc2のリリース直後に[33]、リーナスは自分で開発を始めた[33]。","links":{"https://ja.wikipedia.org/w/index.php?title=Monotone&action=edit&redlink=1":[28,36],"https://ja.wikipedia.org/wiki/Git#cite_note-linusGoogleTalk-33":[73,77,110,114,129,133]}},{"type":"p","text":"Gitの開発は2005年4月3日に開始された[35]。プロジェクトとしてのアナウンスは4月6日に行われ[36]、4月7日にはセルフホスティングされるようになった[35]。4月18日には複数のブランチからのマージが最初に行われた[37]。4月29日にはリーナスの目標としていた処理速度が実現された。Linuxのカーネルツリーにパッチを当てるベンチマークで、初期のGitでは毎秒6.7個のパッチを処理している[38]。6月6日には、GitによるLinuxカーネル2.6.12のリリースが行われた[39]。","links":{"https://ja.wikipedia.org/wiki/Git#cite_note-selfhost-35":[22,26,80,84],"https://ja.wikipedia.org/wiki/Git#cite_note-36":[51,55],"https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%AB%E3%83%95%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0":[62,71],"https://ja.wikipedia.org/wiki/Git#cite_note-37":[113,117],"https://ja.wikipedia.org/wiki/Git#cite_note-38":[202,206],"https://ja.wikipedia.org/wiki/Git#cite_note-39":[245,249]}},{"type":"p","text":"BitKeeperからの影響で、リーナスは従来と同じようなアプローチを意図的に避けており、結果としてGitは非常にユニークな設計になっている[40]。技術に長けたユーザがGitを利用できるようになるレベルまではリーナスが開発を行っており、その後、2005年6月26日にはプロジェクトへの主要な貢献者であったJunio C Hamanoにメンテナンスが引き継がれた[41]。Hamanoは2005年12月21日にバージョン1.0のリリースを行い[42]、2009年3月現在も彼がメンテナンスを行っている。","links":{"https://ja.wikipedia.org/wiki/Git#cite_note-40":[70,74],"https://ja.wikipedia.org/wiki/Git#cite_note-41":[181,185],"https://ja.wikipedia.org/wiki/Git#cite_note-42":[221,225]}}]}}