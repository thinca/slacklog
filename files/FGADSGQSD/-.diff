diff --git a/internal/lsp/cache/file.go b/internal/lsp/cache/file.go
index d75c6916..9deba82b 100644
--- a/internal/lsp/cache/file.go
+++ b/internal/lsp/cache/file.go
@@ -8,6 +8,7 @@ import (
 	"go/ast"
 	"go/token"
 	"io/ioutil"
+	"sync"
 
 	"golang.org/x/tools/go/packages"
 	"golang.org/x/tools/internal/lsp/source"
@@ -22,13 +23,14 @@ type File struct {
 	ast     *ast.File
 	token   *token.File
 	pkg     *packages.Package
+
+	readOnce  sync.Once
+	parseOnce sync.Once
 }
 
 // GetContent returns the contents of the file, reading it from file system if needed.
 func (f *File) GetContent() []byte {
-	f.view.mu.Lock()
-	defer f.view.mu.Unlock()
-	f.read()
+	f.readContentOnce()
 	return f.content
 }
 
@@ -37,35 +39,17 @@ func (f *File) GetFileSet() *token.FileSet {
 }
 
 func (f *File) GetToken() *token.File {
-	f.view.mu.Lock()
-	defer f.view.mu.Unlock()
-	if f.token == nil {
-		if err := f.view.parse(f.URI); err != nil {
-			return nil
-		}
-	}
+	f.parseViewOnce()
 	return f.token
 }
 
 func (f *File) GetAST() *ast.File {
-	f.view.mu.Lock()
-	defer f.view.mu.Unlock()
-	if f.ast == nil {
-		if err := f.view.parse(f.URI); err != nil {
-			return nil
-		}
-	}
+	f.parseViewOnce()
 	return f.ast
 }
 
 func (f *File) GetPackage() *packages.Package {
-	f.view.mu.Lock()
-	defer f.view.mu.Unlock()
-	if f.pkg == nil {
-		if err := f.view.parse(f.URI); err != nil {
-			return nil
-		}
-	}
+	f.parseViewOnce()
 	return f.pkg
 }
 
@@ -85,3 +69,17 @@ func (f *File) read() {
 	}
 	f.content = content
 }
+
+func (f *File) readContentOnce() {
+	f.readOnce.Do(f.read)
+}
+
+func (f *File) parseViewOnce() {
+	f.parseOnce.Do(func() {
+		f.view.mu.Lock()
+		// FIXME: it should be checked that response of parse()
+		_ = f.view.parse(f.URI)
+		f.view.mu.Unlock()
+		f.view = nil
+	})
+}