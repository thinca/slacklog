diff --git a/src/gui_w32.c b/src/gui_w32.c
index d7bbc0cfe..c3f8190a4 100644
--- a/src/gui_w32.c
+++ b/src/gui_w32.c
@@ -6562,9 +6562,53 @@ gui_mch_draw_string(
  * Output routines.
  */
 
+static const long   flushIntervalMsec = 16;
+static proftime_T   nextFlush = {0};
+static UINT_PTR	    flushTimerId = 0;
+static void _flush(void);
+static VOID CALLBACK _OnTimeFlush( HWND hwnd, UINT uMsg UNUSED, UINT_PTR idEvent, DWORD dwTime UNUSED);
+
 /* Flush any output to the screen */
     void
 gui_mch_flush(void)
+{
+    proftime_T curr;
+
+    profile_start(&curr);
+    if (curr.QuadPart > nextFlush.QuadPart)
+    {
+	_flush();
+	if (flushTimerId != 0)
+	{
+	    flushTimerId = 0;
+	    KillTimer(s_textArea, flushTimerId);
+	}
+	_RPT0(_CRT_WARN, "flush done\n");
+    }
+    else
+    {
+	flushTimerId = SetTimer(s_textArea, 1, (UINT)15, _OnTimeFlush);
+	_RPT0(_CRT_WARN, "flush canceled\n");
+    }
+}
+
+    static VOID CALLBACK
+_OnTimeFlush(
+    HWND hwnd,
+    UINT uMsg UNUSED,
+    UINT_PTR idEvent,
+    DWORD dwTime UNUSED)
+{
+    if (flushTimerId == 0)
+	return;
+    flushTimerId = 0;
+    KillTimer(s_textArea, idEvent);
+    _flush();
+    _RPT0(_CRT_WARN, "flush done (late)\n");
+}
+
+    void
+_flush(void)
 {
 #   if defined(__BORLANDC__)
     /*
@@ -6581,6 +6625,8 @@ gui_mch_flush(void)
 #endif
 
     GdiFlush();
+
+    profile_setlimit(flushIntervalMsec, &nextFlush);
 }
 
     static void
