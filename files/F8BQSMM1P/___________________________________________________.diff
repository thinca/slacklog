diff --git a/src/channel.c b/src/channel.c
index 8fc705058..c7aafe0b3 100644
--- a/src/channel.c
+++ b/src/channel.c
@@ -2212,7 +2212,7 @@ channel_exe_cmd(channel_T *channel, ch_part_T part, typval_T *argv)
 	if (gui.in_use)
 	{
 	    gui_update_cursor(TRUE, FALSE);
-	    gui_mch_flush();
+	    gui_mch_flush(15);
 	}
 #endif
     }
diff --git a/src/gui.c b/src/gui.c
index 4f03ed809..7cd380303 100644
--- a/src/gui.c
+++ b/src/gui.c
@@ -1976,7 +1976,7 @@ gui_write(
     gui.dragged_sb = SBAR_NONE;
 #endif
 
-    gui_mch_flush();		    /* In case vim decides to take a nap */
+    gui_mch_flush(5);		    /* In case vim decides to take a nap */
 }
 
 /*
@@ -2954,7 +2954,7 @@ gui_wait_for_chars(long wtime)
 	return FAIL;
 
     /* Before waiting, flush any output to the screen. */
-    gui_mch_flush();
+    gui_mch_flush(6);
 
     if (wtime > 0)
     {
@@ -3667,7 +3667,7 @@ gui_update_tabline(void)
 	/* Updating the tabline uses direct GUI commands, flush
 	 * outstanding instructions first. (esp. clear screen) */
 	out_flush();
-	gui_mch_flush();
+	gui_mch_flush(7);
 
 	if (!showit != !shown)
 	    gui_mch_show_tabline(showit);
@@ -5144,7 +5144,7 @@ gui_update_screen(void)
 # endif
     out_flush();		/* make sure output has been written */
     gui_update_cursor(TRUE, FALSE);
-    gui_mch_flush();
+    gui_mch_flush(7);
 }
 #endif
 
@@ -5503,7 +5503,7 @@ gui_handle_drop(
 	setcursor();
 	out_flush();
 	gui_update_cursor(FALSE, FALSE);
-	gui_mch_flush();
+	gui_mch_flush(8);
     }
 
     entered = FALSE;
diff --git a/src/gui_dwrite.cpp b/src/gui_dwrite.cpp
index e1d19db8d..1aa7a6029 100644
--- a/src/gui_dwrite.cpp
+++ b/src/gui_dwrite.cpp
@@ -329,7 +329,7 @@ struct DWriteContext {
 
     void SetPixel(int x, int y, COLORREF color);
 
-    void Flush();
+    int Flush();
 
     void SetRenderingParams(
 	    const DWriteRenderingParams *params);
@@ -1066,10 +1066,12 @@ DWriteContext::SetPixel(int x, int y, COLORREF color)
     }
 }
 
-    void
+    int
 DWriteContext::Flush()
 {
+    DrawingMode prev = mDMode;
     SetDrawingMode(DM_GDI);
+    return int(prev);
 }
 
     void
@@ -1225,11 +1227,12 @@ DWriteContext_SetPixel(DWriteContext *ctx, int x, int y, COLORREF color)
 	ctx->SetPixel(x, y, color);
 }
 
-    void
+    int
 DWriteContext_Flush(DWriteContext *ctx)
 {
     if (ctx != NULL)
-	ctx->Flush();
+	return ctx->Flush();
+    return -1;
 }
 
     void
diff --git a/src/gui_dwrite.h b/src/gui_dwrite.h
index 9c98c4ce0..5e0b49c0c 100644
--- a/src/gui_dwrite.h
+++ b/src/gui_dwrite.h
@@ -74,7 +74,7 @@ void DWriteContext_FillRect(DWriteContext *ctx, const RECT *rc, COLORREF color);
 void DWriteContext_DrawLine(DWriteContext *ctx, int x1, int y1, int x2, int y2,
 	COLORREF color);
 void DWriteContext_SetPixel(DWriteContext *ctx, int x, int y, COLORREF color);
-void DWriteContext_Flush(DWriteContext *ctx);
+int DWriteContext_Flush(DWriteContext *ctx);
 void DWriteContext_Close(DWriteContext *ctx);
 
 void DWriteContext_SetRenderingParams(
diff --git a/src/gui_w32.c b/src/gui_w32.c
index 119bcd579..c94bee04a 100644
--- a/src/gui_w32.c
+++ b/src/gui_w32.c
@@ -37,6 +37,8 @@ static int s_directx_scrlines = 0;
 # define IS_ENABLE_DIRECTX() (s_directx_enabled && s_dwc != NULL)
 static int directx_enabled(void);
 static void directx_binddc(void);
+static int dx_pmode;
+static proftime_T dx_tm;
 #endif
 
 #ifdef FEAT_MENU
@@ -616,7 +618,7 @@ _OnBlinkTimer(
 	blink_timer = (UINT) SetTimer(NULL, 0, (UINT)blink_ontime,
 						    (TIMERPROC)_OnBlinkTimer);
     }
-    gui_mch_flush();
+    gui_mch_flush(0);
 }
 
     static void
@@ -644,7 +646,7 @@ gui_mch_stop_blink(void)
     if (blink_state == BLINK_OFF)
     {
 	gui_update_cursor(TRUE, FALSE);
-	gui_mch_flush();
+	gui_mch_flush(1);
     }
     blink_state = BLINK_NONE;
 }
@@ -665,7 +667,7 @@ gui_mch_start_blink(void)
 						    (TIMERPROC)_OnBlinkTimer);
 	blink_state = BLINK_ON;
 	gui_update_cursor(TRUE, FALSE);
-	gui_mch_flush();
+	gui_mch_flush(2);
     }
 }
 
@@ -1681,7 +1683,12 @@ gui_mch_invert_rectangle(
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
-	DWriteContext_Flush(s_dwc);
+    {
+	profile_start(&dx_tm);
+	dx_pmode = DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s)\n", profile_msg(&dx_tm), "gui_mch_invert_rectangle");
+    }
 #endif
 
     /*
@@ -1714,7 +1721,12 @@ gui_mch_draw_hollow_cursor(guicolor_T color)
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
-	DWriteContext_Flush(s_dwc);
+    {
+	profile_start(&dx_tm);
+	dx_pmode = DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_draw_hollow_cursor");
+    }
 #endif
 
     /*
@@ -3054,7 +3066,12 @@ gui_mch_flash(int msec)
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
-	DWriteContext_Flush(s_dwc);
+    {
+	profile_start(&dx_tm);
+	dx_pmode = DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_flash");
+    }
 #endif
 
     /*
@@ -3065,7 +3082,7 @@ gui_mch_flash(int msec)
     rc.right = gui.num_cols * gui.char_width;
     rc.bottom = gui.num_rows * gui.char_height;
     InvertRect(s_hdc, &rc);
-    gui_mch_flush();			/* make sure it's displayed */
+    gui_mch_flush(3);			/* make sure it's displayed */
 
     ui_delay((long)msec, TRUE);	/* wait for a few msec */
 
@@ -3144,7 +3161,12 @@ gui_mch_delete_lines(
 	    use_redraw = 1;
 	}
 	else
-	    DWriteContext_Flush(s_dwc);
+	{
+	    profile_start(&dx_tm);
+	    dx_pmode = DWriteContext_Flush(s_dwc);
+	    profile_end(&dx_tm);
+	    Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_delete_lines");
+	}
     }
     if (!use_redraw)
 #endif
@@ -3194,7 +3216,12 @@ gui_mch_insert_lines(
 	    use_redraw = 1;
 	}
 	else
-	    DWriteContext_Flush(s_dwc);
+	{
+	    profile_start(&dx_tm);
+	    dx_pmode = DWriteContext_Flush(s_dwc);
+	    profile_end(&dx_tm);
+	    Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_insert_lines");
+	}
     }
     if (!use_redraw)
 #endif
@@ -5880,7 +5907,7 @@ _OnImeNotify(HWND hWnd, DWORD dwCommand, DWORD dwData UNUSED)
 		}
 	    }
 	    gui_update_cursor(TRUE, FALSE);
-	    gui_mch_flush();
+	    gui_mch_flush(4);
 	    lResult = 0;
 	    break;
     }
@@ -6587,7 +6614,7 @@ gui_mch_draw_string(
 
 /* Flush any output to the screen */
     void
-gui_mch_flush(void)
+gui_mch_flush(int where)
 {
 #   if defined(__BORLANDC__)
     /*
@@ -6600,7 +6627,12 @@ gui_mch_flush(void)
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
-	DWriteContext_Flush(s_dwc);
+    {
+	profile_start(&dx_tm);
+	dx_pmode = DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s:%d)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_flush", where);
+    }
 #endif
 
     GdiFlush();
@@ -8514,7 +8546,12 @@ gui_mch_drawsign(int row, int col, int typenr)
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
-	DWriteContext_Flush(s_dwc);
+    {
+	profile_start(&dx_tm);
+	dx_pmode = DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_drawsign");
+    }
 #endif
 
     x = TEXT_X(col);
@@ -8998,7 +9035,12 @@ netbeans_draw_multisign_indicator(int row)
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
+    {
+	profile_start(&dx_tm);
 	DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "netbeans_draw_multisign_indicator");
+    }
 #endif
 
     for (i = 0; i < gui.char_height - 3; i++)
diff --git a/src/netbeans.c b/src/netbeans.c
index f4b42dc8a..49ea464b3 100644
--- a/src/netbeans.c
+++ b/src/netbeans.c
@@ -126,7 +126,7 @@ netbeans_close(void)
     if (gui.in_use)
     {
 	gui_update_cursor(TRUE, FALSE);
-	gui_mch_flush();
+	gui_mch_flush(10);
     }
 #endif
 }
@@ -1853,7 +1853,7 @@ nb_do_cmd(
 	    if (gui.in_use)
 	    {
 		gui_update_cursor(TRUE, FALSE);
-		gui_mch_flush();
+		gui_mch_flush(11);
 	    }
 #endif
 	    /* Quit a hit-return or more prompt. */
@@ -2253,7 +2253,7 @@ nb_do_cmd(
 	if (gui.in_use)
 	{
 	    gui_update_cursor(TRUE, FALSE);
-	    gui_mch_flush();
+	    gui_mch_flush(12);
 	}
 #endif
 	/* Quit a hit-return or more prompt. */
@@ -2313,7 +2313,7 @@ coloncmd(char *cmd, ...)
     if (gui.in_use)
     {
 	gui_update_cursor(TRUE, FALSE);
-	gui_mch_flush();
+	gui_mch_flush(13);
     }
 #endif
 }
@@ -2574,7 +2574,7 @@ netbeans_open(char *params, int doabort)
     if (gui.in_use)
     {
 	gui_update_cursor(TRUE, FALSE);
-	gui_mch_flush();
+	gui_mch_flush(14);
     }
 #endif
 }
diff --git a/src/proto/gui_w32.pro b/src/proto/gui_w32.pro
index 969045067..6bd1f9c47 100644
--- a/src/proto/gui_w32.pro
+++ b/src/proto/gui_w32.pro
@@ -76,7 +76,7 @@ void im_set_position(int row, int col);
 void im_set_active(int active);
 int im_get_status(void);
 void gui_mch_draw_string(int row, int col, char_u *text, int len, int flags);
-void gui_mch_flush(void);
+void gui_mch_flush(int);
 void gui_mch_get_screen_dimensions(int *screen_w, int *screen_h);
 void gui_mch_add_menu(vimmenu_T *menu, int pos);
 void gui_mch_show_popupmenu(vimmenu_T *menu);
diff --git a/src/regexp.c b/src/regexp.c
index 7f5e265eb..5538a24a9 100644
--- a/src/regexp.c
+++ b/src/regexp.c
@@ -41,7 +41,7 @@
 /* Uncomment the first if you do not want to see debugging logs or files
  * related to regular expressions, even when compiling with -DDEBUG.
  * Uncomment the second to get the regexp debugging. */
-/* #undef DEBUG */
+#undef DEBUG
 /* #define DEBUG */
 
 #include "vim.h"
diff --git a/src/screen.c b/src/screen.c
index a74f75071..62d32ea82 100644
--- a/src/screen.c
+++ b/src/screen.c
@@ -476,7 +476,7 @@ redraw_after_callback(int call_update_screen)
 	 * flicker. */
 	if (!gui_mch_is_blink_off())
 	    gui_update_cursor(FALSE, FALSE);
-	gui_mch_flush();
+	gui_mch_flush(16);
     }
 #endif
 
diff --git a/src/search.c b/src/search.c
index 8bb5f3d97..081223148 100644
--- a/src/search.c
+++ b/src/search.c
@@ -2680,7 +2680,7 @@ showmatch(
 	    if (gui.in_use)
 	    {
 		gui_update_cursor(TRUE, FALSE);
-		gui_mch_flush();
+		gui_mch_flush(17);
 	    }
 #endif
 	    /* Restore dollar_vcol(), because setcursor() may call curs_rows()
diff --git a/src/terminal.c b/src/terminal.c
index 744b7dedf..3f058bd12 100644
--- a/src/terminal.c
+++ b/src/terminal.c
@@ -677,7 +677,7 @@ update_cursor(term_T *term, int redraw)
 	if (gui.in_use)
 	{
 	    gui_update_cursor(FALSE, FALSE);
-	    gui_mch_flush();
+	    gui_mch_flush(9);
 	}
 #endif
     }
