Mon 17 Feb 2020 06:20:51 PM JST:["s:on_text_document_did_close()",1]
Mon 17 Feb 2020 06:20:51 PM JST:["s:on_text_document_did_open()",3,"text","/home/username","file:///home/username/tmp/test.txt"]
Mon 17 Feb 2020 06:20:51 PM JST:["Starting server","efm-langserver",["efm-langserver","-c=/home/username/.cache/dein/.cache/.vimrc/.dein/config/efm-langserver/config.yaml"]]
Mon 17 Feb 2020 06:20:51 PM JST:[{"response":{"data":{"__data__":"vim-lsp","lsp_id":1,"server_name":"efm-langserver"},"message":"started lsp server successfully"}}]
Mon 17 Feb 2020 06:20:51 PM JST:["--->",1,"efm-langserver",{"method":"initialize","params":{"rootUri":"file:///home/username","capabilities":{"workspace":{"configuration":true,"applyEdit":true},"textDocument":{"implementation":{"linkSupport":true},"documentSymbol":{"symbolKind":{"valueSet":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,1,2,3,4,5,6,7,8,9]},"hierarchicalDocumentSymbolSupport":false},"semanticHighlightingCapabilities":{"semanticHighlighting":false},"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"dynamicRegistration":false},"completion":{"completionItem":{"snippetSupport":true,"documentationFormat":["plaintext"]},"completionItemKind":{"valueSet":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9]}},"foldingRange":{"lineFoldingOnly":true},"typeDefinition":{"linkSupport":true},"typeHierarchy":false,"declaration":{"linkSupport":true},"definition":{"linkSupport":true}}},"rootPath":"/home/username","processId":120549,"trace":"off"}}]
Mon 17 Feb 2020 06:20:51 PM JST:["<---",1,"efm-langserver",{"response":{"id":1,"result":{"capabilities":{"hoverProvider":true,"documentFormattingProvider":true,"documentSymbolProvider":true,"codeActionProvider":true,"textDocumentSync":1}},"jsonrpc":"2.0"},"request":{"id":1,"jsonrpc":"2.0","method":"initialize","params":{"rootUri":"file:///home/username","capabilities":{"workspace":{"configuration":true,"applyEdit":true},"textDocument":{"implementation":{"linkSupport":true},"documentSymbol":{"symbolKind":{"valueSet":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,1,2,3,4,5,6,7,8,9]},"hierarchicalDocumentSymbolSupport":false},"semanticHighlightingCapabilities":{"semanticHighlighting":false},"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"dynamicRegistration":false},"completion":{"completionItem":{"snippetSupport":true,"documentationFormat":["plaintext"]},"completionItemKind":{"valueSet":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9]}},"foldingRange":{"lineFoldingOnly":true},"typeDefinition":{"linkSupport":true},"typeHierarchy":false,"declaration":{"linkSupport":true},"definition":{"linkSupport":true}}},"rootPath":"/home/username","processId":120549,"trace":"off"}}}]
Mon 17 Feb 2020 06:20:51 PM JST:["--->",1,"efm-langserver",{"method":"initialized","params":{}}]
Mon 17 Feb 2020 06:20:52 PM JST:[{"response":{"data":{"__data__":"vim-lsp","server_name":"efm-langserver"},"message":"configuration sent"}}]
Mon 17 Feb 2020 06:20:52 PM JST:["s:update_file_content()",3]
Mon 17 Feb 2020 06:20:52 PM JST:["--->",1,"efm-langserver",{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/username/tmp/test.txt","version":1,"languageId":"text","text":"# vale-boilerplate\n\nThis is an repository showcases the basic components of Vale's configuration: a `StylesPath` (`/styles`), a configuration file (`/.vale.ini`), and markup content (this file).\n\nTry it out by running `vale README.md` from your command line.\n\n## Markup\n\nVale is capable of \"understanding\" markup, allowing it to intelligently lint prose without generators hundreds of markup-related false positives.\n\nFor example, consider the following [`write-good`](https://github.com/btford/write-good) style violations:\n\n> This sentence is extremely good.\n\nWhen using the `write-good` style, this sentence will generate a warning by default (`'extremely' is a weasel word!`). However, if we format `extremely` as inline code, we will no longer receive a warning:\n\n> This sentence is `extremely` good.\n\nYou can also use inline comments to control Vale's behavior:\n\n<!-- vale off -->\n\nThis also works for code blocks and you can even write rules that only activate in certain sections of markup (e.g., headings or block quotes). See the [documentation](https://errata-ai.gitbook.io/vale/markup) for more information.\n\n<!-- vale on -->\n\nThis is is another sentence with an error.\n\n## Configuration\n\nVale's configuration file (`.vale.ini`) needs to define a `StylesPath` directory that contains any styles that you'd like to use:\n\n```text\nstyles/\n.gitignore\n.vale.ini\n```\n\nSee the [documentation](https://errata-ai.gitbook.io/vale/configuration) for more information.\n"}}}]
Mon 17 Feb 2020 06:20:52 PM JST:[{"response":{"data":{"path":"file:///home/username/tmp/test.txt","__data__":"vim-lsp","filetype":"text","server_name":"efm-langserver"},"message":"textDocument/open sent"}}]
Mon 17 Feb 2020 06:20:52 PM JST:[{"response":{"data":{"path":"file:///home/username/tmp/test.txt","__data__":"vim-lsp","server_name":"efm-langserver"},"message":"not dirty"}}]
Mon 17 Feb 2020 06:20:52 PM JST:["s:on_stdout client option on_notification() error","Vim(call):E20: Mark not set"]
Mon 17 Feb 2020 06:20:52 PM JST:["<---(stderr)",1,"efm-langserver",["2020/02/17 18:20:51 efm-langserver: reading on stdin, writing on stdout",""]]
Mon 17 Feb 2020 06:20:52 PM JST:["<---",1,"efm-langserver",{"response":{"method":"textDocument/publishDiagnostics","jsonrpc":"2.0","params":{"uri":"file:///home/username/tmp/test.txt","diagnostics":[]}}}]
Mon 17 Feb 2020 06:20:56 PM JST:["s:on_text_document_did_close()",3]
