diff --git a/autoload/gh/buffer.vim b/autoload/gh/buffer.vim
index aa27321..ddae5f3 100644
--- a/autoload/gh/buffer.vim
+++ b/autoload/gh/buffer.vim
@@ -16,12 +16,12 @@
 " }
 function! gh#buffer#new(name, ...) abort
   " create config
-  let config = #{
-        \ opener: 'new',
-        \ buffer: #{
-        \   type: 'nofile',
-        \   name: a:name,
-        \   options: [
+  let config = {
+        \ 'opener': 'new',
+        \ 'buffer': {
+        \   'type': 'nofile',
+        \   'name': a:name,
+        \   'options': [
         \     'bufhidden=wipe',
         \     'nonumber',
         \     'noswapfile',
@@ -53,18 +53,18 @@ function! gh#buffer#new(name, ...) abort
   endfor
 
   " new manager object
-  let manager = #{
-        \ opener: config.opener,
-        \ buffer: config.buffer,
-        \ open: function('s:_open'),
-        \ close: function('s:_close'),
-        \ delete: function('s:_delete'),
-        \ focus: function('s:_focus'),
-        \ show: function('s:_show'),
-        \ winid: function('s:_winid'),
-        \ get_contents: function('s:_get_contents'),
-        \ set_contents: function('s:_set_contents'),
-        \ execute: function('s:_execute'),
+  let manager = {
+        \ 'opener': config.opener,
+        \ 'buffer': config.buffer,
+        \ 'open': function('s:_open'),
+        \ 'close': function('s:_close'),
+        \ 'delete': function('s:_delete'),
+        \ 'focus': function('s:_focus'),
+        \ 'show': function('s:_show'),
+        \ 'winid': function('s:_winid'),
+        \ 'get_contents': function('s:_get_contents'),
+        \ 'set_contents': function('s:_set_contents'),
+        \ 'execute': function('s:_execute'),
         \ }
 
   return manager
diff --git a/autoload/gh/github/issues.vim b/autoload/gh/github/issues.vim
index c99cb0f..85b3e5c 100644
--- a/autoload/gh/github/issues.vim
+++ b/autoload/gh/github/issues.vim
@@ -5,10 +5,10 @@
 let s:Promise = vital#gh#import('Async.Promise')
 
 function! gh#github#issues#list(owner, repo, param) abort
-  let settings = #{
-        \ method: 'GET',
-        \ url: printf('https://api.github.com/repos/%s/%s/issues', a:owner, a:repo),
-        \ param: a:param,
+  let settings = {
+        \ 'method': 'GET',
+        \ 'url': printf('https://api.github.com/repos/%s/%s/issues', a:owner, a:repo),
+        \ 'param': a:param,
         \ }
   return gh#http#request(settings)
 endfunction
@@ -18,29 +18,29 @@ function! gh#github#issues#issue(owner, repo, number) abort
 endfunction
 
 function! gh#github#issues#new(owner, repo, data) abort
-  let settings = #{
-        \ method: 'POST',
-        \ url: printf('https://api.github.com/repos/%s/%s/issues', a:owner, a:repo),
-        \ data: a:data,
+  let settings = {
+        \ 'method': 'POST',
+        \ 'url': printf('https://api.github.com/repos/%s/%s/issues', a:owner, a:repo),
+        \ 'data': a:data,
         \ }
   return gh#http#request(settings)
 endfunction
 
 function! gh#github#issues#update(owner, repo, number, data) abort
-  let settings = #{
-        \ method: 'PATCH',
-        \ url: printf('https://api.github.com/repos/%s/%s/issues/%s', a:owner, a:repo, a:number),
-        \ data: a:data,
+  let settings = {
+        \ 'method': 'PATCH',
+        \ 'url': printf('https://api.github.com/repos/%s/%s/issues/%s', a:owner, a:repo, a:number),
+        \ 'data': a:data,
         \ }
   return gh#http#request(settings)
 endfunction
 
 function! gh#github#issues#update_state(owner, repo, number, state) abort
-  let settings = #{
-        \ method: 'PATCH',
-        \ url: printf('https://api.github.com/repos/%s/%s/issues/%s', a:owner, a:repo, a:number),
-        \ data: #{
-        \   state: a:state,
+  let settings = {
+        \ 'method': 'PATCH',
+        \ 'url': printf('https://api.github.com/repos/%s/%s/issues/%s', a:owner, a:repo, a:number),
+        \ 'data': {
+        \   'state': a:state,
         \ },
         \ }
   return gh#http#request(settings)
diff --git a/autoload/gh/github/pulls.vim b/autoload/gh/github/pulls.vim
index 4c1522a..9f4d1b9 100644
--- a/autoload/gh/github/pulls.vim
+++ b/autoload/gh/github/pulls.vim
@@ -3,19 +3,19 @@
 " License: MIT
 
 function! gh#github#pulls#list(owner, repo, param) abort
-  let settings = #{
-        \ method: 'GET',
-        \ url: printf('https://api.github.com/repos/%s/%s/pulls', a:owner, a:repo),
-        \ param: a:param,
+  let settings = {
+        \ 'method': 'GET',
+        \ 'url': printf('https://api.github.com/repos/%s/%s/pulls', a:owner, a:repo),
+        \ 'param': a:param,
         \ }
   return gh#http#request(settings)
 endfunction
 
 function! gh#github#pulls#diff(owner, repo, number) abort
-  let settings = #{
-        \ url: printf('https://api.github.com/repos/%s/%s/pulls/%s', a:owner, a:repo, a:number),
-        \ headers: #{
-        \   accept: 'application/vnd.github.v3.diff',
+  let settings = {
+        \ 'url': printf('https://api.github.com/repos/%s/%s/pulls/%s', a:owner, a:repo, a:number),
+        \ 'headers': {
+        \   'accept': 'application/vnd.github.v3.diff',
         \ }
         \ }
   return gh#http#request(settings)
diff --git a/autoload/gh/github/repos.vim b/autoload/gh/github/repos.vim
index b4a94f3..3db45a5 100644
--- a/autoload/gh/github/repos.vim
+++ b/autoload/gh/github/repos.vim
@@ -9,19 +9,19 @@ function! gh#github#repos#list(owner, param) abort
   if a:owner is# 'user'
     let url = 'https://api.github.com/user/repos'
   endif
-  let settings = #{
-        \ method: 'GET',
-        \ url: url,
-        \ param: a:param,
+  let settings = {
+        \ 'method': 'GET',
+        \ 'url': url,
+        \ 'param': a:param,
         \ }
   return gh#http#request(settings)
 endfunction
 
 function! gh#github#repos#files(owner, repo, branch) abort
-  let settings = #{
-        \ url: printf('https://api.github.com/repos/%s/%s/git/trees/%s', a:owner, a:repo, a:branch),
-        \ param: #{
-        \   recursive: 1,
+  let settings = {
+        \ 'url': printf('https://api.github.com/repos/%s/%s/git/trees/%s', a:owner, a:repo, a:branch),
+        \ 'param': {
+        \   'recursive': 1,
         \ },
         \ }
   return gh#http#request(settings)
@@ -38,8 +38,8 @@ endfunction
 
 function! s:get_readme(owner, repo, resp) abort
   if !has_key(a:resp.body, 'tree')
-    return s:Promise.reject(#{
-        \ body: 'not found readme',
+    return s:Promise.reject({
+        \ 'body': 'not found readme',
         \ })
   endif
 
@@ -47,8 +47,8 @@ function! s:get_readme(owner, repo, resp) abort
         \ {_, v -> v.type is# 'blob' && (matchstr(v.path, '^README.*') is# '' ? 0 : 1)})
 
   if len(files) is# 0
-    return s:Promise.reject(#{
-        \ body: 'not found readme',
+    return s:Promise.reject({
+        \ 'body': 'not found readme',
         \ })
   endif
 
@@ -57,18 +57,18 @@ function! s:get_readme(owner, repo, resp) abort
 endfunction
 
 function! gh#github#repos#create(data) abort
-  let settings = #{
-        \ method: 'POST',
-        \ url: 'https://api.github.com/user/repos',
-        \ data: a:data,
+  let settings = {
+        \ 'method': 'POST',
+        \ 'url': 'https://api.github.com/user/repos',
+        \ 'data': a:data,
         \ }
   return gh#http#request(settings)
 endfunction
 
 function! gh#github#repos#delete(full_name) abort
-  let settings = #{
-        \ method: 'DELETE',
-        \ url: printf('https://api.github.com/repos/%s', a:full_name),
+  let settings = {
+        \ 'method': 'DELETE',
+        \ 'url': printf('https://api.github.com/repos/%s', a:full_name),
         \ }
   return gh#http#request(settings)
 endfunction
diff --git a/autoload/gh/http.vim b/autoload/gh/http.vim
index 18baf67..6d81a1e 100644
--- a/autoload/gh/http.vim
+++ b/autoload/gh/http.vim
@@ -73,10 +73,10 @@ function! s:make_response(body) abort
     endif
   endif
 
-  let resp = #{
-        \ status: status,
-        \ header: header,
-        \ body: body,
+  let resp = {
+        \ 'status': status,
+        \ 'header': header,
+        \ 'body': body,
         \ }
 
   if status is# '200' || status is# '201' || status is# '204'
@@ -86,8 +86,8 @@ function! s:make_response(body) abort
 endfunction
 
 function! gh#http#get(url) abort
-  let settings = #{
-        \ url: a:url,
+  let settings = {
+        \ 'url': a:url,
         \ }
   return gh#http#request(settings)
 endfunction
@@ -100,8 +100,8 @@ function! gh#http#request(settings) abort
 
   let method = has_key(a:settings, 'method') ? a:settings.method : 'GET'
 
-  let s:tmp_file = #{
-        \ header: s:_tempname(),
+  let s:tmp_file = {
+        \ 'header': s:_tempname(),
         \ }
 
   let cmd = ['curl', '-s', '-X', method, printf('--dump-header "%s"', s:tmp_file.header),
@@ -136,9 +136,9 @@ function! s:make_error_responsee(err) abort
   if type(a:err) is# type({})
     return s:Promise.reject(a:err)
   endif
-  return s:Promise.reject(#{
-        \ status: '999',
-        \ body: 'unknown error',
+  return s:Promise.reject({
+        \ 'status': '999',
+        \ 'body': 'unknown error',
         \ })
 endfunction
 
diff --git a/autoload/gh/issues.vim b/autoload/gh/issues.vim
index ea218c5..90c712e 100644
--- a/autoload/gh/issues.vim
+++ b/autoload/gh/issues.vim
@@ -31,10 +31,10 @@ function! s:issue_list(resp) abort
   for issue in a:resp.body
     if !has_key(issue, 'pull_request')
       call add(lines, printf("%s\t%s\t%s\t%s", issue.number, issue.state, issue.title, issue.user.login))
-      call add(s:issues, #{
-            \ number: issue.number,
-            \ body: split(issue.body, '\r\?\n'),
-            \ url: url . issue.number, 
+      call add(s:issues, {
+            \ 'number': issue.number,
+            \ 'body': split(issue.body, '\r\?\n'),
+            \ 'url': url . issue.number, 
             \ })
     endif
   endfor
@@ -110,12 +110,12 @@ function! gh#issues#list() abort
     let param['page'] = 1
   endif
 
-  let s:issue_list = #{
-        \ repo: #{
-        \   owner: m[1],
-        \   name: m[2],
+  let s:issue_list = {
+        \ 'repo': {
+        \   'owner': m[1],
+        \   'name': m[2],
         \ },
-        \ param: param,
+        \ 'param': param,
         \ }
 
   call gh#gh#init_buffer()
@@ -142,9 +142,9 @@ function! gh#issues#new() abort
   call gh#gh#set_message_buf('loading')
 
   let m = matchlist(bufname(), 'gh://\(.*\)/\(.*\)/issues/new$')
-  let s:issue_new = #{
-        \ owner: m[1],
-        \ name: m[2],
+  let s:issue_new = {
+        \ 'owner': m[1],
+        \ 'name': m[2],
         \ }
 
   call gh#github#repos#files(s:issue_new.owner, s:issue_new.name, 'master')
@@ -164,9 +164,9 @@ endfunction
 
 function! s:create_issue() abort
   call gh#gh#message('issue creating...')
-  let data = #{
-        \ title: s:issue_title,
-        \ body: join(getline(1, '$'), "\r\n"),
+  let data = {
+        \ 'title': s:issue_title,
+        \ 'body': join(getline(1, '$'), "\r\n"),
         \ }
 
   call gh#github#issues#new(s:issue_new.owner, s:issue_new.name, data)
@@ -206,7 +206,7 @@ endfunction
 
 function! s:open_template_list(files) abort
   if empty(a:files)
-    call s:set_issue_template_buffer(#{body: ''})
+    call s:set_issue_template_buffer({'body': ''})
     return
   endif
   let s:files = a:files
@@ -227,8 +227,8 @@ function! s:get_template_files(resp) abort
   let files = filter(a:resp.body.tree,
         \ {_, v -> v.type is# 'blob' && (matchstr(v.path, '\.github/ISSUE_TEMPLATE.*') is# '' ? 0 : 1)})
 
-  let files = map(files, {_, v -> #{file: s:file_basename(v.path),
-        \ url: printf('https://raw.githubusercontent.com/%s/%s/master/%s',
+  let files = map(files, {_, v -> {'file': s:file_basename(v.path),
+        \ 'url': printf('https://raw.githubusercontent.com/%s/%s/master/%s',
         \ s:issue_new.owner, s:issue_new.name, v.path)}})
   return files
 endfunction
@@ -254,9 +254,9 @@ function! s:update_issue() abort
   endif
 
   call gh#gh#message('issue updating...')
-  let data = #{
-        \ title: title,
-        \ body: join(getline(1, '$'), "\r\n"),
+  let data = {
+        \ 'title': title,
+        \ 'body': join(getline(1, '$'), "\r\n"),
         \ }
 
   call gh#github#issues#update(s:issue.repo.owner, s:issue.repo.name, s:issue.number, data)
@@ -283,13 +283,13 @@ function! gh#issues#issue() abort
   call gh#gh#delete_tabpage_buffer('gh_issues_edit_bufid')
   let t:gh_issues_edit_bufid = bufnr()
 
-  let s:issue = #{
-        \ repo: #{
-        \   owner: m[1],
-        \   name: m[2],
+  let s:issue = {
+        \ 'repo': {
+        \   'owner': m[1],
+        \   'name': m[2],
         \ },
-        \ number:  m[3],
-        \ url: printf('https://github.com/%s/%s/issues/%s', m[1], m[2], m[3]),
+        \ 'number':  m[3],
+        \ 'url': printf('https://github.com/%s/%s/issues/%s', m[1], m[2], m[3]),
         \ }
 
   call gh#gh#init_buffer()
diff --git a/autoload/gh/pulls.vim b/autoload/gh/pulls.vim
index 757c702..efb528b 100644
--- a/autoload/gh/pulls.vim
+++ b/autoload/gh/pulls.vim
@@ -19,9 +19,9 @@ function! s:pull_list(resp) abort
 
   for pr in a:resp.body
     call add(lines, printf("%s\t%s\t%s\t%s", pr.number, pr.state, pr.title, pr.user.login))
-    call add(s:pulls, #{
-          \ number: pr.number,
-          \ url: url . pr.number,
+    call add(s:pulls, {
+          \ 'number': pr.number,
+          \ 'url': url . pr.number,
           \ })
   endfor
 
@@ -64,12 +64,12 @@ function! gh#pulls#list() abort
     let param['page'] = 1
   endif
 
-  let s:pull_list = #{
-        \ repo: #{
-        \   owner: m[1],
-        \   name: m[2],
+  let s:pull_list = {
+        \ 'repo': {
+        \   'owner': m[1],
+        \   'name': m[2],
         \ },
-        \ param: param,
+        \ 'param': param,
         \ }
 
   call gh#gh#init_buffer()
diff --git a/autoload/gh/repos.vim b/autoload/gh/repos.vim
index 4ab90a3..75f430f 100644
--- a/autoload/gh/repos.vim
+++ b/autoload/gh/repos.vim
@@ -97,9 +97,9 @@ function! gh#repos#list() abort
     let param['page'] = 1
   endif
 
-  let s:repo_list = #{
-        \ owner: m[1],
-        \ param: param,
+  let s:repo_list = {
+        \ 'owner': m[1],
+        \ 'param': param,
         \ }
 
   call gh#gh#delete_tabpage_buffer('gh_repo_list_bufid')
@@ -148,11 +148,11 @@ function! gh#repos#new() abort
 endfunction
 
 function! s:repo_create() abort
-  let param = #{
-        \ name: '',
-        \ description: '',
-        \ private: v:false,
-        \ delete_branch_on_merge: v:true,
+  let param = {
+        \ 'name': '',
+        \ 'description': '',
+        \ 'private': v:false,
+        \ 'delete_branch_on_merge': v:true,
         \ }
 
   let contents = {}
