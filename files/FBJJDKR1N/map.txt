n  <NL>        * :bprevious<CR>
n  <C-K>       * :bnext<CR>
n  <C-Y>T        <Plug>(sonictemplate-intelligent)
n  <C-Y><C-T>    <Plug>(sonictemplate)
n  <C-Y>t        <Plug>(sonictemplate)
n  <Esc><Esc>  * :<C-U>nohlsearch<CR><C-L>
v  <C-_>9        <Plug>TComment_<C-_>9
no <C-_>9        <Plug>TComment_<C-_>9
v  <C-_>8        <Plug>TComment_<C-_>8
no <C-_>8        <Plug>TComment_<C-_>8
v  <C-_>7        <Plug>TComment_<C-_>7
no <C-_>7        <Plug>TComment_<C-_>7
v  <C-_>6        <Plug>TComment_<C-_>6
no <C-_>6        <Plug>TComment_<C-_>6
v  <C-_>5        <Plug>TComment_<C-_>5
no <C-_>5        <Plug>TComment_<C-_>5
v  <C-_>4        <Plug>TComment_<C-_>4
no <C-_>4        <Plug>TComment_<C-_>4
v  <C-_>3        <Plug>TComment_<C-_>3
no <C-_>3        <Plug>TComment_<C-_>3
v  <C-_>2        <Plug>TComment_<C-_>2
no <C-_>2        <Plug>TComment_<C-_>2
v  <C-_>1        <Plug>TComment_<C-_>1
no <C-_>1        <Plug>TComment_<C-_>1
   <C-_>ca       <Plug>TComment_<C-_>ca
   <C-_>cc       <Plug>TComment_<C-_>cc
   <C-_>s        <Plug>TComment_<C-_>s
   <C-_>n        <Plug>TComment_<C-_>n
   <C-_>a        <Plug>TComment_<C-_>a
   <C-_>b        <Plug>TComment_<C-_>b
   <C-_>i        <Plug>TComment_<C-_>i
   <C-_>r        <Plug>TComment_<C-_>r
   <C-_><Space>   <Plug>TComment_<C-_><Space>
   <C-_>p        <Plug>TComment_<C-_>p
v  <C-_><C-_>    <Plug>TComment_<C-_><C-_>
no <C-_><C-_>    <Plug>TComment_<C-_><C-_>
   <Space>_s     <Plug>TComment_ _s
   <Space>_n     <Plug>TComment_ _n
   <Space>_a     <Plug>TComment_ _a
   <Space>_b     <Plug>TComment_ _b
   <Space>_r     <Plug>TComment_ _r
x  <Space>_i     <Plug>TComment_ _i
   <Space>_<Space>   <Plug>TComment_ _<Space>
   <Space>_p     <Plug>TComment_ _p
x  <Space>__     <Plug>TComment_ __
nos<Space>__     <Plug>TComment_ __
   <Space>rwp    <Plug>RestoreWinPosn
   <Space>swp    <Plug>SaveWinPosn
n  <Space>/    * :MemoGrep<CR>
n  <Space>.    * :MemoList<CR>
n  <Space>,    * :MemoNew<CR>
n  <Space>v    * :edit $MYVIMRC<CR>
n  <Space>cd   * :cd %:p:h<CR>:pwd<CR>
n  <Space>       [space]
x  #           * :<C-U>call <SNR>1_VSetSearch()<CR>?<C-R>=@/<CR><CR>
o  %           * v:<C-U>call <SNR>37_Match_wrapper('',1,'o') <CR>
v  %           * :<C-U>call <SNR>37_Match_wrapper('',1,'v') <CR>m'gv``
n  %           * :<C-U>call <SNR>37_Match_wrapper('',1,'n') <CR>
x  *           * :<C-U>call <SNR>1_VSetSearch()<CR>/<C-R>=@/<CR><CR>
   <Nop>(disable-IndentGuidesToggle)   <Plug>IndentGuidesToggle
n  M           * :call ToggleWindowSize()<CR>
n  Y           * y$
o  [%          * v:<C-U>call <SNR>37_MultiMatch("bW", "o") <CR>
v  [%            <Esc>[%m'gv``
n  [%          * :<C-U>call <SNR>37_MultiMatch("bW", "n") <CR>
   [space]f    * zf
   [space]r    * zR
   [space]i    * zMzv
   [space]m    * zM
   [space]a    * za
   [space]l    * zo
   [space]h    * zc
   [space]p    * [z
   [space]n    * ]z
   [space]k    * zk
   [space]j    * zj
   [space]     * <Nop>
o  ]%          * v:<C-U>call <SNR>37_MultiMatch("W",  "o") <CR>
v  ]%            <Esc>]%m'gv``
n  ]%          * :<C-U>call <SNR>37_MultiMatch("W",  "n") <CR>
v  a%            <Esc>[%v]%
o  aP            <Plug>(textobj-yyy-bbb-a)
x  aP            <Plug>(textobj-yyy-bbb-a)
v  gx            <Plug>NetrwBrowseXVis
n  gx            <Plug>NetrwBrowseX
o  g%          * v:<C-U>call <SNR>37_Match_wrapper('',0,'o') <CR>
v  g%          * :<C-U>call <SNR>37_Match_wrapper('',0,'v') <CR>m'gv``
n  g%          * :<C-U>call <SNR>37_Match_wrapper('',0,'n') <CR>
x  g>            <Plug>TComment_Comment
n  g>b           <Plug>TComment_Commentb
n  g>c           <Plug>TComment_Commentc
n  g>            <Plug>TComment_Comment
x  g<            <Plug>TComment_Uncomment
n  g<b           <Plug>TComment_Uncommentb
n  g<c           <Plug>TComment_Uncommentc
n  g<            <Plug>TComment_Uncomment
x  gc            <Plug>TComment_gc
n  gcb           <Plug>TComment_gcb
n  gcc           <Plug>TComment_gcc
n  gc9c          <Plug>TComment_gc9c
n  gc9           <Plug>TComment_gc9
n  gc8c          <Plug>TComment_gc8c
n  gc8           <Plug>TComment_gc8
n  gc7c          <Plug>TComment_gc7c
n  gc7           <Plug>TComment_gc7
n  gc6c          <Plug>TComment_gc6c
n  gc6           <Plug>TComment_gc6
n  gc5c          <Plug>TComment_gc5c
n  gc5           <Plug>TComment_gc5
n  gc4c          <Plug>TComment_gc4c
n  gc4           <Plug>TComment_gc4
n  gc3c          <Plug>TComment_gc3c
n  gc3           <Plug>TComment_gc3
n  gc2c          <Plug>TComment_gc2c
n  gc2           <Plug>TComment_gc2
n  gc1c          <Plug>TComment_gc1c
n  gc1           <Plug>TComment_gc1
n  gc            <Plug>TComment_gc
n  ga            <Plug>(EasyAlign)
x  ga            <Plug>(EasyAlign)
o  ic            <Plug>TComment_ic
v  ic            <Plug>TComment_ic
o  iP            <Plug>(textobj-yyy-bbb-i)
x  iP            <Plug>(textobj-yyy-bbb-i)
n  j           * gj
n  k           * gk
n  q?          * <Nop>
n  q/          * <Nop>
n  q:          * <Nop>
n  qqq/        * <Esc>q/
n  qqq:        * <Esc>q:
n  <Plug>(-fzf-:) * :
n  <Plug>(-fzf-/) * /
n  <Plug>(-fzf-vim-do) * :execute g:__fzf_command<CR>
v  <Plug>NetrwBrowseXVis * :<C-U>call netrw#BrowseXVis()<CR>
n  <Plug>NetrwBrowseX * :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())<CR>
n  <Plug>TComment_gc9c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc9c<CR>g@
n  <Plug>TComment_gc8c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc8c<CR>g@
n  <Plug>TComment_gc7c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc7c<CR>g@
n  <Plug>TComment_gc6c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc6c<CR>g@
n  <Plug>TComment_gc5c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc5c<CR>g@
n  <Plug>TComment_gc4c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc4c<CR>g@
n  <Plug>TComment_gc3c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc3c<CR>g@
n  <Plug>TComment_gc2c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc2c<CR>g@
n  <Plug>TComment_gc1c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc1c<CR>g@
v  <Plug>TComment_<C-_>9 * :call tcomment#SetOption("count", 9)<CR>
no <Plug>TComment_<C-_>9 * :call tcomment#SetOption("count", 9)<CR>
v  <Plug>TComment_<C-_>8 * :call tcomment#SetOption("count", 8)<CR>
no <Plug>TComment_<C-_>8 * :call tcomment#SetOption("count", 8)<CR>
v  <Plug>TComment_<C-_>7 * :call tcomment#SetOption("count", 7)<CR>
no <Plug>TComment_<C-_>7 * :call tcomment#SetOption("count", 7)<CR>
v  <Plug>TComment_<C-_>6 * :call tcomment#SetOption("count", 6)<CR>
no <Plug>TComment_<C-_>6 * :call tcomment#SetOption("count", 6)<CR>
v  <Plug>TComment_<C-_>5 * :call tcomment#SetOption("count", 5)<CR>
no <Plug>TComment_<C-_>5 * :call tcomment#SetOption("count", 5)<CR>
v  <Plug>TComment_<C-_>4 * :call tcomment#SetOption("count", 4)<CR>
no <Plug>TComment_<C-_>4 * :call tcomment#SetOption("count", 4)<CR>
v  <Plug>TComment_<C-_>3 * :call tcomment#SetOption("count", 3)<CR>
no <Plug>TComment_<C-_>3 * :call tcomment#SetOption("count", 3)<CR>
v  <Plug>TComment_<C-_>2 * :call tcomment#SetOption("count", 2)<CR>
no <Plug>TComment_<C-_>2 * :call tcomment#SetOption("count", 2)<CR>
v  <Plug>TComment_<C-_>1 * :call tcomment#SetOption("count", 1)<CR>
no <Plug>TComment_<C-_>1 * :call tcomment#SetOption("count", 1)<CR>
n  <Plug>TComment_gC * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gC<CR>g@
n  <Plug>TComment_gc * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc<CR>g@
x  <Plug>TComment_gc * :TCommentMaybeInline<CR>
n  <Plug>TComment_gcb * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gcb<CR>g@
n  <Plug>TComment_gcc * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gcc<CR>g@$
   <Plug>TComment_ic * :<C-U>call tcomment#textobject#InlineComment()<CR>
x  <Plug>TComment_Comment * :<C-U>if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | '<,'>TCommentMaybeInline!<CR>
n  <Plug>TComment_Commentb * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Commentb<CR>g@
n  <Plug>TComment_Commentc * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Commentc<CR>g@$
n  <Plug>TComment_Commentl * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Commentl<CR>g@$
n  <Plug>TComment_Comment * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Comment<CR>g@
x  <Plug>TComment_Uncomment * :<C-U>if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | call tcomment#SetOption("mode_extra", "U") | '<,'>TCommentMaybeInline<CR>
n  <Plug>TComment_Uncommentb * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Uncommentb<CR>g@
n  <Plug>TComment_Uncommentc * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Uncommentc<CR>g@$
n  <Plug>TComment_Uncomment * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Uncomment<CR>g@
   <Plug>TComment_<Space>_s * :TCommentAs <C-R>=&ft<CR>_
   <Plug>TComment_<Space>_n * :TCommentAs <C-R>=&ft<CR><Space>
   <Plug>TComment_<Space>_a * :TCommentAs<Space>
   <Plug>TComment_<Space>_b * :TCommentBlock<CR>
   <Plug>TComment_<Space>_r * :TCommentRight<CR>
x  <Plug>TComment_<Space>_i * :TCommentInline<CR>
   <Plug>TComment_<Space>_<Space> * :TComment<Space>
   <Plug>TComment_<Space>_p * vip:TComment<CR>
x  <Plug>TComment_<Space>__ * :TCommentMaybeInline<CR>
nos<Plug>TComment_<Space>__ * :TComment<CR>
   <Plug>TComment_<C-_>ca * :<C-U>call tcomment#SetOption("as", input("Comment as: ", &filetype, "customlist,tcomment#complete#Complete"))<CR>
   <Plug>TComment_<C-_>cc * :<C-U>call tcomment#SetOption("count", v:count1)<CR>
   <Plug>TComment_<C-_>s * :TCommentAs <C-R>=&ft<CR>_
   <Plug>TComment_<C-_>n * :TCommentAs <C-R>=&ft<CR><Space>
   <Plug>TComment_<C-_>a * :TCommentAs<Space>
   <Plug>TComment_<C-_>b * :TCommentBlock<CR>
   <Plug>TComment_<C-_>i * v:TCommentInline mode=I#<CR>
   <Plug>TComment_<C-_>r * :TCommentRight<CR>
   <Plug>TComment_<C-_><Space> * :TComment<Space>
   <Plug>TComment_<C-_>p * m`vip:TComment<CR>``
v  <Plug>TComment_<C-_><C-_> * :TCommentMaybeInline<CR>
no <Plug>TComment_<C-_><C-_> * :TComment<CR>
n  <Plug>(sonictemplate-intelligent) * :call sonictemplate#select_intelligent('n')<CR>
n  <Plug>(sonictemplate) * :call sonictemplate#select('n')<CR>
v  <Plug>(quickrun) * :<C-U>QuickRun -mode v<CR>
n  <Plug>(quickrun) * :<C-U>QuickRun -mode n<CR>
n  <Plug>(quickrun-op) * :<C-U>set operatorfunc=quickrun#operator<CR>g@
n  <Plug>IndentGuidesDisable & :IndentGuidesDisable<CR>
n  <Plug>IndentGuidesEnable & :IndentGuidesEnable<CR>
n  <Plug>IndentGuidesToggle & :IndentGuidesToggle<CR>
n  <Plug>(EasyAlignOperator) * :set opfunc=<SNR>24_easy_align_op<CR>g@
v  <Plug>(EasyAlignRepeat) * :<C-U>call <SNR>24_repeat_in_visual()<CR>
n  <Plug>(EasyAlignRepeat) * :call <SNR>24_easy_align_repeat()<CR>
v  <Plug>(LiveEasyAlign) * :<C-U>call <SNR>24_live_easy_align_op(visualmode(), 1)<CR>
n  <Plug>(LiveEasyAlign) * :set opfunc=<SNR>24_live_easy_align_op<CR>g@
v  <Plug>(EasyAlign) * :<C-U>call <SNR>24_easy_align_op(visualmode(), 1)<CR>
n  <Plug>(EasyAlign) * :set opfunc=<SNR>24_easy_align_op<CR>g@
n  <Plug>RestoreWinPosn   :call RestoreWinPosn()<CR>
n  <Plug>SaveWinPosn   :call SaveWinPosn()<CR>
o  <Plug>(fzf-maps-o) * <C-C>:<C-U>call fzf#vim#maps('o', 0)<CR>
x  <Plug>(fzf-maps-x) * :<C-U>call fzf#vim#maps('x', 0)<CR>
n  <Plug>(fzf-maps-n) * :<C-U>call fzf#vim#maps('n', 0)<CR>
o  <Plug>(textobj-yyy-bbb-a) & :<C-U>call g:__textobj_yyy.do_by_pattern("select-a","bbb","o")<CR>
v  <Plug>(textobj-yyy-bbb-a) & :<C-U>call g:__textobj_yyy.do_by_pattern("select-a","bbb","v")<CR>
o  <Plug>(textobj-yyy-bbb-i) & :<C-U>call g:__textobj_yyy.do_by_pattern("select-i","bbb","o")<CR>
v  <Plug>(textobj-yyy-bbb-i) & :<C-U>call g:__textobj_yyy.do_by_pattern("select-i","bbb","v")<CR>
n  <SNR>20_    * <SNR>20_