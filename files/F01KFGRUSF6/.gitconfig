	mb = "!f () {\
		merged=0;\
		if [ \"${#}\" -eq 1 ]; then\
			match_num=$(git branch | sed 's/^..//' | grep -x \"${*}\" | wc -l);\
			if [ 1 -eq \"${match_num}\" ]; then\
				git merge ${*};\
				merged=1;\
			fi;\
		fi;\
		common_opt=\"--prompt=merge> --query=${*}\";\
		if [ 1 -eq \"${merged}\" ]; then\
			:;\
		elif which fzf >/dev/null 2>&1; then\
			add_opt=\"--header=all-branch\";\
			if which bat >/dev/null 2>&1; then\
				git branch -a | grep -v '\\->' | sed -e 's/remotes\\///g' | tr -d ' \\*'\
					| fzf  ${common_opt} ${add_opt} --preview='git show {} | bat -l gitlog --color always --style plain'\
					| xargs -r -n 1 git merge;\
			else\
				git branch -a | grep -v '\\->' | sed -e 's/remotes\\///g' | tr -d ' \\*'\
					| fzf  ${common_opt} ${add_opt} --preview='git show {} | cat'\
					| xargs -r -n 1 git merge;\
			fi;\
		elif which peco >/dev/null 2>&1; then\
			git branch -a | grep -v '\\->' | sed -e 's/remotes\\///g' | tr -d ' \\*'\
				| peco ${common_opt}\
				| xargs -r -n 1 git merge;\
		elif [ \"${#}\" -ge 1 ]; then\
			git merge ${*};\
		fi;\
	};f"
