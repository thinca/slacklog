diff --git a/src/gui_dwrite.cpp b/src/gui_dwrite.cpp
index e1d19db8d..1aa7a6029 100644
--- a/src/gui_dwrite.cpp
+++ b/src/gui_dwrite.cpp
@@ -329,7 +329,7 @@ struct DWriteContext {
 
     void SetPixel(int x, int y, COLORREF color);
 
-    void Flush();
+    int Flush();
 
     void SetRenderingParams(
 	    const DWriteRenderingParams *params);
@@ -1066,10 +1066,12 @@ DWriteContext::SetPixel(int x, int y, COLORREF color)
     }
 }
 
-    void
+    int
 DWriteContext::Flush()
 {
+    DrawingMode prev = mDMode;
     SetDrawingMode(DM_GDI);
+    return int(prev);
 }
 
     void
@@ -1225,11 +1227,12 @@ DWriteContext_SetPixel(DWriteContext *ctx, int x, int y, COLORREF color)
 	ctx->SetPixel(x, y, color);
 }
 
-    void
+    int
 DWriteContext_Flush(DWriteContext *ctx)
 {
     if (ctx != NULL)
-	ctx->Flush();
+	return ctx->Flush();
+    return -1;
 }
 
     void
diff --git a/src/gui_dwrite.h b/src/gui_dwrite.h
index 9c98c4ce0..5e0b49c0c 100644
--- a/src/gui_dwrite.h
+++ b/src/gui_dwrite.h
@@ -74,7 +74,7 @@ void DWriteContext_FillRect(DWriteContext *ctx, const RECT *rc, COLORREF color);
 void DWriteContext_DrawLine(DWriteContext *ctx, int x1, int y1, int x2, int y2,
 	COLORREF color);
 void DWriteContext_SetPixel(DWriteContext *ctx, int x, int y, COLORREF color);
-void DWriteContext_Flush(DWriteContext *ctx);
+int DWriteContext_Flush(DWriteContext *ctx);
 void DWriteContext_Close(DWriteContext *ctx);
 
 void DWriteContext_SetRenderingParams(
diff --git a/src/gui_w32.c b/src/gui_w32.c
index 119bcd579..ff5722e75 100644
--- a/src/gui_w32.c
+++ b/src/gui_w32.c
@@ -37,6 +37,8 @@ static int s_directx_scrlines = 0;
 # define IS_ENABLE_DIRECTX() (s_directx_enabled && s_dwc != NULL)
 static int directx_enabled(void);
 static void directx_binddc(void);
+static int dx_pmode;
+static proftime_T dx_tm;
 #endif
 
 #ifdef FEAT_MENU
@@ -1681,7 +1683,12 @@ gui_mch_invert_rectangle(
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
-	DWriteContext_Flush(s_dwc);
+    {
+	profile_start(&dx_tm);
+	dx_pmode = DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s)\n", profile_msg(&dx_tm), "gui_mch_invert_rectangle");
+    }
 #endif
 
     /*
@@ -1714,7 +1721,12 @@ gui_mch_draw_hollow_cursor(guicolor_T color)
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
-	DWriteContext_Flush(s_dwc);
+    {
+	profile_start(&dx_tm);
+	dx_pmode = DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_draw_hollow_cursor");
+    }
 #endif
 
     /*
@@ -3054,7 +3066,12 @@ gui_mch_flash(int msec)
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
-	DWriteContext_Flush(s_dwc);
+    {
+	profile_start(&dx_tm);
+	dx_pmode = DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_flash");
+    }
 #endif
 
     /*
@@ -3144,7 +3161,12 @@ gui_mch_delete_lines(
 	    use_redraw = 1;
 	}
 	else
-	    DWriteContext_Flush(s_dwc);
+	{
+	    profile_start(&dx_tm);
+	    dx_pmode = DWriteContext_Flush(s_dwc);
+	    profile_end(&dx_tm);
+	    Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_delete_lines");
+	}
     }
     if (!use_redraw)
 #endif
@@ -3194,7 +3216,12 @@ gui_mch_insert_lines(
 	    use_redraw = 1;
 	}
 	else
-	    DWriteContext_Flush(s_dwc);
+	{
+	    profile_start(&dx_tm);
+	    dx_pmode = DWriteContext_Flush(s_dwc);
+	    profile_end(&dx_tm);
+	    Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_insert_lines");
+	}
     }
     if (!use_redraw)
 #endif
@@ -6600,7 +6627,12 @@ gui_mch_flush(void)
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
-	DWriteContext_Flush(s_dwc);
+    {
+	profile_start(&dx_tm);
+	dx_pmode = DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_flush");
+    }
 #endif
 
     GdiFlush();
@@ -8514,7 +8546,12 @@ gui_mch_drawsign(int row, int col, int typenr)
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
-	DWriteContext_Flush(s_dwc);
+    {
+	profile_start(&dx_tm);
+	dx_pmode = DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "gui_mch_drawsign");
+    }
 #endif
 
     x = TEXT_X(col);
@@ -8998,7 +9035,12 @@ netbeans_draw_multisign_indicator(int row)
 
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
+    {
+	profile_start(&dx_tm);
 	DWriteContext_Flush(s_dwc);
+	profile_end(&dx_tm);
+	Trace("%s (%d - %s)\n", profile_msg(&dx_tm), dx_pmode, "netbeans_draw_multisign_indicator");
+    }
 #endif
 
     for (i = 0; i < gui.char_height - 3; i++)
diff --git a/src/regexp.c b/src/regexp.c
index 7f5e265eb..5538a24a9 100644
--- a/src/regexp.c
+++ b/src/regexp.c
@@ -41,7 +41,7 @@
 /* Uncomment the first if you do not want to see debugging logs or files
  * related to regular expressions, even when compiling with -DDEBUG.
  * Uncomment the second to get the regexp debugging. */
-/* #undef DEBUG */
+#undef DEBUG
 /* #define DEBUG */
 
 #include "vim.h"
