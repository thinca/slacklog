function! s:from_date(...) abort
  let o = copy(s:DateTime)
  let [o._year, o._month, o._day, o._hour, o._minute, o._second, tz] =
        \   a:000 + [1970, 1, 1, 0, 0, 0, ''][a:0 :]
  return o
endfunction

function! s:from_format(string, format, ...) abort
  let o = copy(s:DateTime)
  let locale = a:0 ? a:1 : ''
  let remain = a:string
  return o
endfunction

let s:Class = {}
function! s:Class._clone() abort
  " return copy(self) " これを使うとcrashしない
  return filter(copy(self), '1')
endfunction
function! s:_new_class(class) abort
  return extend({'class': a:class}, s:Class)
endfunction

let s:DateTime = s:_new_class('DateTime')
function! s:DateTime.unix_time() abort
  if !has_key(self, '__unix_time')
    let utc = self._clone()
    let self.__unix_time = (0 - 2440588) *
          \  s:SECONDS_OF_DAY + (utc._hour * s:NUM_MINUTES + utc._minute) * s:NUM_SECONDS + utc._second
    if self.__unix_time < 0
      let self.__unix_time = -1
    endif
  endif
  return self.__unix_time
endfunction

let s:NUM_SECONDS = 60
let s:NUM_MINUTES = 60
let s:NUM_HOURS = 24
let s:NUM_MONTHS = 12
let s:SECONDS_OF_HOUR = s:NUM_SECONDS * s:NUM_MINUTES
let s:SECONDS_OF_DAY = s:SECONDS_OF_HOUR * s:NUM_HOURS

call map(range(1, 12), 's:from_date(1970, v:val, 1, 0, 0, 0, 0).unix_time()')
