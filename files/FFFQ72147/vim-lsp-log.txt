水  1/16 13:55:21 2019:["lsp#register_server","server registered","cquery"]
水  1/16 13:55:21 2019:["lsp#register_server","server registered","bash-language-server"]
水  1/16 13:55:21 2019:["s:on_text_document_did_open()",1,"","/Users/yaegassy",""]
水  1/16 13:55:22 2019:["s:on_text_document_did_open()",1,"vim","/Users/yaegassy","file:///Users/yaegassy/.vimrc"]
水  1/16 13:55:24 2019:["s:on_text_document_did_change()",1]
水  1/16 13:55:24 2019:["s:send_didchange_queue() will be triggered"]
水  1/16 13:55:25 2019:["s:on_text_document_did_change()",1]
水  1/16 13:55:25 2019:["s:on_text_document_did_save()",1]
水  1/16 13:55:26 2019:["s:on_text_document_did_save()",1]
水  1/16 13:55:26 2019:["s:on_text_document_did_close()",1]
水  1/16 13:55:56 2019:["lsp#register_server","server registered","go-golsp"]
水  1/16 13:55:56 2019:["lsp#register_server","server registered","rls"]
水  1/16 13:55:56 2019:["lsp#register_server","server registered","pyls"]
水  1/16 13:55:56 2019:["lsp#register_server","server registered","typescript-language-server"]
水  1/16 13:55:56 2019:["lsp#register_server","server registered","php-language-server"]
水  1/16 13:55:56 2019:["lsp#register_server","server registered","vue-language-server"]
水  1/16 13:55:56 2019:["lsp#register_server","server registered","css-languageserver"]
水  1/16 13:55:56 2019:["lsp#register_server","server registered","cquery"]
水  1/16 13:55:56 2019:["lsp#register_server","server registered","bash-language-server"]
水  1/16 13:55:56 2019:["s:on_text_document_did_open()",1,"python","/Users/yaegassy","file:///Users/yaegassy/a.py"]
水  1/16 13:55:56 2019:[{"response":{"data":{"__data__":"vim-lsp","lsp_id":1,"server_name":"pyls"},"message":"started lsp server successfully"}}]
水  1/16 13:55:56 2019:["--->",1,"pyls",{"method":"initialize","params":{"rootUri":"file:///Users/yaegassy","initializationOptions":{},"capabilities":{"workspace":{"applyEdit ":true}},"rootPath":"/Users/yaegassy","trace":"off"}}]
水  1/16 13:55:56 2019:["<---(stderr)",1,"pyls",["2019-01-16 13:55:56,792 UTC - WARNING - pyls.config.config - Failed to load pyls entry point 'pydocstyle': No module named 'pydocstyle'",""]]
水  1/16 13:55:56 2019:["<---",1,"pyls",{"response":{"id":1,"jsonrpc":"2.0","result":{"capabilities":{"executeCommandProvider":{"commands":[]},"documentHighlightProvider":true,"hoverProvider":true,"referencesProvider":true,"signatureHelpProvider":{"triggerCharacters":["(",","]},"codeActionProvider":true,"textDocumentSync":2,"codeLensProvider":{"resolveProvider":false},"definitionProvider":true,"documentRangeFormattingProvider":true,"documentFormattingProvider":true,"documentSymbolProvider":true,"experimental":{},"renameProvider":true,"completionProvider":{"resolveProvider":false,"triggerCharacters":["."]}}}},"request":{"method":"initialize","jsonrpc":"2.0","id":1,"params":{"rootUri":"file:///Users/yaegassy","initializationOptions":{},"capabilities":{"workspace":{"applyEdit ":true}},"rootPath":"/Users/yaegassy","trace":"off"}}}]
水  1/16 13:55:56 2019:[{"response":{"data":{"__data__":"vim-lsp","server_name":"pyls"},"message":"configuration sent"}}]
水  1/16 13:55:56 2019:["s:update_file_content()","pyls"]
水  1/16 13:55:56 2019:["--->",1,"pyls",{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/yaegassy/a.py","version":1,"languageId":"python","text":"import sys"}}}]
水  1/16 13:55:56 2019:[{"response":{"data":{"path":"file:///Users/yaegassy/a.py","__data__":"vim-lsp","filetype":"python","server_name":"pyls"},"message":"textDocument/open sent"}}]
水  1/16 13:55:56 2019:[{"response":{"data":{"path":"file:///Users/yaegassy/a.py","__data__":"vim-lsp","server_name":"pyls"},"message":"not dirty"}}]
水  1/16 13:55:57 2019:["<---",1,"pyls",{"response":{"method":"textDocument/publishDiagnostics","jsonrpc":"2.0","params":{"uri":"file:///Users/yaegassy/a.py","diagnostics":[{"source":"pyflakes","message":"'sys' imported but unused","severity":2,"range":{"end":{"character":10,"line":0},"start":{"character":0,"line":0}}},{"source":"pycodestyle","code":"W391","message":"W391 blank line at end of file","severity":2,"range":{"end":{"character":10,"line":0},"start":{"character":0,"line":0}}}]}}}]
水  1/16 13:56:00 2019:[{"response":{"data":{"__data__":"vim-lsp","server_name":"pyls"},"message":"server already started"}}]
水  1/16 13:56:00 2019:[{"response":{"data":{"__data__":"vim-lsp","init_result":{"id":1,"jsonrpc":"2.0","result":{"capabilities":{"executeCommandProvider":{"commands":[]},"documentHighlightProvider":true,"hoverProvider":true,"referencesProvider":true,"signatureHelpProvider":{"triggerCharacters":["(",","]},"codeActionProvider":true,"textDocumentSync":2,"codeLensProvider":{"resolveProvider":false},"definitionProvider":true,"documentRangeFormattingProvider":true,"documentFormattingProvider":true,"documentSymbolProvider":true,"experimental":{},"renameProvider":true,"completionProvider":{"resolveProvider":false,"triggerCharacters":["."]}}}},"server_name":"pyls"},"message":"lsp server already initialized"}}]
水  1/16 13:56:00 2019:[{"response":{"data":{"__data__":"vim-lsp","server_name":"pyls"},"message":"configuration sent"}}]
水  1/16 13:56:00 2019:[{"response":{"data":{"path":"file:///Users/yaegassy/a.py","__data__":"vim-lsp","server_name":"pyls"},"message":"already opened"}}]
水  1/16 13:56:00 2019:["s:update_file_content()",1]
水  1/16 13:56:00 2019:["--->",1,"pyls",{"method":"textDocument/didChange","params":{"contentChanges":[{"text":"import sys\n\ns"}],"textDocument":{"uri":"file:///Users/yaegassy/a.py","version":2}}}]
水  1/16 13:56:00 2019:[{"response":{"data":{"path":"file:///Users/yaegassy/a.py","__data__":"vim-lsp","server_name":"pyls"},"message":"textDocument/didChange sent"}}]
水  1/16 13:56:00 2019:["--->",1,"pyls",{"method":"textDocument/completion","on_notification":"---funcref---","params":{"textDocument":{"uri":"file:///Users/yaegassy/a.py"},"position":{"character":1,"line":2}}}]
水  1/16 13:56:00 2019:["s:on_text_document_did_change()",1]
水  1/16 13:56:00 2019:["s:send_didchange_queue() will be triggered"]
水  1/16 13:56:01 2019:["<---",1,"pyls",{"response":{"id":2,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"label":"set","insertText":"set","sortText":"aset","kind":7,"documentation":"set() -> new empty set object\nset(iterable) -> new set object\n\nBuild an unordered collection of unique elements.","detail":""},{"label":"setattr(obj, name, value)","insertText":"setattr","sortText":"asetattr","kind":3,"documentation":"Sets the named attribute on the given object to the specified value.\n\nsetattr(x, 'y', v) is equivalent to ``x.y = v''","detail":""},{"label":"slice","insertText":"slice","sortText":"aslice","kind":7,"documentation":"slice(stop)\nslice(start, stop[, step])\n\nCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2]).","detail":""},{"label":"sorted(iterable, key, reverse)","insertText":"sorted","sortText":"asorted","kind":3,"documentation":"Return a new list containing all items from the iterable in ascending order.\n\nA custom key function can be supplied to customize the sort order, and the\nreverse flag can be set to request the result in descending order.","detail":""},{"label":"staticmethod","insertText":"staticmethod","sortText":"astaticmethod","kind":7,"documentation":"staticmethod(function) -> method\n\nConvert a function to be a static method.\n\nA static method does not receive an implicit first argument.\nTo declare a static method, use this idiom:\n\n     class C:\n         @staticmethod\n         def f(arg1, arg2, ...):\n             ...\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\n\nStatic methods in Python are similar to those found in Java or C++.\nFor a more advanced concept, see the classmethod builtin.","detail":""},{"label":"StopAsyncIteration","insertText":"StopAsyncIteration","sortText":"aStopAsyncIteration","kind":7,"documentation":"Signal the end from iterator.__anext__().","detail":""},{"label":"StopIteration","insertText":"StopIteration","sortText":"aStopIteration","kind":7,"documentation":"Signal the end from iterator.__next__().","detail":""},{"label":"str","insertText":"str","sortText":"astr","kind":7,"documentation":"str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.","detail":""},{"label":"sum(iterable, start)","insertText":"sum","sortText":"asum","kind":3,"documentation":"Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n\nWhen the iterable is empty, return the start value.\nThis function is intended specifically for use with numeric values and may\nreject non-numeric types.","detail":""},{"label":"super","insertText":"super","sortText":"asuper","kind":7,"documentation":"super() -> same as super(__class__, <first argument>)\nsuper(type) -> unbound super object\nsuper(type, obj) -> bound super object; requires isinstance(obj, type)\nsuper(type, type2) -> bound super object; requires issubclass(type2, type)\nTypical use to call a cooperative superclass method:\nclass C(B):\n    def meth(self, arg):\n        super().meth(arg)\nThis works for class methods too:\nclass C(B):\n    @classmethod\n    def cmeth(cls, arg):\n        super().cmeth(arg)","detail":""},{"label":"SyntaxError","insertText":"SyntaxError","sortText":"aSyntaxError","kind":7,"documentation":"Invalid syntax.","detail":""},{"label":"SyntaxWarning","insertText":"SyntaxWarning","sortText":"aSyntaxWarning","kind":7,"documentation":"Base class for warnings about dubious syntax.","detail":""},{"label":"sys","insertText":"sys","sortText":"asys","kind":9,"documentation":"This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nstdin -- standard input file object; used by input()\nstdout -- standard output file object; used by print()\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nStatic objects:\n\nbuiltin_module_names -- tuple of module names built into this interpreter\ncopyright -- copyright notice pertaining to this interpreter\nexec_prefix -- prefix used to find the machine-specific Python library\nexecutable -- absolute path of the executable binary of the Python interpreter\nfloat_info -- a struct sequence with information about the float implementation.\nfloat_repr_style -- string indicating the style of repr() output for floats\nhash_info -- a struct sequence with information about the hash algorithm.\nhexversion -- version information encoded as a single integer\nimplementation -- Python implementation information.\nint_info -- a struct sequence with information about the int implementation.\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the value of the largest Unicode code point\nplatform -- platform identifier\nprefix -- prefix used to find the Python library\nthread_info -- a struct sequence with information about the thread implementation.\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in builtins._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetcheckinterval() -- control how often the interpreter checks for events\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function","detail":"__main__"},{"label":"SystemError","insertText":"SystemError","sortText":"aSystemError","kind":7,"documentation":"Internal error in the Python interpreter.\n\nPlease report this to the Python maintainer, along with the traceback,\nthe Python version, and the hardware/OS platform and version.","detail":""},{"label":"SystemExit","insertText":"SystemExit","sortText":"aSystemExit","kind":7,"documentation":"Request to exit from the interpreter.","detail":""}]}},"request":{"method":"textDocument/completion","jsonrpc":"2.0","id":2,"params":{"textDocument":{"uri":"file:///Users/yaegassy/a.py"},"position":{"character":1,"line":2}}}}]
水  1/16 13:56:01 2019:["<---",1,"pyls",{"response":{"method":"textDocument/publishDiagnostics","jsonrpc":"2.0","params":{"uri":"file:///Users/yaegassy/a.py","diagnostics":[{"source":"pyflakes","message":"'sys' imported but unused","severity":2,"range":{"end":{"character":11,"line":0},"start":{"character":0,"line":0}}},{"source":"pyflakes","message":"undefined name 's'","severity":1,"range":{"end":{"character":1,"line":2},"start":{"character":0,"line":2}}},{"source":"pycodestyle","code":"W391","message":"W391 blank line at end of file","severity":2,"range":{"end":{"character":1,"line":2},"start":{"character":0,"line":2}}}]}}}]
水  1/16 13:56:01 2019:[{"response":{"data":{"__data__":"vim-lsp","server_name":"pyls"},"message":"server already started"}}]
水  1/16 13:56:01 2019:[{"response":{"data":{"__data__":"vim-lsp","init_result":{"id":1,"jsonrpc":"2.0","result":{"capabilities":{"executeCommandProvider":{"commands":[]},"documentHighlightProvider":true,"hoverProvider":true,"referencesProvider":true,"signatureHelpProvider":{"triggerCharacters":["(",","]},"codeActionProvider":true,"textDocumentSync":2,"codeLensProvider":{"resolveProvider":false},"definitionProvider":true,"documentRangeFormattingProvider":true,"documentFormattingProvider":true,"documentSymbolProvider":true,"experimental":{},"renameProvider":true,"completionProvider":{"resolveProvider":false,"triggerCharacters":["."]}}}},"server_name":"pyls"},"message":"lsp server already initialized"}}]
水  1/16 13:56:01 2019:[{"response":{"data":{"__data__":"vim-lsp","server_name":"pyls"},"message":"configuration sent"}}]
水  1/16 13:56:01 2019:[{"response":{"data":{"path":"file:///Users/yaegassy/a.py","__data__":"vim-lsp","server_name":"pyls"},"message":"already opened"}}]
水  1/16 13:56:01 2019:["--->",1,"pyls",{"method":"textDocument/didChange","params":{"contentChanges":[],"textDocument":{"uri":"file:///Users/yaegassy/a.py","version":3}}}]
水  1/16 13:56:01 2019:[{"response":{"data":{"path":"file:///Users/yaegassy/a.py","__data__":"vim-lsp","server_name":"pyls"},"message":"textDocument/didChange sent"}}]
水  1/16 13:56:01 2019:["--->",1,"pyls",{"method":"textDocument/completion","on_notification":"---funcref---","params":{"textDocument":{"uri":"file:///Users/yaegassy/a.py"},"position":{"character":4,"line":2}}}]
水  1/16 13:56:01 2019:["<---",1,"pyls",{"response":{"id":3,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"label":"set","insertText":"set","sortText":"aset","kind":7,"documentation":"set() -> new empty set object\nset(iterable) -> new set object\n\nBuild an unordered collection of unique elements.","detail":""},{"label":"setattr(obj, name, value)","insertText":"setattr","sortText":"asetattr","kind":3,"documentation":"Sets the named attribute on the given object to the specified value.\n\nsetattr(x, 'y', v) is equivalent to ``x.y = v''","detail":""},{"label":"slice","insertText":"slice","sortText":"aslice","kind":7,"documentation":"slice(stop)\nslice(start, stop[, step])\n\nCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2]).","detail":""},{"label":"sorted(iterable, key, reverse)","insertText":"sorted","sortText":"asorted","kind":3,"documentation":"Return a new list containing all items from the iterable in ascending order.\n\nA custom key function can be supplied to customize the sort order, and the\nreverse flag can be set to request the result in descending order.","detail":""},{"label":"staticmethod","insertText":"staticmethod","sortText":"astaticmethod","kind":7,"documentation":"staticmethod(function) -> method\n\nConvert a function to be a static method.\n\nA static method does not receive an implicit first argument.\nTo declare a static method, use this idiom:\n\n     class C:\n         @staticmethod\n         def f(arg1, arg2, ...):\n             ...\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\n\nStatic methods in Python are similar to those found in Java or C++.\nFor a more advanced concept, see the classmethod builtin.","detail":""},{"label":"StopAsyncIteration","insertText":"StopAsyncIteration","sortText":"aStopAsyncIteration","kind":7,"documentation":"Signal the end from iterator.__anext__().","detail":""},{"label":"StopIteration","insertText":"StopIteration","sortText":"aStopIteration","kind":7,"documentation":"Signal the end from iterator.__next__().","detail":""},{"label":"str","insertText":"str","sortText":"astr","kind":7,"documentation":"str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.","detail":""},{"label":"sum(iterable, start)","insertText":"sum","sortText":"asum","kind":3,"documentation":"Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n\nWhen the iterable is empty, return the start value.\nThis function is intended specifically for use with numeric values and may\nreject non-numeric types.","detail":""},{"label":"super","insertText":"super","sortText":"asuper","kind":7,"documentation":"super() -> same as super(__class__, <first argument>)\nsuper(type) -> unbound super object\nsuper(type, obj) -> bound super object; requires isinstance(obj, type)\nsuper(type, type2) -> bound super object; requires issubclass(type2, type)\nTypical use to call a cooperative superclass method:\nclass C(B):\n    def meth(self, arg):\n        super().meth(arg)\nThis works for class methods too:\nclass C(B):\n    @classmethod\n    def cmeth(cls, arg):\n        super().cmeth(arg)","detail":""},{"label":"SyntaxError","insertText":"SyntaxError","sortText":"aSyntaxError","kind":7,"documentation":"Invalid syntax.","detail":""},{"label":"SyntaxWarning","insertText":"SyntaxWarning","sortText":"aSyntaxWarning","kind":7,"documentation":"Base class for warnings about dubious syntax.","detail":""},{"label":"sys","insertText":"sys","sortText":"asys","kind":9,"documentation":"This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nstdin -- standard input file object; used by input()\nstdout -- standard output file object; used by print()\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nStatic objects:\n\nbuiltin_module_names -- tuple of module names built into this interpreter\ncopyright -- copyright notice pertaining to this interpreter\nexec_prefix -- prefix used to find the machine-specific Python library\nexecutable -- absolute path of the executable binary of the Python interpreter\nfloat_info -- a struct sequence with information about the float implementation.\nfloat_repr_style -- string indicating the style of repr() output for floats\nhash_info -- a struct sequence with information about the hash algorithm.\nhexversion -- version information encoded as a single integer\nimplementation -- Python implementation information.\nint_info -- a struct sequence with information about the int implementation.\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the value of the largest Unicode code point\nplatform -- platform identifier\nprefix -- prefix used to find the Python library\nthread_info -- a struct sequence with information about the thread implementation.\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in builtins._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetcheckinterval() -- control how often the interpreter checks for events\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function","detail":"__main__"},{"label":"SystemError","insertText":"SystemError","sortText":"aSystemError","kind":7,"documentation":"Internal error in the Python interpreter.\n\nPlease report this to the Python maintainer, along with the traceback,\nthe Python version, and the hardware/OS platform and version.","detail":""},{"label":"SystemExit","insertText":"SystemExit","sortText":"aSystemExit","kind":7,"documentation":"Request to exit from the interpreter.","detail":""}]}},"request":{"method":"textDocument/completion","jsonrpc":"2.0","id":3,"params":{"textDocument":{"uri":"file:///Users/yaegassy/a.py"},"position":{"character":4,"line":2}}}}]
水  1/16 13:56:01 2019:["<---",1,"pyls",{"response":{"method":"textDocument/publishDiagnostics","jsonrpc":"2.0","params":{"uri":"file:///Users/yaegassy/a.py","diagnostics":[{"source":"pyflakes","message":"'sys' imported but unused","severity":2,"range":{"end":{"character":11,"line":0},"start":{"character":0,"line":0}}},{"source":"pyflakes","message":"undefined name 's'","severity":1,"range":{"end":{"character":1,"line":2},"start":{"character":0,"line":2}}},{"source":"pycodestyle","code":"W391","message":"W391 blank line at end of file","severity":2,"range":{"end":{"character":1,"line":2},"start":{"character":0,"line":2}}}]}}}]
水  1/16 13:56:03 2019:["s:on_text_document_did_change()",1]
水  1/16 13:56:04 2019:["s:send_event_queue()"]
水  1/16 13:56:04 2019:[{"response":{"data":{"__data__":"vim-lsp","server_name":"pyls"},"message":"server already started"}}]
水  1/16 13:56:04 2019:[{"response":{"data":{"__data__":"vim-lsp","init_result":{"id":1,"jsonrpc":"2.0","result":{"capabilities":{"executeCommandProvider":{"commands":[]},"documentHighlightProvider":true,"hoverProvider":true,"referencesProvider":true,"signatureHelpProvider":{"triggerCharacters":["(",","]},"codeActionProvider":true,"textDocumentSync":2,"codeLensProvider":{"resolveProvider":false},"definitionProvider":true,"documentRangeFormattingProvider":true,"documentFormattingProvider":true,"documentSymbolProvider":true,"experimental":{},"renameProvider":true,"completionProvider":{"resolveProvider":false,"triggerCharacters":["."]}}}},"server_name":"pyls"},"message":"lsp server already initialized"}}]
水  1/16 13:56:04 2019:[{"response":{"data":{"__data__":"vim-lsp","server_name":"pyls"},"message":"configuration sent"}}]
水  1/16 13:56:04 2019:[{"response":{"data":{"path":"file:///Users/yaegassy/a.py","__data__":"vim-lsp","server_name":"pyls"},"message":"already opened"}}]
水  1/16 13:56:04 2019:[{"response":{"data":{"path":"file:///Users/yaegassy/a.py","__data__":"vim-lsp","server_name":"pyls"},"message":"not dirty"}}]
水  1/16 13:56:10 2019:["s:on_text_document_did_close()",1]
