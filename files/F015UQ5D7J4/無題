import { Reducer } from "redux"
import { produce } from "immer"

type Obj = {
  id: string
  text: string
}

export type State = {
  item: Obj
}

export type Actions = ReturnType<typeof action1> | ReturnType<typeof action2>

const initialState: State = {
  item: {
    id: "",
    text: ""
  }
}

const ACTION_1 = "ACTION_1"
const ACTION_2 = "ACTION_2"

const action1 = (payload: { obj: Obj }) => 
  ({
    type: ACTION_1,
    payload
  } as const)

const action2 = (payload: { obj: Obj }) => 
  ({
    type: ACTION_2,
    payload
  } as const)

export const reducer: Reducer<State, Actions> = (state = initialState, action) => {
  switch (action.type) {
    case ACTION_1: {
      return produce(state, draft => {
        draft.item = action.payload.obj
      })
    }
    case ACTION_2: {
      return produce(state, draft => {
        draft.item = action.payload.obj
      })
    }
    default: {
      const none = (_: never) => _
      none(action)

      return state
    }
  }
}