  call coc#config('codeLens.enable', v:true)
  call coc#config('suggest.minTriggerInputLength', 1)
  call coc#config('suggest.triggerAfterInsertEnter', v:true)
  call coc#config('suggest.fixInsertedWord', v:false)
  call coc#config('diagnostic.checkCurrentLine', v:true)
  call coc#config('diagnostic.refreshAfterSave', v:true)

  call coc#config('typescript.preferences.importModuleSpecifier', 'relative')
  call coc#config('typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces', v:true)
  call coc#config('typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces', v:true)

  call coc#config('diagnostic-languageserver.linters.eslint_d', {
        \   'sourceName': 'eslint_d',
        \   'command': 'eslint_d',
        \   'args': ['--stdin', '--stdin-filename=*.tsx', '--no-color'],
        \   'rootPatterns': ['.eslintrc', '.eslintrc.js'],
        \   'formatLines': 1,
        \   'formatPattern': [
        \     '^\s*(\d+):(\d+)\s+([^ ]+)\s+(.*?)\s+([^ ]+)$',
        \     {
        \       'line': 1,
        \       'column': 2,
        \       'message': [4, ' [', 5, ']' ],
        \       'security': 3
        \     }
        \   ]
        \ })
  call coc#config('diagnostic-languageserver.filetypes', {
        \   'javascript': 'eslint_d',
        \   'typescript': 'eslint_d',
        \ })
  call coc#config('diagnostic-languageserver.formatters.eslint_d', {
        \   'rootPatterns': ['.eslintrc', '.eslintrc.js'],
        \   'command': 'eslint_d',
        \   'args': ['--fix', '--fix-to-stdout', '--stdin', '--stdin-filename=*.tsx'],
        \   'isStdout': v:true,
        \   'isStderr': v:true,
        \ })
  call coc#config('diagnostic-languageserver.formatFiletypes', {
        \   'javascript': 'eslint_d',
        \   'typescript': 'eslint_d',
        \ })
