diff --git a/autoload/fzf_preview/remote/consumer/git.vim b/autoload/fzf_preview/remote/consumer/git.vim
index 1061621..a64a7de 100644
--- a/autoload/fzf_preview/remote/consumer/git.vim
+++ b/autoload/fzf_preview/remote/consumer/git.vim
@@ -31,6 +31,15 @@ function! fzf_preview#remote#consumer#git#patch(file) abort
   echoerr 'Fugitive and Gina not installed'
 endfunction

+function! fzf_preview#remote#consumer#git#chaperon(file) abort
+  if has('nvim') && exists(':Gina') == 2
+    execute 'Gina chaperon ' . a:file
+    return
+  endif
+
+  echoerr 'Gina not installed'
+endfunction
+
 function! fzf_preview#remote#consumer#git#commit(option) abort
   if match(a:option, '--fixup') != -1
     echomsg system('git commit ' . a:option)
diff --git a/src/connector/git.ts b/src/connector/git.ts
index e2a67b1..e4c6887 100644
--- a/src/connector/git.ts
+++ b/src/connector/git.ts
@@ -130,6 +130,10 @@ export const gitPatch = async (file: string): Promise<void> => {
   await pluginCall("fzf_preview#remote#consumer#git#patch", [file])
 }

+export const gitChaperon = async (file: string): Promise<void> => {
+  await pluginCall("fzf_preview#remote#consumer#git#chaperon", [file])
+}
+
 type CommitOption =
   | { name: "--amend" }
   | { name: "--amend --no-edit" }
diff --git a/src/const/git.ts b/src/const/git.ts
index 62d7d2a..f8c8f3e 100644
--- a/src/const/git.ts
+++ b/src/const/git.ts
@@ -14,7 +14,7 @@ export const GIT_ACTIONS = [
   "pull",
   "toggle --no-verify",
 ] as const
-export const GIT_STATUS_ACTIONS = ["add", "reset", "patch", "checkout"] as const
+export const GIT_STATUS_ACTIONS = ["add", "reset", "patch", "checkout", "chaperon"] as const
 export const GIT_BRANCH_ACTIONS = [
   "diff",
   "checkout",
diff --git a/src/fzf/process/consumer/git-status-action.ts b/src/fzf/process/consumer/git-status-action.ts
index 50a34fa..b143b88 100644
--- a/src/fzf/process/consumer/git-status-action.ts
+++ b/src/fzf/process/consumer/git-status-action.ts
@@ -1,4 +1,4 @@
-import { gitAdd, gitCheckout, gitPatch, gitReset } from "@/connector/git"
+import { gitAdd, gitChaperon, gitCheckout, gitPatch, gitReset } from "@/connector/git"
 import { chainFzfCommand, createSingleLineConsumer } from "@/fzf/process/consumer"
 import { unreachable } from "@/util/type"

@@ -43,6 +43,13 @@ export const execGitStatusActionConsumer = createSingleLineConsumer(async (data)
       await chainFzfCommand("FzfPreviewGitStatus")
       break
     }
+    case "chaperon": {
+      for (const file of data.files) {
+        // eslint-disable-next-line no-await-in-loop
+        await gitChaperon(file)
+      }
+      break
+    }

     case "header": {
       break
