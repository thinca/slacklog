diff --git a/src/gui_dwrite.cpp b/src/gui_dwrite.cpp
index bd76383c5..13132813b 100644
--- a/src/gui_dwrite.cpp
+++ b/src/gui_dwrite.cpp
@@ -423,7 +423,49 @@ public:
 	__in DWRITE_UNDERLINE const* underline,
 	IUnknown* clientDrawingEffect)
     {
-	return E_NOTIMPL;
+	TextRendererContext *context =
+	    reinterpret_cast<TextRendererContext*>(clientDrawingContext);
+
+	HRESULT hr;
+
+	D2D1_RECT_F rect = D2D1::RectF(
+		0,
+		underline->offset,
+		underline->width,
+		underline->offset + underline->thickness);
+
+	ID2D1RectangleGeometry* pRectangleGeometry = NULL;
+	hr = pDWC_->mD2D1Factory->CreateRectangleGeometry(
+		&rect,
+		&pRectangleGeometry);
+
+	// Initialize a matrix to translate the origin of the underline
+	D2D1::Matrix3x2F const matrix = D2D1::Matrix3x2F(
+		1.0f, 0.0f,
+		0.0f, 1.0f,
+		baselineOriginX, baselineOriginY);
+
+	ID2D1TransformedGeometry* pTransformedGeometry = NULL;
+	if (SUCCEEDED(hr))
+	{
+	    hr = pDWC_->mD2D1Factory->CreateTransformedGeometry(
+		    pRectangleGeometry,
+		    &matrix,
+		    &pTransformedGeometry);
+	}
+
+	ID2D1Brush *br = pDWC_->SolidBrush(context->color);
+
+	// Draw the outline of the rectangle
+	//pDWC_->mRT->DrawGeometry(pTransformedGeometry, br);
+
+	// Fill in the rectangle
+	pDWC_->mRT->FillGeometry(pTransformedGeometry, br);
+
+	SafeRelease(&pRectangleGeometry);
+	SafeRelease(&pTransformedGeometry);
+
+	return S_OK;
     }
 
     IFACEMETHOD(DrawStrikethrough)(
@@ -433,7 +475,49 @@ public:
 	__in DWRITE_STRIKETHROUGH const* strikethrough,
 	IUnknown* clientDrawingEffect)
     {
-	return E_NOTIMPL;
+	TextRendererContext *context =
+	    reinterpret_cast<TextRendererContext*>(clientDrawingContext);
+
+	HRESULT hr;
+
+	D2D1_RECT_F rect = D2D1::RectF(
+		0,
+		strikethrough->offset,
+		strikethrough->width,
+		strikethrough->offset + strikethrough->thickness);
+
+	ID2D1RectangleGeometry* pRectangleGeometry = NULL;
+	hr = pDWC_->mD2D1Factory->CreateRectangleGeometry(
+		&rect,
+		&pRectangleGeometry);
+
+	// Initialize a matrix to translate the origin of the strikethrough
+	D2D1::Matrix3x2F const matrix = D2D1::Matrix3x2F(
+		1.0f, 0.0f,
+		0.0f, 1.0f,
+		baselineOriginX, baselineOriginY);
+
+	ID2D1TransformedGeometry* pTransformedGeometry = NULL;
+	if (SUCCEEDED(hr))
+	{
+	    hr = pDWC_->mD2D1Factory->CreateTransformedGeometry(
+		    pRectangleGeometry,
+		    &matrix,
+		    &pTransformedGeometry);
+	}
+
+	ID2D1Brush *br = pDWC_->SolidBrush(context->color);
+
+	// Draw the outline of the rectangle
+	//pDWC_->mRT->DrawGeometry(pTransformedGeometry, br);
+
+	// Fill in the rectangle
+	pDWC_->mRT->FillGeometry(pTransformedGeometry, br);
+
+	SafeRelease(&pRectangleGeometry);
+	SafeRelease(&pTransformedGeometry);
+
+	return S_OK;
     }
 
     IFACEMETHOD(DrawInlineObject)(
@@ -873,6 +957,8 @@ DWriteContext::DrawText(const WCHAR* text, int len,
 	DWRITE_TEXT_RANGE textRange = { 0, UINT32(len) };
 	textLayout->SetFontWeight(mFontWeight, textRange);
 	textLayout->SetFontStyle(mFontStyle, textRange);
+	textLayout->SetUnderline(TRUE, textRange);
+	textLayout->SetStrikethrough(TRUE, textRange);
 
 	TextRenderer renderer(this);
 	TextRendererContext context = { color, FLOAT(cellWidth), 0.0f };