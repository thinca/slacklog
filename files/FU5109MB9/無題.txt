function! s:binary_search(list, value, ...) abort
  let Predicate = a:0 >= 1 ? a:1 : 's:_basic_comparator'
  let dic = a:0 >= 2 ? a:2 : {}
  let start = 0
  let end = len(a:list) - 1

  while 1
    if start > end
      return -1
    endif

    let middle = (start + end) / 2

    let compared = call(Predicate, [a:value, a:list[middle]], dic)

    if compared < 0
      let end = middle - 1
    elseif compared > 0
      let start = middle + 1
    else
      return middle
    endif
  endwhile
endfunction

def! s:bs9(list: list<any>, value: any, Cmp: any): number
  let start = 0
  let end = len(list) - 1

  while 1
    if start > end
      return -1
    endif

    let middle = (start + end) / 2

    let compared = Cmp(value, list[middle])

    if compared < 0
      end = middle - 1
    elseif compared > 0
      start = middle + 1
    else
      return middle
    endif
  endwhile
  return -1
enddef

function! s:linear_search(list, value, ...) abort
  let Predicate = a:0 >= 1 ? a:1 : 's:_basic_comparator'
  let start = 0
  let dic = a:0 >= 2 ? a:2 : {}
  let end = len(a:list) - 1
  while 1
    if start > end
      return -1
    endif
    let compared = call(Predicate, [a:value, a:list[start]], dic)
    if compared == 0
      return start
    else
      let start += 1
    endif
  endwhile
endfunction

def! s:ls9(list: list<any>, value: any, Cmp: any): number
  let start = 0
  let dic = {}
  let end = len(list) - 1
  while 1
    if start > end
      return -1
    endif
    let compared = Cmp(value, list[start])
    if compared == 0
      return start
    else
      start += 1
    endif
  endwhile
  return -1
enddef

let hoge = range(1000000)

function! s:compare(a, b)
  return a:a > a:b ? 1 : a:a == a:b ? 0 : -1
endfunction

def! s:compare9(a: number, b: number):number
  return a > b ? 1 : a == b ? 0 : -1
enddef

let t = reltime()
let a = s:binary_search(hoge, 100000, "s:compare9")
echo reltimestr(reltime(t))

let t = reltime()
let a = s:linear_search(hoge, 100000, "s:compare9")
echo reltimestr(reltime(t))

let t = reltime()
let a = s:ls9(hoge, 100000, funcref("s:compare9"))
echo reltimestr(reltime(t))

let t = reltime()
let a = s:bs9(hoge, 100000, funcref("s:compare9"))
echo reltimestr(reltime(t))