export type Process = (lines: Array<string>) => void | Promise<void>

export type Processor = {
  process: Process
}

export type Processors = {
  [key: string]: Processor
}

export type ConvertLine = (line: string) => string

export const processorCreator = (convertLine: ConvertLine) => (process: Process) => ({
  process: (lines: Array<string>) => process(lines.map((line) => convertLine(line)))
})

export type SingleLineExecutor = (line: string) => void
export type BulkLineExecutor = (lines: Array<string>) => void
type Executor = SingleLineExecutor | BulkLineExecutor

export type CreateProcess<E extends Executor> = (executor: E) => Process

export const createEachProcess: CreateProcess<SingleLineExecutor> = (executor) => async (lines: Array<string>) => {
  for await (const line of lines) {
    executor(line)
  }
}

export const createOnceProcess: CreateProcess<BulkLineExecutor> = (executor) => (lines: Array<string>) => executor(lines)
