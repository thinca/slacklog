type ConvertLine = (line: string) => string
type Process = (line: string) => void

const processorCreator = (convertLine: ConvertLine) => (process: Process) => (lines: Array<string>) =>
  lines.map((line) => convertLine(line)).forEach((line) => process(line))

type OpenCommand = "edit" | "split" | "vsplit" | "tabedit"

const createOpenFileProcess = (openCommand: OpenCommand) => (line: string) => {
  pluginCommand(`execute 'silent ${openCommand} ${line}'`)
}

const editProcess = createOpenFileProcess("edit")
const splitProcess = createOpenFileProcess("split")
const vsplitProcess = createOpenFileProcess("vsplit")
const tabeditProcess = createOpenFileProcess("tabedit")

const directlyConverter = (line: string) => line
const createDirectProcessor = processorCreator(directlyConverter)

export type Processors = {
  [key: string]: (lines: Array<string>) => void
}
const directOpenFileProcessors: Processors = {
  "": createDirectProcessor(editProcess),
  "ctrl-x": createDirectProcessor(splitProcess),
  "ctrl-v": createDirectProcessor(vsplitProcess),
  "ctrl-t": createDirectProcessor(tabeditProcess)
}