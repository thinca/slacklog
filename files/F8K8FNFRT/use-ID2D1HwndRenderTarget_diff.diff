--- a/src/gui_dwrite.cpp
+++ b/src/gui_dwrite.cpp
@@ -274,7 +274,7 @@ enum DrawingMode {
 };
 
 struct DWriteContext {
-    HDC mHDC;
+    HWND mHwnd;
     RECT mBindRect;
     DrawingMode mDMode;
     HDC mInteropHDC;
@@ -283,7 +283,7 @@ struct DWriteContext {
 
     ID2D1Factory *mD2D1Factory;
 
-    ID2D1DCRenderTarget *mRT;
+    ID2D1HwndRenderTarget *mRT;
     ID2D1GdiInteropRenderTarget *mGDIRT;
     ID2D1SolidColorBrush *mBrush;
     ID2D1Bitmap *mBitmap;
@@ -322,7 +322,7 @@ struct DWriteContext {
 
     void Rebind();
 
-    void BindDC(HDC hdc, const RECT *rect);
+    void BindHwnd(HWND hwnd, const RECT *rect);
 
     HRESULT SetDrawingMode(DrawingMode mode);
 
@@ -591,7 +591,7 @@ private:
 };
 
 DWriteContext::DWriteContext() :
-    mHDC(NULL),
+    mHwnd(NULL),
     mBindRect(),
     mDMode(DM_GDI),
     mInteropHDC(NULL),
@@ -687,8 +687,13 @@ DWriteContext::CreateDeviceResources()
 	D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE,
 	D2D1_FEATURE_LEVEL_DEFAULT
     };
-    hr = mD2D1Factory->CreateDCRenderTarget(&props, &mRT);
-    _RPT2(_CRT_WARN, "CreateDCRenderTarget: hr=%p p=%p\n", hr, mRT);
+    D2D1_SIZE_U size = D2D1::SizeU(
+	    mBindRect.right - mBindRect.left,
+	    mBindRect.bottom - mBindRect.top
+	    );
+    hr = mD2D1Factory->CreateHwndRenderTarget(&props,
+	    &D2D1::HwndRenderTargetProperties(mHwnd, size), &mRT);
+    _RPT2(_CRT_WARN, "CreateHwndRenderTarget: hr=%p p=%p\n", hr, mRT);
 
     if (SUCCEEDED(hr))
     {
@@ -902,23 +907,23 @@ DWriteContext::Rebind()
 {
     SafeRelease(&mBitmap);
 
-    mRT->BindDC(mHDC, &mBindRect);
     mRT->SetTransform(D2D1::IdentityMatrix());
 
+    D2D1_SIZE_U size = D2D1::SizeU(mBindRect.right - mBindRect.left,
+		mBindRect.bottom - mBindRect.top);
+    mRT->Resize(size);
+
     D2D1_BITMAP_PROPERTIES props = {
 	{DXGI_FORMAT_B8G8R8A8_UNORM, D2D1_ALPHA_MODE_IGNORE},
 	96.0f, 96.0f
     };
-    mRT->CreateBitmap(
-	    D2D1::SizeU(mBindRect.right - mBindRect.left,
-		mBindRect.bottom - mBindRect.top),
-	    props, &mBitmap);
+    mRT->CreateBitmap(size, props, &mBitmap);
 }
 
     void
-DWriteContext::BindDC(HDC hdc, const RECT *rect)
+DWriteContext::BindHwnd(HWND hwnd, const RECT *rect)
 {
-    mHDC = hdc;
+    mHwnd = hwnd;
     mBindRect = *rect;
 
     if (mRT == NULL)
@@ -1001,6 +1006,7 @@ DWriteContext::DrawText(const WCHAR *tex
 {
     if (mFallbackDC)
     {
+#if 0
 	// Fall back to GDI rendering.
 	HRESULT hr = SetDrawingMode(DM_INTEROP);
 	if (SUCCEEDED(hr))
@@ -1012,6 +1018,7 @@ DWriteContext::DrawText(const WCHAR *tex
 	    ::ExtTextOutW(mInteropHDC, x, y, fuOptions, lprc, text, len, lpDx);
 	    ::SelectObject(mInteropHDC, hOldFont);
 	}
+#endif
 	return;
     }
 
@@ -1249,10 +1256,10 @@ DWriteContext_Open(void)
 }
 
     void
-DWriteContext_BindDC(DWriteContext *ctx, HDC hdc, const RECT *rect)
+DWriteContext_BindHwnd(DWriteContext *ctx, HWND hwnd, const RECT *rect)
 {
     if (ctx != NULL)
-	ctx->BindDC(hdc, rect);
+	ctx->BindHwnd(hwnd, rect);
 }
 
     void
diff --git a/src/gui_dwrite.h b/src/gui_dwrite.h
--- a/src/gui_dwrite.h
+++ b/src/gui_dwrite.h
@@ -55,7 +55,7 @@ void DWrite_Init(void);
 void DWrite_Final(void);
 
 DWriteContext *DWriteContext_Open(void);
-void DWriteContext_BindDC(DWriteContext *ctx, HDC hdc, const RECT *rect);
+void DWriteContext_BindHwnd(DWriteContext *ctx, HWND hwnd, const RECT *rect);
 void DWriteContext_SetFont(DWriteContext *ctx, HFONT hFont);
 void DWriteContext_DrawText(
 	DWriteContext *ctx,
diff --git a/src/gui_w32.c b/src/gui_w32.c
--- a/src/gui_w32.c
+++ b/src/gui_w32.c
@@ -39,7 +39,7 @@ static int s_directx_load_attempted = 0;
 static int s_directx_scrlines = 0;
 # define IS_ENABLE_DIRECTX() (s_directx_enabled && s_dwc != NULL && enc_utf8)
 static int directx_enabled(void);
-static void directx_binddc(void);
+static void directx_bindhwnd(void);
 #endif
 
 #ifdef FEAT_MENU
@@ -381,18 +381,18 @@ directx_enabled(void)
     DWrite_Init();
     s_directx_load_attempted = 1;
     s_dwc = DWriteContext_Open();
-    directx_binddc();
+    directx_bindhwnd();
     return s_dwc != NULL ? 1 : 0;
 }
 
     static void
-directx_binddc(void)
+directx_bindhwnd(void)
 {
     if (s_textArea != NULL)
     {
 	RECT	rect;
 	GetClientRect(s_textArea, &rect);
-	DWriteContext_BindDC(s_dwc, s_hdc, &rect);
+	DWriteContext_BindHwnd(s_dwc, s_textArea, &rect);
     }
 }
 #endif
@@ -1044,7 +1044,7 @@ char_to_string(int ch, char_u *string, i
 {
 #if defined(FEAT_DIRECTX)
     if (IS_ENABLE_DIRECTX())
-	directx_binddc();
+	directx_bindhwnd();
 #endif
 }
 
