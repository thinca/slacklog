[{"type":"message","user":"U07V17N3C","text":"<@U07V17N3C> has joined the channel","ts":"1437494612.000002","subtype":"channel_join","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437494986.000003","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437495007.000004","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#fold>\n4. 折畳の振舞　　　　　　　　　　　　　　　　　　　　　　　　*fold-behavior*\n　\nカーソルを上下に移動させたりスクロールさせると、カーソルは一連の折畳行の先頭へ\n移動する。カーソルが既に折畳の行にあれば、カーソルは次の折畳ではない行か、閉じ\nられた折畳へ移動する。\n　\n折畳の行にカーソルがある時には、カーソルは常に先頭のカラムに表示される。ルー\nラーは実際のカーソルの位置を示すが、行が折畳の場合には、そこに実際に表示するこ\nとはできない。\n　\n移動コマンドは一連の折畳を空行として扱う。例えば、\"w\" コマンドは一旦先頭のカラ\nムで停止する。\n　\n挿入モードでは、カーソルのある行は決して折畳にならない。このため何を入力してい\nるかわからなくなることはない!\n　\nオペレータを使用したときには、閉じた折畳は全体が含まれる。だから \"dl\" はカーソ\nルの下の閉じた折畳の全体を削除してしまう。\n　\nExコマンドでは、開始位置と終了位置が折畳のそれに常に合わせられてしまう。\nだから次のコマンド: &gt;\n　　　　:s/foo/bar/g\nカーソルを閉じた折畳に置いて実行すると、折畳内の全ての行にある \"foo\" が \"bar\"\nへ置き換えられてしまう。\nこれは|:folddoopen|と|:folddoclosed|に対してはあてはまらない。\n　\n(同一セッション中で)以前に編集したバッファに対しては、最後の折畳設定が再び使用\nされる。手動折畳では以前に定義された折畳が復元される。全ての折畳方法で、手動で\n開閉した折畳は復元される。同じウィンドウで同じバッファが編集される時は、以前の\n編集時の値が使用される。そうでなければそのウィンドウで最後に編集されていたバッ\nファの値が使用される。","ts":"1437495010.000005","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h w18","ts":"1437496442.000006","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h w18","ts":"1437496472.000007","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437496487.000008","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#fold>\n4. 折畳の振舞　　　　　　　　　　　　　　　　　　　　　　　　*fold-behavior*\n　\nカーソルを上下に移動させたりスクロールさせると、カーソルは一連の折畳行の先頭へ\n移動する。カーソルが既に折畳の行にあれば、カーソルは次の折畳ではない行か、閉じ\nられた折畳へ移動する。\n　\n折畳の行にカーソルがある時には、カーソルは常に先頭のカラムに表示される。ルー\nラーは実際のカーソルの位置を示すが、行が折畳の場合には、そこに実際に表示するこ\nとはできない。\n　\n移動コマンドは一連の折畳を空行として扱う。例えば、\"w\" コマンドは一旦先頭のカラ\nムで停止する。\n　\n挿入モードでは、カーソルのある行は決して折畳にならない。このため何を入力してい\nるかわからなくなることはない!\n　\nオペレータを使用したときには、閉じた折畳は全体が含まれる。だから \"dl\" はカーソ\nルの下の閉じた折畳の全体を削除してしまう。\n　\nExコマンドでは、開始位置と終了位置が折畳のそれに常に合わせられてしまう。\nだから次のコマンド: &gt;\n　　　　:s/foo/bar/g\nカーソルを閉じた折畳に置いて実行すると、折畳内の全ての行にある \"foo\" が \"bar\"\nへ置き換えられてしまう。\nこれは|:folddoopen|と|:folddoclosed|に対してはあてはまらない。\n　\n(同一セッション中で)以前に編集したバッファに対しては、最後の折畳設定が再び使用\nされる。手動折畳では以前に定義された折畳が復元される。全ての折畳方法で、手動で\n開閉した折畳は復元される。同じウィンドウで同じバッファが編集される時は、以前の\n編集時の値が使用される。そうでなければそのウィンドウで最後に編集されていたバッ\nファの値が使用される。","ts":"1437496488.000009","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h w18","ts":"1437496503.000010","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437496614.000011","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#fold>\n4. 折畳の振舞　　　　　　　　　　　　　　　　　　　　　　　　*fold-behavior*\n　\nカーソルを上下に移動させたりスクロールさせると、カーソルは一連の折畳行の先頭へ\n移動する。カーソルが既に折畳の行にあれば、カーソルは次の折畳ではない行か、閉じ\nられた折畳へ移動する。\n　\n折畳の行にカーソルがある時には、カーソルは常に先頭のカラムに表示される。ルー\nラーは実際のカーソルの位置を示すが、行が折畳の場合には、そこに実際に表示するこ\nとはできない。\n　\n移動コマンドは一連の折畳を空行として扱う。例えば、\"w\" コマンドは一旦先頭のカラ\nムで停止する。\n　\n挿入モードでは、カーソルのある行は決して折畳にならない。このため何を入力してい\nるかわからなくなることはない!\n　\nオペレータを使用したときには、閉じた折畳は全体が含まれる。だから \"dl\" はカーソ\nルの下の閉じた折畳の全体を削除してしまう。\n　\nExコマンドでは、開始位置と終了位置が折畳のそれに常に合わせられてしまう。\nだから次のコマンド: &gt;\n　　　　:s/foo/bar/g\nカーソルを閉じた折畳に置いて実行すると、折畳内の全ての行にある \"foo\" が \"bar\"\nへ置き換えられてしまう。\nこれは|:folddoopen|と|:folddoclosed|に対してはあてはまらない。\n　\n(同一セッション中で)以前に編集したバッファに対しては、最後の折畳設定が再び使用\nされる。手動折畳では以前に定義された折畳が復元される。全ての折畳方法で、手動で\n開閉した折畳は復元される。同じウィンドウで同じバッファが編集される時は、以前の\n編集時の値が使用される。そうでなければそのウィンドウで最後に編集されていたバッ\nファの値が使用される。","ts":"1437496615.000012","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h w18","ts":"1437496619.000013","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h w18","ts":"1437496625.000014","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437496666.000015","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#fold>\n4. 折畳の振舞　　　　　　　　　　　　　　　　　　　　　　　　*fold-behavior*\n　\nカーソルを上下に移動させたりスクロールさせると、カーソルは一連の折畳行の先頭へ\n移動する。カーソルが既に折畳の行にあれば、カーソルは次の折畳ではない行か、閉じ\nられた折畳へ移動する。\n　\n折畳の行にカーソルがある時には、カーソルは常に先頭のカラムに表示される。ルー\nラーは実際のカーソルの位置を示すが、行が折畳の場合には、そこに実際に表示するこ\nとはできない。\n　\n移動コマンドは一連の折畳を空行として扱う。例えば、\"w\" コマンドは一旦先頭のカラ\nムで停止する。\n　\n挿入モードでは、カーソルのある行は決して折畳にならない。このため何を入力してい\nるかわからなくなることはない!\n　\nオペレータを使用したときには、閉じた折畳は全体が含まれる。だから \"dl\" はカーソ\nルの下の閉じた折畳の全体を削除してしまう。\n　\nExコマンドでは、開始位置と終了位置が折畳のそれに常に合わせられてしまう。\nだから次のコマンド: &gt;\n　　　　:s/foo/bar/g\nカーソルを閉じた折畳に置いて実行すると、折畳内の全ての行にある \"foo\" が \"bar\"\nへ置き換えられてしまう。\nこれは|:folddoopen|と|:folddoclosed|に対してはあてはまらない。\n　\n(同一セッション中で)以前に編集したバッファに対しては、最後の折畳設定が再び使用\nされる。手動折畳では以前に定義された折畳が復元される。全ての折畳方法で、手動で\n開閉した折畳は復元される。同じウィンドウで同じバッファが編集される時は、以前の\n編集時の値が使用される。そうでなければそのウィンドウで最後に編集されていたバッ\nファの値が使用される。","ts":"1437496667.000016","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h w18","ts":"1437496670.000017","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437496715.000018","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#fold>\n4. 折畳の振舞　　　　　　　　　　　　　　　　　　　　　　　　*fold-behavior*\n　\nカーソルを上下に移動させたりスクロールさせると、カーソルは一連の折畳行の先頭へ\n移動する。カーソルが既に折畳の行にあれば、カーソルは次の折畳ではない行か、閉じ\nられた折畳へ移動する。\n　\n折畳の行にカーソルがある時には、カーソルは常に先頭のカラムに表示される。ルー\nラーは実際のカーソルの位置を示すが、行が折畳の場合には、そこに実際に表示するこ\nとはできない。\n　\n移動コマンドは一連の折畳を空行として扱う。例えば、\"w\" コマンドは一旦先頭のカラ\nムで停止する。\n　\n挿入モードでは、カーソルのある行は決して折畳にならない。このため何を入力してい\nるかわからなくなることはない!\n　\nオペレータを使用したときには、閉じた折畳は全体が含まれる。だから \"dl\" はカーソ\nルの下の閉じた折畳の全体を削除してしまう。\n　\nExコマンドでは、開始位置と終了位置が折畳のそれに常に合わせられてしまう。\nだから次のコマンド: &gt;\n　　　　:s/foo/bar/g\nカーソルを閉じた折畳に置いて実行すると、折畳内の全ての行にある \"foo\" が \"bar\"\nへ置き換えられてしまう。\nこれは|:folddoopen|と|:folddoclosed|に対してはあてはまらない。\n　\n(同一セッション中で)以前に編集したバッファに対しては、最後の折畳設定が再び使用\nされる。手動折畳では以前に定義された折畳が復元される。全ての折畳方法で、手動で\n開閉した折畳は復元される。同じウィンドウで同じバッファが編集される時は、以前の\n編集時の値が使用される。そうでなければそのウィンドウで最後に編集されていたバッ\nファの値が使用される。","ts":"1437496716.000019","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h w18","ts":"1437496718.000020","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#w18>\n名前付けの慣習　　　　　　　　　　　　*group-name* *{group-name}* *E669* *W18*\n　\n構文グループとは、同じ種類の構文アイテムをグループ化したものである。構文グルー\nプから強調グループにリンクされ、強調グループに対して色が設定される。構文グルー\nプそれ自体は、色や属性を指定するものではない。\n　\nハイライトや構文グループの名前はASCII文字、数字、アンダースコアだけでつけなけ\nればならない。正規表現では: \"[a-zA-Z0-9_]*\"\n　\n各ユーザーが好みの色セットを使用できるように、多くの言語に共通するハイライトグ\nループには優先名が与えられている。推奨されているグループ名は以下のとおり(構文\nハイライトがちゃんと機能していれば、\"Ignore\" 以外はそのグループに設定された色\nで表示されるだろう):\n　\n　　　　*Comment　　　　o コメント\n　\n　　　　*Constant　　　　o 定数\n　　　　 String　　　　　　　　o 文字列定数: \"これは文字列です\"\n　　　　 Character　　　　o 文字定数: 'c', '\\n'\n　　　　 Number　　　　　　　　o 数値定数: 234, 0xff\n　　　　 Boolean　　　　o ブール値の定数: TRUE, false\n　　　　 Float　　　　　　　　o 不動小数点数の定数: 2.3e10\n　\n　　　　*Identifier　　　　o 変数名\n　　　　 Function　　　　o 関数名(クラスメソッドを含む)\n　\n　　　　*Statement　　　　o 命令文\n　　　　 Conditional　　　　o if, then, else, endif, switch, その他\n　　　　 Repeat　　　　　　　　o for, do, while, その他\n　　　　 Label　　　　　　　　o case, default, その他\n　　　　 Operator　　　　o \"sizeof\", \"+\", \"*\", その他\n　　　　 Keyword　　　　o その他のキーワード\n　　　　 Exception　　　　o try, catch, throw\n　\n　　　　*PreProc　　　　o 一般的なプリプロセッサ命令\n　　　　 Include　　　　o #include プリプロセッサ\n　　　　 Define　　　　　　　　o #define プリプロセッサ\n　　　　 Macro　　　　　　　　o Defineと同値\n　　　　 PreCondit　　　　o プリプロセッサの #if, #else, #endif, その他\n　\n　　　　*Type　　　　　　　　o int, long, char, その他\n　　　　 StorageClass　　　　o static, register, volatile, その他\n　　　　 Structure　　　　o struct, union, enum, その他\n　　　　 Typedef　　　　o typedef宣言\n　\n　　　　*Special　　　　o 特殊なシンボル\n　　　　 SpecialChar　　　　o 特殊な文字定数\n","ts":"1437496719.000021","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":"API制限1400文字らしい","ts":"1437496740.000022","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437497462.000023","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h w18","ts":"1437497484.000024","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437497521.000025","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437497613.000026","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437498013.000027","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437498233.000028","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#fold>\n4. 折畳の振舞　　　　　　　　　　　　　　　　　　　　　　　　*fold-behavior*\n　\nカーソルを上下に移動させたりスクロールさせると、カーソルは一連の折畳行の先頭へ\n移動する。カーソルが既に折畳の行にあれば、カーソルは次の折畳ではない行か、閉じ\nられた折畳へ移動する。\n　\n折畳の行にカーソルがある時には、カーソルは常に先頭のカラムに表示される。ルー\nラーは実際のカーソルの位置を示すが、行が折畳の場合には、そこに実際に表示するこ\nとはできない。\n　\n移動コマンドは一連の折畳を空行として扱う。例えば、\"w\" コマンドは一旦先頭のカラ\nムで停止する。\n　\n挿入モードでは、カーソルのある行は決して折畳にならない。このため何を入力してい\nるかわからなくなることはない!\n　\nオペレータを使用したときには、閉じた折畳は全体が含まれる。だから \"dl\" はカーソ\nルの下の閉じた折畳の全体を削除してしまう。\n　\nExコマンドでは、開始位置と終了位置が折畳のそれに常に合わせられてしまう。\nだから次のコマンド: &gt;\n　　　　:s/foo/bar/g\nカーソルを閉じた折畳に置いて実行すると、折畳内の全ての行にある \"foo\" が \"bar\"\nへ置き換えられてしまう。\nこれは|:folddoopen|と|:folddoclosed|に対してはあてはまらない。\n　\n(同一セッション中で)以前に編集したバッファに対しては、最後の折畳設定が再び使用\nされる。手動折畳では以前に定義された折畳が復元される。全ての折畳方法で、手動で\n開閉した折畳は復元される。同じウィンドウで同じバッファが編集される時は、以前の\n編集時の値が使用される。そうでなければそのウィンドウで最後に編集されていたバッ\nファの値が使用される。","ts":"1437498235.000029","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437505879.000030","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#fold>\n4. 折畳の振舞　　　　　　　　　　　　　　　　　　　　　　　　*fold-behavior*\n　\nカーソルを上下に移動させたりスクロールさせると、カーソルは一連の折畳行の先頭へ\n移動する。カーソルが既に折畳の行にあれば、カーソルは次の折畳ではない行か、閉じ\nられた折畳へ移動する。\n　\n折畳の行にカーソルがある時には、カーソルは常に先頭のカラムに表示される。ルー\nラーは実際のカーソルの位置を示すが、行が折畳の場合には、そこに実際に表示するこ\nとはできない。\n　\n移動コマンドは一連の折畳を空行として扱う。例えば、\"w\" コマンドは一旦先頭のカラ\nムで停止する。\n　\n挿入モードでは、カーソルのある行は決して折畳にならない。このため何を入力してい\nるかわからなくなることはない!\n　\nオペレータを使用したときには、閉じた折畳は全体が含まれる。だから \"dl\" はカーソ\nルの下の閉じた折畳の全体を削除してしまう。\n　\nExコマンドでは、開始位置と終了位置が折畳のそれに常に合わせられてしまう。\nだから次のコマンド: &gt;\n　　　　:s/foo/bar/g\nカーソルを閉じた折畳に置いて実行すると、折畳内の全ての行にある \"foo\" が \"bar\"\nへ置き換えられてしまう。\nこれは|:folddoopen|と|:folddoclosed|に対してはあてはまらない。\n　\n(同一セッション中で)以前に編集したバッファに対しては、最後の折畳設定が再び使用\nされる。手動折畳では以前に定義された折畳が復元される。全ての折畳方法で、手動で\n開閉した折畳は復元される。同じウィンドウで同じバッファが編集される時は、以前の\n編集時の値が使用される。そうでなければそのウィンドウで最後に編集されていたバッ\nファの値が使用される。","ts":"1437505880.000031","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437509383.000032","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://ec2-52-69-148-99.ap-northeast-1.compute.amazonaws.com/#fold>\n4. 折畳の振舞　　　　　　　　　　　　　　　　　　　　　　　　*fold-behavior*\n　\nカーソルを上下に移動させたりスクロールさせると、カーソルは一連の折畳行の先頭へ\n移動する。カーソルが既に折畳の行にあれば、カーソルは次の折畳ではない行か、閉じ\nられた折畳へ移動する。\n　\n折畳の行にカーソルがある時には、カーソルは常に先頭のカラムに表示される。ルー\nラーは実際のカーソルの位置を示すが、行が折畳の場合には、そこに実際に表示するこ\nとはできない。\n　\n移動コマンドは一連の折畳を空行として扱う。例えば、\"w\" コマンドは一旦先頭のカラ\nムで停止する。\n　\n挿入モードでは、カーソルのある行は決して折畳にならない。このため何を入力してい\nるかわからなくなることはない!\n　\nオペレータを使用したときには、閉じた折畳は全体が含まれる。だから \"dl\" はカーソ\nルの下の閉じた折畳の全体を削除してしまう。\n　\nExコマンドでは、開始位置と終了位置が折畳のそれに常に合わせられてしまう。\nだから次のコマンド: &gt;\n　　　　:s/foo/bar/g\nカーソルを閉じた折畳に置いて実行すると、折畳内の全ての行にある \"foo\" が \"bar\"\nへ置き換えられてしまう。\nこれは|:folddoopen|と|:folddoclosed|に対してはあてはまらない。\n　\n(同一セッション中で)以前に編集したバッファに対しては、最後の折畳設定が再び使用\nされる。手動折畳では以前に定義された折畳が復元される。全ての折畳方法で、手動で\n開閉した折畳は復元される。同じウィンドウで同じバッファが編集される時は、以前の\n編集時の値が使用される。そうでなければそのウィンドウで最後に編集されていたバッ\nファの値が使用される。","ts":"1437509385.000033","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h w18","ts":"1437509391.000034","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://ec2-52-69-148-99.ap-northeast-1.compute.amazonaws.com/#w18>\n名前付けの慣習　　　　　　　　　　　　*group-name* *{group-name}* *E669* *W18*\n　\n構文グループとは、同じ種類の構文アイテムをグループ化したものである。構文グルー\nプから強調グループにリンクされ、強調グループに対して色が設定される。構文グルー\nプそれ自体は、色や属性を指定するものではない。\n　\nハイライトや構文グループの名前はASCII文字、数字、アンダースコアだけでつけなけ\nればならない。正規表現では: \"[a-zA-Z0-9_]*\"\n　\n各ユーザーが好みの色セットを使用できるように、多くの言語に共通するハイライトグ\nループには優先名が与えられている。推奨されているグループ名は以下のとおり(構文\nハイライトがちゃんと機能していれば、\"Ignore\" 以外はそのグループに設定された色\nで表示されるだろう):\n　\n　　　　*Comment　　　　o コメント\n　\n　　　　*Constant　　　　o 定数\n　　　　 String　　　　　　　　o 文字列定数: \"これは文字列です\"\n　　　　 Character　　　　o 文字定数: 'c', '\\n'\n　　　　 Number　　　　　　　　o 数値定数: 234, 0xff\n　　　　 Boolean　　　　o ブール値の定数: TRUE, false\n　　　　 Float　　　　　　　　o 不動小数点数の定数: 2.3e10\n　\n　　　　*Identifier　　　　o 変数名\n　　　　 Function　　　　o 関数名(クラスメソッドを含む)\n　\n　　　　*Statement　　　　o 命令文\n　　　　 Conditional　　　　o if, then, else, endif, switch, その他\n　　　　 Repeat　　　　　　　　o for, do, while, その他\n　　　　 Label　　　　　　　　o case, default, その他\n　　　　 Operator　　　　o \"sizeof\", \"+\", \"*\", その他\n　　　　 Keyword　　　　o その他のキーワード\n　　　　 Exception　　　　o try, catch, throw\n　\n　　　　*PreProc　　　　o 一般的なプリプロセッサ命令\n　　　　 Include　　　　o #include プリプロセッサ\n　　　　 Define　　　　　　　　o #define プリプロセッサ\n　　　　 Macro　　　　　　　　o Defineと同値\n　　　　 PreCondit　　　　o プリプロセッサの #if, #else, #endif, その他\n　\n　　　　*Type　　　　　　　　o int, long, char, その他\n　　　　 StorageClass　　　　o static, register, volatile, その他\n　　　　 Structure　　　　o struct, union, enum, その他\n　　　　 Typedef　　　　o typedef宣言\n　\n　　　　*Special　　　　o 特殊なシ","ts":"1437509392.000035","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","text":"ンボル\n　　　　 SpecialChar　　　　o 特殊な文字定数\n　　　　 Tag　　　　　　　　o この上で CTRL-] を使うことができる\n　　　　 Delimiter　　　　o 注意が必要な文字\n　　　　 SpecialComment　　　　o コメント内の特記事項\n　　　　 Debug　　　　　　　　o デバッグ命令\n　\n　　　　*Underlined　　　　o 目立つ文章, HTMLリンク\n　\n　　　　*Ignore　　　　　　　　o (見た目上)空白, 不可視  |hl-Ignore|\n　\n　　　　*Error　　　　　　　　o エラーなど、なんらかの誤った構造\n　\n　　　　*Todo　　　　　　　　o 特別な注意が必要なもの; 大抵はTODO FIXME XXXなど\n　　　　　　　　　　　　  のキーワード\n　\nマーク(*)されている名前が優先グループ、その他はマイナーグループである。優先グ\nループには、\"syntax.vim\" によりデフォルトのハイライト手法が定義されている。マ\nイナーグループは優先グループにリンクされ、リンクした先と同じハイライト手法にな\nる。ファイル \"syntax.vim\" が読込まれた後でコマンド \":highlight\" を使えば、その\nデフォルトを上書することができる。\n　\nハイライトグループ名には大文字小文字の区別がないことに注意。\"String\" と\n\"string\" はどちらも同じグループを意味する。\n　\n以下の名前は予約されているのでグループ名として使用することはできない:\n　　　　NONE   ALL   ALLBUT   contains   contained","ts":"1437509393.000036","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437511524.000037","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#fold>\n4. 折畳の振舞　　　　　　　　　　　　　　　　　　　　　　　　*fold-behavior*\n　\nカーソルを上下に移動させたりスクロールさせると、カーソルは一連の折畳行の先頭へ\n移動する。カーソルが既に折畳の行にあれば、カーソルは次の折畳ではない行か、閉じ\nられた折畳へ移動する。\n　\n折畳の行にカーソルがある時には、カーソルは常に先頭のカラムに表示される。ルー\nラーは実際のカーソルの位置を示すが、行が折畳の場合には、そこに実際に表示するこ\nとはできない。\n　\n移動コマンドは一連の折畳を空行として扱う。例えば、\"w\" コマンドは一旦先頭のカラ\nムで停止する。\n　\n挿入モードでは、カーソルのある行は決して折畳にならない。このため何を入力してい\nるかわからなくなることはない!\n　\nオペレータを使用したときには、閉じた折畳は全体が含まれる。だから \"dl\" はカーソ\nルの下の閉じた折畳の全体を削除してしまう。\n　\nExコマンドでは、開始位置と終了位置が折畳のそれに常に合わせられてしまう。\nだから次のコマンド: &gt;\n　　　　:s/foo/bar/g\nカーソルを閉じた折畳に置いて実行すると、折畳内の全ての行にある \"foo\" が \"bar\"\nへ置き換えられてしまう。\nこれは|:folddoopen|と|:folddoclosed|に対してはあてはまらない。\n　\n(同一セッション中で)以前に編集したバッファに対しては、最後の折畳設定が再び使用\nされる。手動折畳では以前に定義された折畳が復元される。全ての折畳方法で、手動で\n開閉した折畳は復元される。同じウィンドウで同じバッファが編集される時は、以前の\n編集時の値が使用される。そうでなければそのウィンドウで最後に編集されていたバッ\nファの値が使用される。","ts":"1437511526.000038","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h vim","ts":"1437525829.000039","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h fold","ts":"1437525834.000040","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#fold>\n4. 折畳の振舞　　　　　　　　　　　　　　　　　　　　　　　　*fold-behavior*\n　\nカーソルを上下に移動させたりスクロールさせると、カーソルは一連の折畳行の先頭へ\n移動する。カーソルが既に折畳の行にあれば、カーソルは次の折畳ではない行か、閉じ\nられた折畳へ移動する。\n　\n折畳の行にカーソルがある時には、カーソルは常に先頭のカラムに表示される。ルー\nラーは実際のカーソルの位置を示すが、行が折畳の場合には、そこに実際に表示するこ\nとはできない。\n　\n移動コマンドは一連の折畳を空行として扱う。例えば、\"w\" コマンドは一旦先頭のカラ\nムで停止する。\n　\n挿入モードでは、カーソルのある行は決して折畳にならない。このため何を入力してい\nるかわからなくなることはない!\n　\nオペレータを使用したときには、閉じた折畳は全体が含まれる。だから \"dl\" はカーソ\nルの下の閉じた折畳の全体を削除してしまう。\n　\nExコマンドでは、開始位置と終了位置が折畳のそれに常に合わせられてしまう。\nだから次のコマンド: &gt;\n　　　　:s/foo/bar/g\nカーソルを閉じた折畳に置いて実行すると、折畳内の全ての行にある \"foo\" が \"bar\"\nへ置き換えられてしまう。\nこれは|:folddoopen|と|:folddoclosed|に対してはあてはまらない。\n　\n(同一セッション中で)以前に編集したバッファに対しては、最後の折畳設定が再び使用\nされる。手動折畳では以前に定義された折畳が復元される。全ての折畳方法で、手動で\n開閉した折畳は復元される。同じウィンドウで同じバッファが編集される時は、以前の\n編集時の値が使用される。そうでなければそのウィンドウで最後に編集されていたバッ\nファの値が使用される。","ts":"1437525835.000041","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h w18","ts":"1437525840.000042","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#w18>\n名前付けの慣習　　　　　　　　　　　　*group-name* *{group-name}* *E669* *W18*\n　\n構文グループとは、同じ種類の構文アイテムをグループ化したものである。構文グルー\nプから強調グループにリンクされ、強調グループに対して色が設定される。構文グルー\nプそれ自体は、色や属性を指定するものではない。\n　\nハイライトや構文グループの名前はASCII文字、数字、アンダースコアだけでつけなけ\nればならない。正規表現では: \"[a-zA-Z0-9_]*\"\n　\n各ユーザーが好みの色セットを使用できるように、多くの言語に共通するハイライトグ\nループには優先名が与えられている。推奨されているグループ名は以下のとおり(構文\nハイライトがちゃんと機能していれば、\"Ignore\" 以外はそのグループに設定された色\nで表示されるだろう):\n　\n　　　　*Comment　　　　o コメント\n　\n　　　　*Constant　　　　o 定数\n　　　　 String　　　　　　　　o 文字列定数: \"これは文字列です\"\n　　　　 Character　　　　o 文字定数: 'c', '\\n'\n　　　　 Number　　　　　　　　o 数値定数: 234, 0xff\n　　　　 Boolean　　　　o ブール値の定数: TRUE, false\n　　　　 Float　　　　　　　　o 不動小数点数の定数: 2.3e10\n　\n　　　　*Identifier　　　　o 変数名\n　　　　 Function　　　　o 関数名(クラスメソッドを含む)\n　\n　　　　*Statement　　　　o 命令文\n　　　　 Conditional　　　　o if, then, else, endif, switch, その他\n　　　　 Repeat　　　　　　　　o for, do, while, その他\n　　　　 Label　　　　　　　　o case, default, その他\n　　　　 Operator　　　　o \"sizeof\", \"+\", \"*\", その他\n　　　　 Keyword　　　　o その他のキーワード\n　　　　 Exception　　　　o try, catch, throw\n　\n　　　　*PreProc　　　　o 一般的なプリプロセッサ命令\n　　　　 Include　　　　o #include プリプロセッサ\n　　　　 Define　　　　　　　　o #define プリプロセッサ\n　　　　 Macro　　　　　　　　o Defineと同値\n　　　　 PreCondit　　　　o プリプロセッサの #if, #else, #endif, その他\n　\n　　　　*Type　　　　　　　　o int, long, char, その他\n　　　　 StorageClass　　　　o static, register, volatile, その他\n　　　　 Structure　　　　o struct, union, enum, その他\n　　　　 Typedef　　　　o typedef宣言\n　\n　　　　*Special　　　　o 特殊なシンボル\n　　　　 SpecialChar　　　　o 特殊な文字定数\n","ts":"1437525841.000043","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","text":"　　　　 Tag　　　　　　　　o この上で CTRL-] を使うことができる\n　　　　 Delimiter　　　　o 注意が必要な文字\n　　　　 SpecialComment　　　　o コメント内の特記事項\n　　　　 Debug　　　　　　　　o デバッグ命令\n　\n　　　　*Underlined　　　　o 目立つ文章, HTMLリンク\n　\n　　　　*Ignore　　　　　　　　o (見た目上)空白, 不可視  |hl-Ignore|\n　\n　　　　*Error　　　　　　　　o エラーなど、なんらかの誤った構造\n　\n　　　　*Todo　　　　　　　　o 特別な注意が必要なもの; 大抵はTODO FIXME XXXなど\n　　　　　　　　　　　　  のキーワード\n　\nマーク(*)されている名前が優先グループ、その他はマイナーグループである。優先グ\nループには、\"syntax.vim\" によりデフォルトのハイライト手法が定義されている。マ\nイナーグループは優先グループにリンクされ、リンクした先と同じハイライト手法にな\nる。ファイル \"syntax.vim\" が読込まれた後でコマンド \":highlight\" を使えば、その\nデフォルトを上書することができる。\n　\nハイライトグループ名には大文字小文字の区別がないことに注意。\"String\" と\n\"string\" はどちらも同じグループを意味する。\n　\n以下の名前は予約されているのでグループ名として使用することはできない:\n　　　　NONE   ALL   ALLBUT   contains   contained","ts":"1437525842.000044","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h deoplete","ts":"1437530620.000045","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#deoplete>\n*deoplete* is the abbreviation of \"dark powered neo-completion\".  It\nprovides asynchronous keyword completion system in the\ncurrent buffer.  Deoplete cannot be customized and has not many\nfeatures currently.  It is provided for testing purpose.\n　\nNote: deoplete may consume more memory than other plugins do.\n　\nImprovements in deoplete in comparison to |neocomplete|:\n　\n1. Real asynchronous completion behavior like |YouCompleteMe| by default.\n2. Uses Python3 to implement sources.\n3. Removes legacy interface.\n4. Requires |if_python3|.","ts":"1437530621.000046","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06D4EBNZ","text":":h vim-gista","ts":"1437530629.000047","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#vim-gista>\n*vim-gista* is a plugin for manipulating Gists.\nIt provide the following features:\n　\n1.　　　　Listing gists\n　　　　-　　　　Authenticated user's gist entries\n　　　　-　　　　Authenticated user's starred gist entries\n　　　　-　　　　Gist entries of a particular user\n　　　　-　　　　Gist entries in Gist web\n　　　　-　　　　Listing gist entries in Unite (require 'Shougo/unite.vim')\n2.　　　　Opening gists\n　　　　-　　　　Open files of an authenticated user\n　　　　-　　　　Open files of a particular user\n　　　　-　　　　Open files of a gist with a browser (require\n　　　　　　　　'tyru/open-browser.vim')\n3.　　　　Posting gists\n　　　　-　　　　Create a new gist from a current buffer\n　　　　-　　　　Create a new gist from all opened+listed+visible buffers\n4.　　　　Editing gists\n　　　　-　　　　A file content of a gist\n　　　　-　　　　A description of a gist\n　　　　-　　　　Rename a file of a gist\n　　　　-　　　　Remove a file of a gist\n5.　　　　Deleting gists\n6.　　　　Giving/taking a star to a gist\n7.　　　　Forking a gist\n　\nThe original concepts and strategies are taken from 'mat","ts":"1437530630.000048","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06ECBRTJ","text":"<@U06ECBRTJ> has joined the channel","ts":"1437550371.000049","subtype":"channel_join","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06ECBRTJ","text":"!osusume-help","ts":"1437550423.000050","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"作成:\n　!osusume 名前 パターン レスポンス\n更新:\n　!osusume 名前 パターン [レスポンス]\n削除:\n　!osusume! 名前\nテキストにマッチする名前を検索:\n　!osusume? テキスト\n詳細を表示:\n　!osusume 名前\n最後にマッチした名前を表示:\n　!osusume!?\n最後にマッチしたものを無効化:\n　!osusume!!\n名前を有効:\n　!osusume!!! 名前\n一覧が載っているサイトの URL\n　!osusume-list\n","ts":"1437550423.000051","subtype":"bot_message","bot_id":"B06TAC3SP","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06U6U8JY","text":"!osusume-list","ts":"1437550638.000052","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://osusume.herokuapp.com/>","ts":"1437550639.000053","subtype":"bot_message","bot_id":"B06TAC3SP","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06ECBRTJ","text":"おなすい","ts":"1437550686.000054","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<https://31.media.tumblr.com/17f677bb8c9bf915d2ac4d2ebeac229f/tumblr_mxfss60il31qzj7lyo1_500.jpg> NHKの「妄想二ホン料理」で、メロンパンを知らないフランスの人間国宝のパン職人が「メロンは使わない」「上からと下からで触った時の感触が違う」「食べた時口の中でくっつく事がある」という３つのヒントだけで作ったメロンパンがこれ。メロン感相当ある。 ","ts":"1437550687.000055","subtype":"bot_message","bot_id":"B06TAC3SP","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06ECBRTJ","text":"あー","ts":"1437550696.000056","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06ECBRTJ","text":"改行なぁ","ts":"1437550706.000057","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06ECBRTJ","text":"おなすい","ts":"1437550709.000058","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<https://24.media.tumblr.com/b1f3129dec005dd6aa763fcc4a9bf814/tumblr_mx8cjfKmO81qft78no1_500.jpg>","ts":"1437550710.000059","subtype":"bot_message","bot_id":"B06TAC3SP","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"U06U6U8JY","text":"^!osusume!","ts":"1437550762.000060","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06U6U8JY","text":"!osusume!","ts":"1437550789.000061","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U06D4EBNZ","text":":h term","ts":"1437563434.000062","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","text":"<http://vimhelp-jp.zchee.io/#term>\n端末によって設定を切り替える　　　　　　　　　　　　*term-dependent-settings*\n　\n端末名によってオプションやマッピングを切り替えるには .vimrc で行うのがベスト\nです。例: &gt;\n　\n   if &amp;term == \"xterm\"\n     ... xterm 用のマッピングと設定 ...\n   elseif &amp;term =~ \"vt10.\"\n     ... vt100, vt102 用のマッピングと設定 ...\n   endif\n&lt;","ts":"1437563435.000063","subtype":"bot_message","username":"vimhelp-jp","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2015-07-22/7987901250_48.png"},"replace_original":false,"delete_original":false,"blocks":null}]
