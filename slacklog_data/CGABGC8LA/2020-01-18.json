[{"client_msg_id":"a0f72f8c-2834-4026-9a1e-b1c620b275b0","type":"message","user":"U06BRP8VD","text":"昨日の夜中から今日午前の調査結果です。\n<https://twitter.com/kaoriya/status/1218389439589711873>","ts":"1579321870.037000","attachments":[{"fallback":"<https://twitter.com/kaoriya|@kaoriya>: golangで作ったプログラムの64bit-Linuxでの最小仮想メモリサイズはざっくり101MBでファイナルアンサーっぽい。その内訳はヒープに最小で64MB、その管理領域で35MB、GCなどのシステム領域分で2MB(ただこの中身はまだちょっと怪しい)ってところ。\n\nなお最小ヒープサイズはターゲット環境で異なる。","id":1,"author_name":"MURAOKA Taro","author_subname":"@kaoriya","author_link":"https://twitter.com/kaoriya/status/1218389439589711873","author_icon":"https://pbs.twimg.com/profile_images/1196794099/avatar_normal.JPEG","text":"golangで作ったプログラムの64bit-Linuxでの最小仮想メモリサイズはざっくり101MBでファイナルアンサーっぽい。その内訳はヒープに最小で64MB、その管理領域で35MB、GCなどのシステム領域分で2MB(ただこの中身はまだちょっと怪しい)ってところ。\n\nなお最小ヒープサイズはターゲット環境で異なる。","blocks":null,"footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png","ts":1579321653,"service_name":"twitter","from_url":"https://twitter.com/kaoriya/status/1218389439589711873","original_url":"https://twitter.com/kaoriya/status/1218389439589711873"}],"team":"T03C4RC8V","reactions":[{"name":"gorilla","count":1,"users":["UDDCM376D"]},{"name":"tiken","count":1,"users":["UG6DF6W87"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"9L4"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"cd827a88-ebd2-4896-b538-8d157dbc9cb5","type":"message","user":"U06BRP8VD","text":"続きにある通りあくまでもVSZの最小サイズであってRSSではないので注意が必要です。つまりRSSで制限するdocker run --memory で制限するときはもっと小さくても動く。逆にVSZ (ulimit -v)で制限するときは101MB(unlimit -v に渡す値としては103424)以上にしないと起動できない。","ts":"1579322108.039200","thread_ts":"1579322108.039200","reply_count":1,"replies":[{"user":"U06BRP8VD","ts":"1579322204.039300"}],"team":"T03C4RC8V","reactions":[{"name":"subara","count":2,"users":["UAZ33BKV2","UEACRCY0Z"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"TEo"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"645af5da-603f-4686-a5ee-2c7ed319d80b","type":"message","user":"U06BRP8VD","text":"RSSで制限するとOOMでgoroutine dumpは出ないけど、VSZで制限すると出るという違いにも要注意。","ts":"1579322204.039300","thread_ts":"1579322108.039200","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Nwfk6"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"2542abe0-a661-4361-8feb-af1039634987","type":"message","user":"U06BRP8VD","text":"先週末からの成果です…\n<https://www.kaoriya.net/blog/2020/01/18/golang-on-docker-oom/>","ts":"1579357267.040100","attachments":[{"fallback":"golangとDockerとOOM — KaoriYa","id":1,"title":"golangとDockerとOOM — KaoriYa","title_link":"https://www.kaoriya.net/blog/2020/01/18/golang-on-docker-oom/","text":"golangで書いたプログラムをDockerで動かしOOMが発生した際になるべく情報を残して殺される方法を紹介します。","blocks":null,"service_name":"kaoriya.net","service_icon":"https://www.kaoriya.net/favicon.ico","from_url":"https://www.kaoriya.net/blog/2020/01/18/golang-on-docker-oom/","original_url":"https://www.kaoriya.net/blog/2020/01/18/golang-on-docker-oom/"}],"team":"T03C4RC8V","reactions":[{"name":"tada","count":6,"users":["UAZ33BKV2","UDDCM376D","UBDMG6N2J","UK37RG2VC","UG6DF6W87","UEACRCY0Z"]},{"name":"gorilla","count":1,"users":["UDDCM376D"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"wqI"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"}]
