[{"type":"message","user":"UR6TTSGK1","text":"<@UR6TTSGK1> has joined the channel","ts":"1575198843.311800","subtype":"channel_join","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"5c93a90f-052d-41dc-9c26-fb2cc6fcc13b","type":"message","user":"UKHUVMBJR","text":"（Seek(0, 0)ってやってたから今度から定数使おう…）","ts":"1575155634.293900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Lf2"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"bda1bdd4-9b67-4a5a-bda9-f3f430187cbf","type":"message","user":"UDDCM376D","text":"<https://qiita.com/imoty/items/a45dfa8b4963f3f86df8>\nこの記事を読んで疑問に思ったんですが、\n`m := map[int64]struct{}{}` はなぜ空の構造体を使うのでしょうか？\n`m := map[inte64]nil`で `if _, ok := m[1]`  でも良いと思うのですが、どういった違いがあるんでしょうか？","ts":"1575168651.295400","attachments":[{"fallback":"Qiita: とにかく要素一覧の取得が高速な、要素が削除可能であるリストを実装する - Qiita","id":1,"title":"とにかく要素一覧の取得が高速な、要素が削除可能であるリストを実装する - Qiita","title_link":"https://qiita.com/imoty/items/a45dfa8b4963f3f86df8","text":"# お題 要素をリストに、追加したり、特定の要素を削除したり、要素一覧を取得することを考えましょう。なお順番は不問とします。 もし例えばリストとして slice を用いると、追加や要素一覧を取得することは O(1) できますが、s...","thumb_url":"https://cdn.qiita.com/assets/qiita-fb-2887e7b4aad86fd8c25cea84846f2236.png","blocks":null,"service_name":"Qiita","service_icon":"https://cdn.qiita.com/assets/favicons/public/apple-touch-icon-f9a6afad761ec2306e10db2736187c8b.png","thumb_width":200,"thumb_height":200,"from_url":"https://qiita.com/imoty/items/a45dfa8b4963f3f86df8","original_url":"https://qiita.com/imoty/items/a45dfa8b4963f3f86df8"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"9mKS3"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"72f26984-167e-4492-8dd0-e34cc9cedd16","type":"message","user":"UKHUVMBJR","text":"nilは型ではないので使えないかと（合ってるはず）\nなので、サイズ0のstruct{}型を使うのがベストという","ts":"1575169075.296900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"oXQ"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"d0d39405-62e8-476f-9db8-3078449da365","type":"message","user":"UDDCM376D","text":"あ","ts":"1575169395.297200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"sr0V"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"bf67a165-810f-43c4-9d12-7ca68c380176","type":"message","user":"UDDCM376D","text":"そっか","ts":"1575169398.297400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"oHW"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"06bf9e7c-d8e1-47fc-bb63-e64f00e32936","type":"message","user":"UDDCM376D","text":"`struct{}`サイズ０なんですね","ts":"1575169420.297900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"EMFg"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"debd5735-65a4-4001-bc29-a0eb665061a0","type":"message","user":"UDDCM376D","text":"なるほど","ts":"1575169424.298100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"AYiJ"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"2087ae2e-778e-406f-a985-84f8c704877c","type":"message","user":"UDDCM376D","text":"ありがとうございます","ts":"1575169429.298400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"k1z5"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"76c94e99-76ac-49b6-a2c0-b634adbffcdd","type":"message","user":"UGXMRNBUM","text":"GoAdventCalendar、抜け埋めの記事下書きしとこ","ts":"1575169581.299200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"FP=p"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"83d61537-5b6a-4054-8908-1aa77c37cfba","type":"message","user":"UDDCM376D","text":"<https://qiita.com/imoty/items/a45dfa8b4963f3f86df8>","ts":"1575175935.299400","attachments":[{"fallback":"Qiita: とにかく要素一覧の取得が高速な、要素が削除可能であるリストを実装する - Qiita","id":1,"title":"とにかく要素一覧の取得が高速な、要素が削除可能であるリストを実装する - Qiita","title_link":"https://qiita.com/imoty/items/a45dfa8b4963f3f86df8","text":"# お題 要素をリストに、追加したり、特定の要素を削除したり、要素一覧を取得することを考えましょう。なお順番は不問とします。 もし例えばリストとして slice を用いると、追加や要素一覧を取得することは O(1) できますが、s...","thumb_url":"https://cdn.qiita.com/assets/qiita-fb-2887e7b4aad86fd8c25cea84846f2236.png","blocks":null,"service_name":"Qiita","service_icon":"https://cdn.qiita.com/assets/favicons/public/apple-touch-icon-f9a6afad761ec2306e10db2736187c8b.png","thumb_width":200,"thumb_height":200,"from_url":"https://qiita.com/imoty/items/a45dfa8b4963f3f86df8","original_url":"https://qiita.com/imoty/items/a45dfa8b4963f3f86df8"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"spFy"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"a2932ed5-f8cb-4099-9344-6bd253a290dd","type":"message","user":"UDDCM376D","text":"mapよりsliceで全件とったほうが早いとお話って解釈した","ts":"1575175977.300400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"prQk"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"3a6694af-5353-402d-b644-bcb53550b864","type":"message","user":"UDDCM376D","text":"<https://www.ardanlabs.com/blog/2013/12/macro-view-of-map-internals-in-go.html>\nGoのmapの実装はこちらの記事を読んでいるけど、まだ良くわからない","ts":"1575176041.301100","attachments":[{"fallback":"Macro View of Map Internals In Go","id":1,"title":"Macro View of Map Internals In Go","title_link":"https://www.ardanlabs.com/blog/2013/12/macro-view-of-map-internals-in-go.html","text":"Introduction There are lots of posts that talk about the internals of slices, but when it comes to maps, we are left in the dark. I was wondering why and then I found the code for maps and it all made sense. <https://golang.org/src/runtime/hashmap.go> At least for me, this code is complicated. That being said, I think we can create a macro view of how maps are structured and grow. This should explain why they are unordered, efficient and fast.","blocks":null,"service_name":"ardanlabs.com","service_icon":"https://www.ardanlabs.com/favicon.ico","from_url":"https://www.ardanlabs.com/blog/2013/12/macro-view-of-map-internals-in-go.html","original_url":"https://www.ardanlabs.com/blog/2013/12/macro-view-of-map-internals-in-go.html"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"lYn1"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"295fed1c-5a9a-4352-aae9-768d791b0f34","type":"message","user":"UGXMRNBUM","text":"ふとしたタイミングで\n```{package name} {version}/go.mod {hash}```\nだけ載っちゃって\n```{package name} {version} {hash}```\nが消えちゃうケースがあるな。\n`go mod tidy` しても `go get -t -v -d ./...` しても `go install ./...`` しても\n復活しないけど、$GOPATH/pkg まるごと消すと直る。ちょっと厄介そう。","ts":"1575186037.307100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"gkH"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"}]
