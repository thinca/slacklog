[{"client_msg_id":"cac7fe90-eeb9-4d97-9379-040b842da972","type":"message","user":"UNJ2DANJC","text":"iOS 12だとSameSite属性自体を消さないとStrictとして振る舞ってしまうwebkit由来のバクがあってUser-Agentを見ながらhttp.SameSite(0)にしてクロスサイトクッキーを付与するワークアラウンドをやったけどこれでSameSite Defaultでも良くなったのかな\n\u003chttps://bugs.webkit.org/show_bug.cgi?id=188165|https://bugs.webkit.org/show_bug.cgi?id=188165\u003e","ts":"1602165327.278400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"QtKf"}]},{"client_msg_id":"2a311f07-003a-40e4-bbab-a2bb868bda35","type":"message","user":"UNJ2DANJC","text":"SameSiteの振る舞いがちょっと変わった\n\u003chttps://github.com/golang/go/commit/542693e00529fbb4248fac614ece68b127a5ec4d#diff-44567335da7512324c74b50e5fcb3def|https://github.com/golang/go/commit/542693e00529fbb4248fac614ece68b127a5ec4d#diff-44567335da7512324c74b50e5fcb3def\u003e","ts":"1602165264.277200","attachments":[{"fallback":"GitHub: net/http: make SameSiteDefaultMode behavior match the specification · golang/go@542693e","id":1,"title":"net/http: make SameSiteDefaultMode behavior match the specification · golang/go@542693e","title_link":"https://github.com/golang/go/commit/542693e00529fbb4248fac614ece68b127a5ec4d#diff-44567335da7512324c74b50e5fcb3def","text":"The current specification does not foresee a SameSite attribute without a value. While the existing implementation would serialize SameSite in a way that would likely be ignored by well-impelemente...","thumb_url":"https://avatars3.githubusercontent.com/u/4314092?s=400\u0026v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/github.png","thumb_width":250,"thumb_height":250,"from_url":"https://github.com/golang/go/commit/542693e00529fbb4248fac614ece68b127a5ec4d#diff-44567335da7512324c74b50e5fcb3def","original_url":"https://github.com/golang/go/commit/542693e00529fbb4248fac614ece68b127a5ec4d#diff-44567335da7512324c74b50e5fcb3def"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"o7wP"}]},{"client_msg_id":"03243d1c-c6f9-43ee-b17f-43e5e18faa0f","type":"message","user":"UFGUGBCH3","text":"柴田さんの記事もよくまとまってますね\n\u003chttps://engineering.mercari.com/blog/entry/how_to_use_t_parallel/\u003e","ts":"1602132035.270900","thread_ts":"1602132035.270900","attachments":[{"fallback":"メルカリエンジニアリング: Go言語でのテストの並列化 〜t.Parallel()メソッドを理解する〜","id":1,"title":"Go言語でのテストの並列化 〜t.Parallel()メソッドを理解する〜","title_link":"https://engineering.mercari.com/blog/entry/how_to_use_t_parallel/","text":"この記事は、Merpay Tech Openness Month 2020 の6日目の記事です。メルペイでBackendエンジニアをしている柴田（@yoshiki_shibata）です。この記事では、Go言語のtestingパッケージに用意","image_url":"https://storage.googleapis.com/prd-engineering-asset/2020/06/0cb70d73-ogp_a.jpg","blocks":null,"service_name":"メルカリエンジニアリング","service_icon":"https://engineering.mercari.com/favicons/apple-touch-icon-57x57.png","from_url":"https://engineering.mercari.com/blog/entry/how_to_use_t_parallel/","original_url":"https://engineering.mercari.com/blog/entry/how_to_use_t_parallel/"}],"reply_count":1,"team":"T03C4RC8V","reactions":[{"name":"god","count":1,"users":["UFYACJ537"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"4aa"}]},{"client_msg_id":"BE77229A-D5B7-4DB4-A6BB-9EB34625D243","type":"message","user":"UDDCM376D","text":"パッケージごとに、並列で実行されるんですね","ts":"1602126012.270200","team":"T03C4RC8V","reactions":[{"name":"+1","count":1,"users":["U06BRP8VD"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Cntn"}]},{"client_msg_id":"bdc756da-3387-4644-ac7e-71d796a48447","type":"message","user":"U06BRP8VD","text":"記事にしておいた。\n\u003chttps://zenn.dev/koron/articles/ea783d5f202ef9fb68d7\u003e","ts":"1602122589.268800","attachments":[{"fallback":"Zenn: go testの並列性について","id":1,"title":"go testの並列性について","title_link":"https://zenn.dev/koron/articles/ea783d5f202ef9fb68d7","image_url":"https://res.cloudinary.com/dlhzyuewr/image/upload/l_text:notosansjp-medium.otf_50_bold:go%2520test%25E3%2581%25AE%25E4%25B8%25A6%25E5%2588%2597%25E6%2580%25A7%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6,co_rgb:111,w_780,c_fit/l_text:notosansjp-medium.otf_34_bold:By%20%40koron,co_rgb:93a5b1,g_south_east,x_280,y_63/v1579262216/ogp-base_mrsu7s.png","blocks":null,"service_name":"Zenn","service_icon":"https://zenn.dev/images/icon.png","from_url":"https://zenn.dev/koron/articles/ea783d5f202ef9fb68d7","original_url":"https://zenn.dev/koron/articles/ea783d5f202ef9fb68d7"}],"team":"T03C4RC8V","reactions":[{"name":"+1::skin-tone-5","count":8,"users":["UAZ33BKV2","UG6DF6W87","UEACRCY0Z","UK7DT8URY","UDDCM376D","U9S4G0LJW","UA1GWETAA","UFGUGBCH3"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"es3z"}]},{"client_msg_id":"3de0d59c-0632-4ee1-8697-780f2048453c","type":"message","user":"U06BRP8VD","text":"まぁテストで共有リソースもたないのが好ましいのは言うまでもない。","ts":"1602120982.268300","team":"T03C4RC8V","reactions":[{"name":"sorena","count":2,"users":["UAZ33BKV2","U776661HA"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"24g"}]},{"client_msg_id":"5ec2503c-a766-44ef-8c32-175135e132b8","type":"message","user":"U06BRP8VD","text":"go testはテストするパッケージ1つずつに、ビルド、実行、結果表示の3つのアクションを生成して、各アクションは依存性をもってパラレルに実行される。\n\nちなみに実行を担うのは cmd/go/internal/work パッケージ。こいつはいわゆるタスクグラフを実行するやつ。NumCPU 個のワーカーとなるgoroutineを起動して、ルートタスク(=アクション)とその依存タスクを順番に完了させていく。\n\n以上のことからパッケージ間のテストは同時に実行されうる。順番が安定しているかとかまではちゃんと読んでない(今の僕には必要ない)のでわからないけど、テスト内でパッケージを超えて共有リソース(DBとか)を触る場合は同時に実行されうることを意識しないといけない。","ts":"1602120963.267900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"66kRG"}]},{"client_msg_id":"8c569381-fac4-4580-8da4-51a291980011","type":"message","user":"U06BRP8VD","text":"だいたいわかった…","ts":"1602120587.262500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"iLK"}]},{"client_msg_id":"e397a67d-5314-417b-bf90-8128cb04eb35","type":"message","user":"U06BRP8VD","text":"`go test foo/...` で foo/ 下のパッケージをいっぺんにテストする際の、パッケージ間のテスト順序とかかぶり具合とか、気になったのでgoのコードを追ってみよう。","ts":"1602119256.262100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"xvWl"}]},{"type":"message","user":"UGE4R4TSB","text":"\u003c@UGE4R4TSB\u003e has joined the channel","ts":"1602117047.260700","subtype":"channel_join","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"92d1df9c-cbd5-48e7-a841-0396c748630a","type":"message","user":"UFGUGBCH3","text":"以下まとめ引用\n\nまとめると以下の通りです。\n• `-p`フラグによる指定は、複数のパッケージのテストを並列に異なるプロセスとして実行することを指定する。`-p=1`では、パッケージが一つずつ実行されることになる。\n• `t.Parallel()`メソッドの呼び出しで、パッケージ内のトップレベルのテスト関数やサブテスト関数が並列に実行されることになる。\n• `t.Parallel()`メソッドを呼び出している（トップレベルを含む）テスト関数は、その親のテスト関数の呼び出しが戻るまで、`t.Parallel()`メソッド呼び出しによる一時停止の状態から処理を再開しない。\n• `t.Parallel()`メソッドによる並列レベルは、デフォルトで`GOMAXPROCS`の値である。明示的に変更するには、`-parallel`フラグで指定するか、環境変数`GOMAXPROCS`で設定する。\n• テスト関数内での後処理は、`t.Cleanup`メソッドもしくは`defer`文を使うかは、含まれるサブテスト関数が`t.Parallel()`メソッドを呼び出しているかいないかで使い分ける必要がある。\n• `t.Parallel()`メソッドを使っていても、複数のパッケージのテストが*同時に一つのテストプロセス内で実行されることはない*。\n","ts":"1602132118.271100","thread_ts":"1602132035.270900","parent_user_id":"UFGUGBCH3","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"9vL"}]}]
