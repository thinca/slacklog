[{"client_msg_id":"b64a190e-db4e-4ce4-b0d6-1e395e4b2a78","type":"message","user":"U9S4G0LJW","text":"列挙しながら要素消すのが速くなるかららしい\n中身読めるとこういうの追えていいよな","ts":"1612794617.072700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"qFh4"}]},{"client_msg_id":"5934a155-0c57-499d-a0ac-e7d57ebc3dc6","type":"message","user":"U9S4G0LJW","text":"mapに対してrangeするとシャッフルされたような挙動するのが気になって調べてたらここまで辿り付いた\n\u003chttps://github.com/golang/go/commit/55c458e05f35d0d5d539107da07b744ad96f268e\u003e","ts":"1612794589.071800","attachments":[{"fallback":"GitHub: runtime: on bigger maps, start iterator at a random bucket. · golang/go@55c458e","id":1,"title":"runtime: on bigger maps, start iterator at a random bucket. · golang/go@55c458e","title_link":"https://github.com/golang/go/commit/55c458e05f35d0d5d539107da07b744ad96f268e","text":"This change brings the iter/delete pattern down to O(n lgn) from O(n^2). Fixes #8412. before: BenchmarkMapPop100 50000 32498 ns/op BenchmarkMapPop1000 500 3244851 ns/op BenchmarkM...","thumb_url":"https://avatars.githubusercontent.com/u/4314092?s=400\u0026v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/github.png","thumb_width":250,"thumb_height":250,"from_url":"https://github.com/golang/go/commit/55c458e05f35d0d5d539107da07b744ad96f268e","original_url":"https://github.com/golang/go/commit/55c458e05f35d0d5d539107da07b744ad96f268e"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"1y1u0"}]},{"client_msg_id":"27ca5ba0-2525-4242-a53f-6fd81d8a3189","type":"message","user":"UDDCM376D","text":"どうやってググりました？\nmechanical sympathiesをそのままググっても見つからなかった（見落としてたかもだけど）ので、ググり方が良くないのかなぁと…","ts":"1612788181.071300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Kgo"}]},{"client_msg_id":"5062af4f-035c-42c0-8ed0-4182d61a5d6d","type":"message","user":"UDDCM376D","text":"なるほど","ts":"1612788151.070700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"hVFj"}]},{"client_msg_id":"dbca77a7-9806-4e7b-b411-03ac4b5b34b2","type":"message","user":"U06BRP8VD","text":"\u0026gt; Mechanical sympathy is when you use a tool or system with an understanding of how it operates best.","ts":"1612787087.070400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"8/i"}]},{"client_msg_id":"923a3c53-6aaa-46f6-8855-6bcc88fd2cbc","type":"message","user":"U06BRP8VD","text":"↑ぐぐったらでてきた","ts":"1612787079.070200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"74RO1"}]},{"client_msg_id":"087da6cf-74f6-45c4-a82b-3eaea1acd0f8","type":"message","user":"U06BRP8VD","text":"ああこういうのもあるな。\n\n\u003chttps://wa.aws.amazon.com/wat.concept.mechanical-sympathy.en.html\u003e","ts":"1612787075.070000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"EBBo"}]},{"client_msg_id":"cbb32d48-deec-4b20-8f14-3d0cdf2efd4d","type":"message","user":"U06BRP8VD","text":"こう書き替えたらどう?\n\n\u0026gt; the Go scheduler has (mechanical) sympathies  for the operating system (OS) scheduler.","ts":"1612786927.069600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"7mr"}]},{"client_msg_id":"EE08F1FB-FF64-4FAF-A4DC-39055C0DF4D2","type":"message","user":"UDDCM376D","text":"\u003chttps://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html|https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html\u003e\n\nこちらの記事を読んでるけど、mechanical sympathiesがどういう意味なのか分からなくて困り中…","ts":"1612786787.068900","attachments":[{"fallback":"Scheduling In Go : Part I - OS Scheduler","id":1,"title":"Scheduling In Go : Part I - OS Scheduler","title_link":"https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html","text":"Prelude This is the first post in a three part series that will provide an understanding of the mechanics and semantics behind the scheduler in Go. This post focuses on the operating system scheduler. Index of the three part series: 1) Scheduling In Go : Part I - OS Scheduler 2) Scheduling In Go : Part II - Go Scheduler 3) Scheduling In Go : Part III - Concurrency","blocks":null,"service_name":"ardanlabs.com","service_icon":"https://www.ardanlabs.com/favicon.ico","from_url":"https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html","original_url":"https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"O0=z"}]},{"client_msg_id":"f6dfa361-b539-4d68-8b05-0ccb58237540","type":"message","user":"U06BRP8VD","text":"まぁだいたい僕がざっくり意識しているgoroutineの数の話は今のところこのくらい。\n(コメント・質問はスレッドに","ts":"1612784994.060700","thread_ts":"1612783990.058300","subtype":"thread_broadcast","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ZxN"}],"root":{"client_msg_id":"b49e63ed-3492-42ef-8e22-7367bce80fca","type":"message","user":"U06BRP8VD","text":"僕の現時点の理解でいうと、goroutineの数を制限するべきなのはCPU起因とメモリ量起因、最後にI/O起因という感じ。優先順位はこのまま。(スレッド内にその理由を書いておきます)","ts":"1612783990.058300","thread_ts":"1612783990.058300","edited":{"user":"U06BRP8VD","ts":"1612784019.000000"},"reply_count":23,"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"iIab"}]}},{"client_msg_id":"40bc6a23-f70e-46de-bca1-fe159fcb1c8e","type":"message","user":"UERCTTT8B","text":"なつかし","ts":"1612783995.058700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"sz6"}]},{"client_msg_id":"29a3fa95-83fd-4227-a404-10eaffbd91e9","type":"message","user":"UERCTTT8B","text":"わいがいる","ts":"1612783990.058400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"9gXZW"}]},{"client_msg_id":"b49e63ed-3492-42ef-8e22-7367bce80fca","type":"message","user":"U06BRP8VD","text":"僕の現時点の理解でいうと、goroutineの数を制限するべきなのはCPU起因とメモリ量起因、最後にI/O起因という感じ。優先順位はこのまま。(スレッド内にその理由を書いておきます)","ts":"1612783990.058300","thread_ts":"1612783990.058300","edited":{"user":"U06BRP8VD","ts":"1612784019.000000"},"reply_count":23,"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"iIab"}]},{"client_msg_id":"89fdf4a9-5c3e-4838-afb4-1224e3ddd06f","type":"message","user":"U06BRP8VD","text":"なるほど。これは適切な並列数を入出力の速度(かかった時間?)から自動調整するパッケージについての提案発表なのね。一瞬ランタイム側でやる話かとおもったけど。","ts":"1612783856.056500","edited":{"user":"U06BRP8VD","ts":"1612783872.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"KUaw"}]},{"client_msg_id":"067fc1fe-f5b1-46f4-a866-6b6addb43b58","type":"message","user":"UNJ2DANJC","text":"goroutine数ネタだとGopherCon 2019で日本の方が発表してたやつを思い出した。これ \u003chttps://blog.monochromegane.com/blog/2019/08/10/gophercon_2019/\u003e","ts":"1612783666.055500","attachments":[{"fallback":"GopherCon 2019で初の海外カンファレンス登壇をしてきました","id":1,"title":"GopherCon 2019で初の海外カンファレンス登壇をしてきました","title_link":"https://blog.monochromegane.com/blog/2019/08/10/gophercon_2019/","text":"7/24から27にかけてアメリカ、サンディエゴで開催されたGopherCon 2019で人生初となる海外カンファレンスに登壇してきました。 GopherConはGo関連で最大級の国際カンファレンスです。 6年目となる今年は世界中から1,800名のGopherが参加し、200名以上の応募の中から選ばれた36名がスピーカーとして登壇しました。 今回のGopherConではPre-Conference Workshopと呼ばれるカンファレンス前日に終日行われるワークショップと、カンファレンス期間中に行われる25分のキーノートセッション、そして45分のチュートリアルセッションがありました。 その中で、僕は「Optimization for Number of goroutines Using Feedback Control」というタイトルで45分のチュートリアルセッションを務めました。 動画 スライド スピーカーノート GopherCon 2019: Optimization for Number of goroutines Using Feedback Control 発表内容 今回の発表は以前東京で開催されたGo Conference 2018 Autumnで発表したフィードバック制御によるGoroutine起動数の最適化を英語化したものです。 また、今回向けに実際にThe Platinum Searcherに組み込んで有効性を評価する実験結果を追加しています。 発表資料については、45分という時間で母国語を使わずにできるだけわかりやすく伝えるため、結果的にほぼ刷新する形となりましたが、母国語の慣れに頼らずとも説明可能なわかりやすい資料になったのではないかと自分では思っています。 具体的には、まずイントロダクションとバックグラウンドの章を少し手厚くしました。 今回の手法は、フィードバック制御を用いてgoroutine数を継続的に最適に保つことを目的としています。 しかしながら、そもそもGo言語の並行処理においては、goroutineのコストの低さとランタイムがgoroutineを効果的に切り替えることから、その必要性はないのではないかと考えることができます。 そこで、リソース競合や枯渇などの影響も受けてしまう可能性があること、それらを考慮した汎用的な並行設計に対する難しさを、実際にプラチナサーチャーによるパフォーマンスチューニングの例を踏まえながら前提を合わせるようにしました。 また、手法の説明では、簡単なアプローチから出発して少しづつ課題を解決していくようにすることで、比較的複雑な箇所の説明の際に飛躍がないように気をつけました。 発表について、普段は資料のみで臨んでもそれなりに話せると自負していますが、初の英語での登壇となるため今回は発表内容のスクリプトを用意して、伝えるべきことを全て伝えられるようにしました。 また、不慣れな言語でも自分自身が納得して説明できるように、できるだけ平易な文で説明することで、発表資料と同様に曖昧な箇所や飛躍がある点を潰すことができたと思います。 本番の発表は、4スクリーンある300-400人規模の会場ではありましたが、とても熱心に頷いてくれる方がいたり日本から来たメンバが前に座っていたりして、幸いにも落ち着いて自分のペースで登壇することができたと思います。 発表では、あまり一本調子にならないように、文の中でも意味や文法上切れる箇所は間をおいたり、定型の言い回し（I found that など）なるべく流暢にしたり、強調したいところは少しゆっくり大きく言うなど、「今の」英語力でできる工夫をしていきました。 一方で、個別の単語の発音などはまだまだ課題意識があるので、今後、そちらも重点的に取り組んでいきたいと感じました。 質疑の時間は登壇時間には含まれなかったのですが、終了して台を降りると同時に7人ぐらいに囲まれて質問責めに会い、発表に興味を持ってくれたことをとても嬉しく思いました。 質問としては、発表内容について理解があっているか確認するものと、実装上の質問などがあり、資料やKaburayaのコードを見ながら説明していきました。 それでも、今の英語力では、発表内容以外の部分については拙い説明になることも多々あり、これも今後改めて英語をやるモチベーションが高まりました。 また、発表後もカンファレンス期間中に何度も感想や質問をもらう機会があり、これがとても嬉しかったです。 会場と発表の様子 .@monochromegane is giving talk about Go's concurrency mechanism and his proposal to optimize the number of goroutine.","thumb_url":"https://blog.monochromegane.com/images/ogp.png","blocks":null,"service_name":"blog.monochromegane.com","thumb_width":1200,"thumb_height":630,"from_url":"https://blog.monochromegane.com/blog/2019/08/10/gophercon_2019/","original_url":"https://blog.monochromegane.com/blog/2019/08/10/gophercon_2019/"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"wSQG"}]},{"client_msg_id":"a348accc-9a85-4ccb-82d4-f52e1e860bd3","type":"message","user":"U06BRP8VD","text":"「数を考える」って書いておきながら、要約部分には定量的なこと=数のことは書いておらず、定性的なことに終始してしまったのが、つかみどころのない記事になってる原因だと判断してます。","ts":"1612783641.054600","thread_ts":"1612780584.048200","edited":{"user":"U06BRP8VD","ts":"1612783666.000000"},"subtype":"thread_broadcast","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"cU1"}],"root":{"client_msg_id":"24499d41-afe2-493f-b3a5-9f65ac67d8a2","type":"message","user":"UDDCM376D","text":"読んだけど、知識が足りなすぎてよくわからなかった","ts":"1612780584.048200","thread_ts":"1612780584.048200","reply_count":1,"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"kihTV"}]}},{"client_msg_id":"db943415-2208-4eb4-983e-ab199ce68056","type":"message","user":"U06BRP8VD","text":"Server側は無制限","ts":"1612782919.053400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"kg="}]},{"client_msg_id":"0c7d8abd-1199-46ec-9c4b-30fc119c4783","type":"message","user":"U06BRP8VD","text":"あとタイムアウト監視用に+1個だったかな。","ts":"1612782882.053000","team":"T03C4RC8V","reactions":[{"name":"eyes","count":1,"users":["UNJ2DANJC"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"8gl"}]},{"client_msg_id":"a5e8fabf-e9b0-49a4-9b3f-f911752c1618","type":"message","user":"U06BRP8VD","text":"http.Get(Client)だといくつだったかな。1リクエスト毎にread\u0026amp;writeで2つは間違いない。","ts":"1612782854.052600","edited":{"user":"U06BRP8VD","ts":"1612782978.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"abyL"}]},{"client_msg_id":"5f8cf81e-9e1a-45bb-86ab-6680aad3e6a7","type":"message","user":"U06BRP8VD","text":"net/httpは理論上無限にメモリの許す限り並列に実行します。なので運用的には同時実行数を監視してbusyを返すなりしないとNGです。","ts":"1612782820.052100","thread_ts":"1612782015.051200","subtype":"thread_broadcast","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"xPoj"}],"root":{"client_msg_id":"8b3c3e2a-00c1-4d11-bdbe-b2fdd3830395","type":"message","user":"UNJ2DANJC","text":"`net/http/transport.go` とかゴリゴリgoroutineキメてますね 実際どのgoroutineが同時に動いてるかはちゃんと読んでませんが","ts":"1612782015.051200","thread_ts":"1612782015.051200","reply_count":1,"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"6Zp"}]}},{"client_msg_id":"b2786651-9995-4785-ac2c-0cc4c1e8ba19","type":"message","user":"U06BRP8VD","text":"その記事、タイトルに上げてる課題と要約に乖離があって、さらに要約に新しい情報が無いのでちょっと期待外れでした。","ts":"1612782725.052000","thread_ts":"1612782725.052000","reply_count":1,"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ItJSd"}]},{"client_msg_id":"8b3c3e2a-00c1-4d11-bdbe-b2fdd3830395","type":"message","user":"UNJ2DANJC","text":"`net/http/transport.go` とかゴリゴリgoroutineキメてますね 実際どのgoroutineが同時に動いてるかはちゃんと読んでませんが","ts":"1612782015.051200","thread_ts":"1612782015.051200","reply_count":1,"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"6Zp"}]},{"client_msg_id":"2ce00c68-47c6-4a9c-a7e3-23523f834195","type":"message","user":"UDDCM376D","text":"そうなのか","ts":"1612781846.049900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"gJT5e"}]},{"client_msg_id":"f9654da7-13fb-4753-8261-d7d81262ac35","type":"message","user":"UNJ2DANJC","text":"確かhttp.Getを1回呼ぶとしてもnet/httpの中でgoroutine何個か使ってたはず","ts":"1612780938.049600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"H6qX"}]},{"client_msg_id":"24499d41-afe2-493f-b3a5-9f65ac67d8a2","type":"message","user":"UDDCM376D","text":"読んだけど、知識が足りなすぎてよくわからなかった","ts":"1612780584.048200","thread_ts":"1612780584.048200","reply_count":1,"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"kihTV"}]},{"client_msg_id":"1d8ea292-04e1-4876-8f91-d961da652434","type":"message","user":"UNJ2DANJC","text":"IO boundな処理で脳筋goroutineぶっぱして無事死亡した経験ある","ts":"1612780454.047900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"4bZ"}]},{"client_msg_id":"ac039c2c-7ad5-48f2-8f9f-35a306fbe004","type":"message","user":"UDDCM376D","text":"読んでいる","ts":"1612780203.046700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ZBo"}]},{"client_msg_id":"450e9c55-19cf-409a-99b3-fbdfda99877f","type":"message","user":"UDDCM376D","text":"\u003chttps://zenn.dev/imamura_sh/articles/goroutine-29492669efb6aef33306\u003e","ts":"1612780201.046400","attachments":[{"fallback":"Zenn: 原理原則から適切なgoroutineの数を考える","id":1,"title":"原理原則から適切なgoroutineの数を考える","title_link":"https://zenn.dev/imamura_sh/articles/goroutine-29492669efb6aef33306","image_url":"https://res.cloudinary.com/dlhzyuewr/image/upload/s--l5wcwPB7--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Shoichi%2520Imamura%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E5%258E%259F%25E7%2590%2586%25E5%258E%259F%25E5%2589%2587%25E3%2581%258B%25E3%2582%2589%25E9%2581%25A9%25E5%2588%2587%25E3%2581%25AAgoroutine%25E3%2581%25AE%25E6%2595%25B0%25E3%2582%2592%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMTJiYzE3YTFkZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1609308637/og/new_txlqub.png","blocks":null,"service_name":"Zenn","service_icon":"https://zenn.dev/images/icon.png","from_url":"https://zenn.dev/imamura_sh/articles/goroutine-29492669efb6aef33306","original_url":"https://zenn.dev/imamura_sh/articles/goroutine-29492669efb6aef33306"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"5z22"}]},{"client_msg_id":"6e76fa64-b658-4d6d-84e6-6bfd0f9ae25b","type":"message","user":"U06BRP8VD","text":"systemstack、メモリマネジメント系読んでると出てきますね。字面からまぁそうだよなってなるんですがw","ts":"1612765740.046000","edited":{"user":"U06BRP8VD","ts":"1612765749.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"atl"}]},{"client_msg_id":"e12aabaf-40b8-4126-835e-cadbcf82e8b6","type":"message","user":"UERCTTT8B","text":"g0 から呼ばれる超特殊関数かな","ts":"1612765549.045300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"6soT"}]},{"client_msg_id":"c0ffb27a-e709-429f-b7ef-9086cde0980f","type":"message","user":"UERCTTT8B","text":"`//go:systemstack` はじめてしった","ts":"1612765539.045000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"3Ya6"}]},{"client_msg_id":"6a5dd885-0ecc-4443-b7e3-20171d1a7e60","type":"message","user":"UERCTTT8B","text":"ほんとだ","ts":"1612764683.044500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"pO8o"}]},{"client_msg_id":"efe8bbc5-7aeb-4a4a-bed0-882b5124f304","type":"message","user":"U06BRP8VD","text":"なんか runtime/stack.go に説明書いてあるっぽい。","ts":"1612764369.044200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"VZE"}]},{"client_msg_id":"cc232bf5-5ef5-4ffd-adc5-263ab9627dd8","type":"message","user":"UERCTTT8B","text":"出力された obj ファイルとにらめっこしてがんばります","ts":"1612764067.043900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"EXgr"}]},{"client_msg_id":"27273f22-1d00-48f7-bb75-be1dc369006e","type":"message","user":"UERCTTT8B","text":"なるほど!","ts":"1612763899.043500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"gPXEe"}]},{"client_msg_id":"f471b1ca-80a9-4da3-b7a6-4f805bd550ea","type":"message","user":"U06BRP8VD","text":"いやぜんぜん。「あー書いてあるなー」くらいw","ts":"1612763894.043300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"D6SY"}]},{"client_msg_id":"23e85395-218d-4117-9242-f4f54996a75c","type":"message","user":"UERCTTT8B","text":"\u003c@U06BRP8VD\u003e Go の関数ってあらゆるところに morestack などが挟まると思うんですけど、そこらへんの実装ってお詳しいですか?","ts":"1612763818.042700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ZXea"}]},{"client_msg_id":"9ef7e743-26af-4c8a-a6ce-ec67d1daeb51","type":"message","user":"UAZ33BKV2","text":"大概はすぐ抜けるようにつくるけど","ts":"1612756801.041800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"+ye8"}]},{"client_msg_id":"17ede3da-23f9-4f8f-9316-1f737e0af7c2","type":"message","user":"UAZ33BKV2","text":"あと、割り込みハンドリングだとそのメモリ操作すら制限されるから、状態管理も大変だろうなあ","ts":"1612756786.041300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"KC4"}]},{"client_msg_id":"a6783d67-855a-4566-9611-61285aad1a89","type":"message","user":"U06BRP8VD","text":"まぁこれは普通のCでもそうですからね。特にWindows…","ts":"1612756580.040200","thread_ts":"1612756340.037600","subtype":"thread_broadcast","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"M+7fh"}],"root":{"client_msg_id":"f68db94b-431f-4565-ad2d-acaa4c21191e","type":"message","user":"UERCTTT8B","text":"そもそも Go の関数になかなか突入しないなあれ","ts":"1612756340.037600","thread_ts":"1612756340.037600","reply_count":1,"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Xfa"}]}},{"client_msg_id":"e02eef5c-0a82-439b-8b67-a03a381abbeb","type":"message","user":"U06BRP8VD","text":"メモリマネージメントだけはたしかにGC避けてるけど、そうだとは一見わからないかもしれない。","ts":"1612756485.039900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"tLhr"}]},{"client_msg_id":"420562ae-902e-4d5c-914e-636b248bf177","type":"message","user":"UERCTTT8B","text":"GC の定義自体はさすがに GC 避けて書いてると思うんですけど。","ts":"1612756376.038500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"mXdKx"}]},{"client_msg_id":"837e210e-df05-4f0d-b004-8101c0852e07","type":"message","user":"UERCTTT8B","text":"runtime もある程度は GC 前提でかかれてるんでしょうか?","ts":"1612756362.038200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"4Gsk"}]},{"client_msg_id":"f68db94b-431f-4565-ad2d-acaa4c21191e","type":"message","user":"UERCTTT8B","text":"そもそも Go の関数になかなか突入しないなあれ","ts":"1612756340.037600","thread_ts":"1612756340.037600","reply_count":1,"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Xfa"}]},{"client_msg_id":"239b663f-13c7-44e6-9093-a1e38f1d858c","type":"message","user":"UERCTTT8B","text":"最近エントリーポイント周り見ている","ts":"1612756323.037200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"KcL"}]},{"client_msg_id":"d7e43981-c787-468d-bcec-56ec06a9597b","type":"message","user":"U06BRP8VD","text":"`//go:nogc` みたいな記法の導入不可避だと思う。","ts":"1612756232.036400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"/rhzI"}]},{"client_msg_id":"3899ab87-38af-4abe-a874-572506575651","type":"message","user":"U06BRP8VD","text":"GCだけはそうでもないんですよね。","ts":"1612756211.036000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"8a3bE"}]},{"client_msg_id":"589bad77-c7ed-4e81-ad4a-704fa22160bf","type":"message","user":"UERCTTT8B","text":"実際 runtime がそんな感じですよね","ts":"1612756193.035100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ozx"}]},{"client_msg_id":"7541d20b-55f8-478f-8ab4-716c973772a3","type":"message","user":"U06BRP8VD","text":"それも「え、Goで書いている意味って」ってなるとおもうw","ts":"1612756176.034500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"hN97"}]},{"client_msg_id":"43b6b019-91ec-4738-a184-5133e1fb6c67","type":"message","user":"UERCTTT8B","text":"ヒープに確保しないように気をつけて書くしかなさそうですね","ts":"1612755928.034000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"3VP3"}]},{"client_msg_id":"d4dd8728-dccf-4bba-829b-4e04779bcf81","type":"message","user":"UERCTTT8B","text":"フルアセンブラだけど Go であるという主張","ts":"1612755907.033400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"rCE"}]},{"client_msg_id":"051e24d2-95b5-42b1-9c80-3458957652e4","type":"message","user":"U06BRP8VD","text":"GCを使わずに書ける(or 動く)モードがあればアセンブラ最小限で残りはGoでメモリ管理も書けるかなぁ、という妄想。","ts":"1612755884.032700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"A+bLc"}]},{"client_msg_id":"184aa464-f2b6-4b89-a40f-568d4bca22b0","type":"message","user":"U06BRP8VD","text":"直感的には、メモリ周りのあれこれは全部アセンブラで書かざるを得なくなって、あれGoでOS書くんじゃなかったの? みたいになるかなって。","ts":"1612755827.031600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"3epu"}]},{"client_msg_id":"e2ef5263-8f40-427e-a137-c6a7b2005102","type":"message","user":"U06BRP8VD","text":"32bitでも、組み込み基準で小さくはないかもしれない。","ts":"1612755772.030700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"94P"}]},{"client_msg_id":"a36312ec-3484-4c7c-9c65-ae7b97d1454a","type":"message","user":"U06BRP8VD","text":"Go(64bit)は確保(予約)するメモリでかいからなぁ。","ts":"1612755732.030200","edited":{"user":"U06BRP8VD","ts":"1612755745.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"WtR5"}]},{"client_msg_id":"b69e0230-aa84-4371-8388-ffefb1d42a58","type":"message","user":"U06BRP8VD","text":"まぁ最後はアセンブラだけども。","ts":"1612755695.029600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"LQ62"}]},{"client_msg_id":"19708d96-e1a2-4dbe-a1fa-7177be9750e3","type":"message","user":"UERCTTT8B","text":"runtime の世界みたいにキツキツな Go でなんとか?","ts":"1612755671.028900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"a77H"}]},{"client_msg_id":"c3efd40c-e77b-41bb-8df7-b0df3340d38f","type":"message","user":"U06BRP8VD","text":"そのシステムコールもGoで実装されるでしょ? そこのメモリマネージメントどうするんやろ?","ts":"1612755646.028200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"cuXo"}]},{"client_msg_id":"66bc738b-8e3f-4e73-9f60-8a03d114f337","type":"message","user":"UERCTTT8B","text":"詳細は知らないですが。","ts":"1612755629.027800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"RLJno"}]},{"client_msg_id":"92885a45-fe26-420a-ad63-cafb59d4d33e","type":"message","user":"UERCTTT8B","text":"Haskell でかかれた OS とかありましたね","ts":"1612755618.027300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"84l5"}]},{"client_msg_id":"c8038758-a94a-41d3-8bbb-e33a5375c924","type":"message","user":"UERCTTT8B","text":"GC されるメモリを確保するシステムコールを定義して、これが OS だと言い張ることは可能かなと思いました","ts":"1612755561.026200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Q5s"}]},{"client_msg_id":"2a932b59-3ce0-41f6-bb16-1042789cc7fb","type":"message","user":"UERCTTT8B","text":"実用に関して疑問なのはそうですけど","ts":"1612755511.025000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"C/O"}]},{"client_msg_id":"01dbd320-d2b0-43aa-9117-51c01a088cf1","type":"message","user":"U06BRP8VD","text":"GCのためにメモリというリソースを厳密管理できないのは、OSとしてはかなり致命的かなって。","ts":"1612755466.024200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Syx"}]},{"client_msg_id":"b8b4246f-8050-4eaa-b058-662dda24e82c","type":"message","user":"UERCTTT8B","text":"効率無視すればいけそう","ts":"1612755435.023600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"kLZ"}]},{"client_msg_id":"23766064-3461-4e6f-80a1-e09c0c248c26","type":"message","user":"U06BRP8VD","text":"僕も直感ではそう思うけど、さすがにちゃんと実験とかせずに結論は出せないなという考え。","ts":"1612755422.023100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"2ymM"}]},{"client_msg_id":"22e733fe-a1c6-4e39-a6ee-d9999a96c390","type":"message","user":"UERCTTT8B","text":"OS が GC もつのはやっぱまずいんですかね","ts":"1612755408.022800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"cR9gX"}]},{"client_msg_id":"715824a8-9b69-4861-b317-0c11ea492481","type":"message","user":"U06BRP8VD","text":"それなぁ","ts":"1612755363.021500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"fJ7CR"}]},{"client_msg_id":"3ba818d8-860d-439b-bf6c-d0e31fcb6021","type":"message","user":"UERCTTT8B","text":"やるならそれ含めて全部書き直しで、それは Go と言えるのかというと…?","ts":"1612755357.021300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"K5CJk"}]},{"client_msg_id":"d45832e7-6d1f-4b5a-ab8e-d13e414f8799","type":"message","user":"UERCTTT8B","text":"標準ライブラリが GC 前提で書かれてるので、ないに一票","ts":"1612755320.020300","team":"T03C4RC8V","reactions":[{"name":"wakaru","count":1,"users":["U06BRP8VD"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"v7rqD"}]},{"client_msg_id":"95cef574-8f55-47cd-8668-f1906ae2b0f0","type":"message","user":"U06BRP8VD","text":"ただOSを作ると考えた時にGCとか巨大なフットプリントのruntimeとは致命的に相性が悪い。","ts":"1612755130.019500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"7o="}]},{"client_msg_id":"d0ada16e-2444-4f00-9a43-ab09023614c0","type":"message","user":"U06BRP8VD","text":"TinyGo自体はだいたいのボードで動くんですよ。","ts":"1612755101.018900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"d4p="}]},{"client_msg_id":"4b0389aa-b84e-45a2-b986-77f468ea6fa3","type":"message","user":"UDDCM376D","text":"\u0026gt; そもそもGoはOSを作るための言語ではない\n（わかる）","ts":"1612755075.018400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"fmy"}]},{"client_msg_id":"f8dcbafe-f5d1-47f1-a85f-7bce5c9940d8","type":"message","user":"U06ECBRTJ","text":"\u003chttps://garasubo.github.io/embedded-book/2_setup/index.html\u003e\nRust のやつでは、\n\u0026gt; STマイクロエレクトロニクス社のNUCLEO-F429ZIボードを使用します。 ただし、この本では多くのペリフェラルは使わないので、ST社のCortex-Mの他のボードでも十分に再現可能かと思われます。\nなので、TinyGo は一応動く臭いですけどね","ts":"1612755040.017800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"8lo"}]},{"client_msg_id":"ba241ae3-23a0-45cb-a342-7b8f1e357d2a","type":"message","user":"U06BRP8VD","text":"そもそもGoはOSを作るための言語ではない、ってのはあるんだけどもGCのない(=malloc\u0026amp;freeとか別の手段でstatic(?)な手法で置き換える)Goって成立しうるんだろうか。","ts":"1612755017.017100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"JdSvD"}]},{"client_msg_id":"9b1517a1-b606-4f75-bb17-4dcea5862ae5","type":"message","user":"UERCTTT8B","text":"GC もあとづけ","ts":"1612754821.015000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"NR1"}]},{"client_msg_id":"b639da52-bace-4179-89fd-aa2f9a3b2744","type":"message","user":"UERCTTT8B","text":"まるまる作り直しですよねあれ","ts":"1612754806.014600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"yOl"}]},{"client_msg_id":"fc4e27d9-326e-42ba-b267-294b402b45a1","type":"message","user":"U06BRP8VD","text":"GoでOS作るの、本家GoだとGCと分厚いランタイムが巨大に立ちふさがると考えているんだけども… TinyGoだとどうなるんやろね?","ts":"1612754715.014200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"/ta8J"}]},{"client_msg_id":"6d0792af-5d0d-49f1-bbd5-acef18e1682b","type":"message","user":"U06BRP8VD","text":"圧縮展開みたいなCPUをフルに回すケースでは、利用可能なCPUのコア数に設定したときがもっともパフォーマンス(=スループット)が発揮できます。ただ1タスク当たりのレイテンシ(=所要時間)は若干下がり気味になります。","ts":"1612784081.058900","thread_ts":"1612783990.058300","edited":{"user":"U06BRP8VD","ts":"1612784124.000000"},"parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"UHP2"}]},{"client_msg_id":"9129741b-f9ed-4a2d-a10d-39c885c5250b","type":"message","user":"U06BRP8VD","text":"仮にレイテンシ重視ならコア数の1/2から3/4がくらいがベストかなという感じ。","ts":"1612784165.059300","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"xL7Pi"}]},{"client_msg_id":"7f208ace-31e9-4e78-99d3-5e248711137b","type":"message","user":"U06BRP8VD","text":"で次にメモリ量なんですがこれはまさにhttp.Serverの件で、1リクエストあたりのメモリ消費量がリクエスト数で掛け算になって使用可能な(もしくは利用を許可された)メモリを超えるようなケースを、防ぐためにgoroutineの数を制限せざるを得ないわけですね。\n\n特に裏で別のWebサービスに触って1リクエストあたりのレイテンシが長くなる傾向がある時は顕著ですね。長くかかるからその間にどんどん別のリクエストでgoroutineが起動してあっという間にメモリを圧迫すると。\n\nこれは不特定多数がアクセスする可能性のあるAPIなんかでは対策が必須と言ってよいと考えてます。","ts":"1612784380.059500","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ijY"}]},{"client_msg_id":"a57f4251-849d-466a-8e1b-88593839a474","type":"message","user":"U06BRP8VD","text":"最後にI/Oなんですが、これは考えるべき要素が多すぎて一概に言えないって感じです。HDD1台ならそりゃgoroutineたくさんたてたら効率悪かろうってなるんですが、これが複数台だったりSSDだったりすると相当に事情が違ってくる。\n\nでそこにPCIeやSATAといった接続方法に起因する流量の上限があって、さらにはOSのキャッシュ機構なんかや、くわえて1goroutineあたりのI/O量はプログラム毎で違うでしょ? 複雑すぎて、一言では片づけられない。","ts":"1612784738.059700","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ugV"}]},{"client_msg_id":"49231f2d-669a-4d44-ba8c-67d4b60c06e6","type":"message","user":"U06BRP8VD","text":"ともあれ本当にI/O boundな処理をGoに実行させるなら、それはもう1つのgoroutineでやるべきだよね、という乱暴な結論になっちゃうかもな。","ts":"1612784844.059900","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"vGV"}]},{"client_msg_id":"62d43a08-4962-433e-a451-34d832c126cb","type":"message","user":"U06BRP8VD","text":"1goroutineでI/Oがboundに到達していないなら、複数goroutine回せばI/O使い切るところまで速くなりうるっていう言い方もできますね。","ts":"1612784935.060100","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"qKV"}]},{"client_msg_id":"3fc52eee-1f21-40fa-8567-cd49450bd7c7","type":"message","user":"U06BRP8VD","text":"優先順位でCPU＞メモリなのはCPUの数を変えるのは難しいし、超えた時の振る舞いで深刻になったケースが多いから。メモリ＞I/OなのはI/Oで困ったことが少ないから。","ts":"1612785092.061000","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"TFr=U"}]},{"client_msg_id":"D2DA81A9-1127-453E-9FAE-4377AEBEDE33","type":"message","user":"UDDCM376D","text":"圧縮展開って、並列処理出来るんすね\nてっきり順次に処理しないとダメと思ってました","ts":"1612785794.062000","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"927"}]},{"client_msg_id":"e97c42bf-242b-4b0a-9403-3da128deb1a8","type":"message","user":"U06BRP8VD","text":"ああできないタイプもありますね。\n\nできるやつで簡単なのはzipです。ファイルごとに圧縮されてるので。","ts":"1612785848.062200","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"7rYSG"}]},{"client_msg_id":"f265e955-6686-4249-9cfd-60621e8b2275","type":"message","user":"U06BRP8VD","text":"gzとかは一見できなさそうに見えるかもですが、あれもブロック単位での圧縮なのでちゃんと作ればできるかもしれない。やったことないんでわからないんですが。","ts":"1612785888.062400","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"wDwRo"}]},{"client_msg_id":"04E6095E-0E79-48B0-B091-9C9E113BC1B2","type":"message","user":"UDDCM376D","text":"なるほど","ts":"1612785925.062700","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"IX=tP"}]},{"client_msg_id":"D0E42986-CBC1-4993-8333-C546A2F32A5F","type":"message","user":"UDDCM376D","text":"ファイルごとに並列展開すれば良いのか","ts":"1612785937.063200","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"L61m"}]},{"client_msg_id":"af74072b-1582-4661-9014-963421b389f7","type":"message","user":"U06BRP8VD","text":"それやるとI/Oバウンドになりそうなんですが koron-go/zipx でやったときはならなかった。","ts":"1612786016.063900","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"P1K=3"}]},{"client_msg_id":"B525CBA2-A274-484E-82C8-AE271ABD6174","type":"message","user":"UDDCM376D","text":"\u003chttps://ja.m.wikipedia.org/wiki/ZIP_(%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88)|https://ja.m.wikipedia.org/wiki/ZIP_(ファイルフォーマット)\u003e","ts":"1612786032.064200","thread_ts":"1612783990.058300","attachments":[{"fallback":"wikipedia: ZIP (ファイルフォーマット)","id":1,"author_name":"Wikipedia","author_link":"https://ja.wikipedia.org/","title":"ZIP (ファイルフォーマット)","title_link":"https://ja.m.wikipedia.org/wiki/ZIP_(%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88)","text":"ZIP（ジップ）は、データ圧縮やアーカイブのフォーマット。Windowsでよく使用されるフォーマットである。","image_url":"https://upload.wikimedia.org/wikipedia/commons/9/9c/The_Unarchiver_zip.png","blocks":null,"service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","from_url":"https://ja.m.wikipedia.org/wiki/ZIP_(%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88)","original_url":"https://ja.m.wikipedia.org/wiki/ZIP_(%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88)"}],"parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"wOQ"}]},{"client_msg_id":"5DE9E739-CA16-4089-9DB0-393D40E41DFA","type":"message","user":"UDDCM376D","text":"なるほど、セントラルディレクトリでファイルごとのオフセットが書いてあるなら、たしかに並列できるなぁ","ts":"1612786071.065200","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"2gn9g"}]},{"client_msg_id":"BFA94929-5E82-4E01-A816-BEC96D5F87DA","type":"message","user":"UDDCM376D","text":"I/Oバウンド、まだよく分かってないんで調べます","ts":"1612786094.066000","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"JL+7"}]},{"client_msg_id":"EDEFCC40-F4AD-4272-B121-4A225217FF29","type":"message","user":"UDDCM376D","text":"\u003chttps://yohei-a.hatenablog.jp/entry/20120205/1328432481|https://yohei-a.hatenablog.jp/entry/20120205/1328432481\u003e","ts":"1612786150.066300","thread_ts":"1612783990.058300","attachments":[{"fallback":"ablog: CPUバウンドとI/Oバウンド - ablog","id":1,"title":"CPUバウンドとI/Oバウンド - ablog","title_link":"https://yohei-a.hatenablog.jp/entry/20120205/1328432481","text":"[Web開発者のための]大規模サービス技術入門 ―データ構造、メモリ、OS、DB、サーバ/インフラ (WEB+DB PRESS plusシリーズ)作者: 伊藤直也,田中慎司出版社/メーカー: 技術評論社発売日: 2010/07/07メディア: 単行本（ソフトカバー）購入: 80人 クリック: 1,849回この商品を含むブログ (133件) を見るP.41 一般的に負荷は大きく二つに分類されます。 CPU負荷 I/O負荷 たとえば、大規模な科学計算を行うプログラムがあったとして、そのプログラムはディスクとの入出力（Input/Output、I/O）は行わないが、処理が完了するまでに相当の時間を要…","thumb_url":"https://images-fe.ssl-images-amazon.com/images/I/51xlTEcCILL._SL160_.jpg","blocks":null,"ts":1328432481,"service_name":"ablog","service_icon":"https://yohei-a.hatenablog.jp/icon/touch","thumb_width":104,"thumb_height":160,"from_url":"https://yohei-a.hatenablog.jp/entry/20120205/1328432481","original_url":"https://yohei-a.hatenablog.jp/entry/20120205/1328432481"}],"parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"b/U"}]},{"client_msg_id":"46C95944-3AA0-4737-A366-24ACE35FB3DB","type":"message","user":"UDDCM376D","text":"ディスクが速ければ速いほど、検索にかかる時間は短くなります。I/Oに負荷をかける種類のプログラムということで、「I/Oバウンドなプログラム」と呼ばれます。","ts":"1612786166.066700","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"bTc"}]},{"client_msg_id":"B24BAC97-1F7F-46C0-80EA-1261B2571A8C","type":"message","user":"UDDCM376D","text":":rikai: ","ts":"1612786172.067000","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"k2h/V"}]},{"client_msg_id":"0762f67d-d403-416e-b5f3-42d82bebfaff","type":"message","user":"UNJ2DANJC","text":"gzipはありますね。でも大きなファイルじゃないと意味ないよって書いてある。\n\u003chttps://github.com/klauspost/pgzip\u003e","ts":"1612786209.067200","thread_ts":"1612783990.058300","attachments":[{"fallback":"GitHub: klauspost/pgzip","id":1,"title":"klauspost/pgzip","title_link":"https://github.com/klauspost/pgzip","text":"Go parallel gzip (de)compression. Contribute to klauspost/pgzip development by creating an account on GitHub.","thumb_url":"https://avatars.githubusercontent.com/u/5663952?s=400\u0026v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/github.png","thumb_width":400,"thumb_height":400,"from_url":"https://github.com/klauspost/pgzip","original_url":"https://github.com/klauspost/pgzip"}],"parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"FmU"}]},{"client_msg_id":"1b455ae8-f247-4f71-8152-aee4cc6b893f","type":"message","user":"U06BRP8VD","text":"1プロック900KBくらいでしたっけ…ちょっと記憶があやふやだな。可変だった気もするが","ts":"1612786292.067500","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"itL"}]},{"client_msg_id":"42250570-F233-45D4-BC4F-DA7377F5FE72","type":"message","user":"UDDCM376D","text":"ほほぉ\ngzipも行けるんか","ts":"1612786716.068100","thread_ts":"1612783990.058300","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Q7tOi"}]},{"client_msg_id":"e98787da-132e-4cfd-b601-8209456eb147","type":"message","user":"U06BRP8VD","text":"新しいというと違うんだけど、具体的なことがないんですよね。","ts":"1612783193.053700","thread_ts":"1612782725.052000","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"cpK"}]}]
