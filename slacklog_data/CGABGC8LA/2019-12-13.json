[{"type":"message","user":"URMM16KA8","text":"<@URMM16KA8> has joined the channel","ts":"1576220655.474400","subtype":"channel_join","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"22b5d7df-e56f-45cf-b965-903a3623bb7f","type":"message","user":"U06BRP8VD","text":"go tool pprof で、複数のpprofを1プロセスで比較しながら見るってできないかしら?","ts":"1576222816.475200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"frvN"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"URQDW4JUE","text":"<@URQDW4JUE> has joined the channel","ts":"1576224761.475600","subtype":"channel_join","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"59e195fc-5850-428d-8fde-a559b17a0102","type":"message","user":"U8CC7MDCL","text":"goに直接的に関係ないかもなのですが、\nディレクトリ配下からファイル一覧取得してそれぞれ並行処理するようなツール作ろうと思ってます。\n未処理/処理中みたいなステータス管理が必要なのかなーと漠然と思ってるのですがどう管理するのがいいんですかね。\n`type Trget struct {\n  status int\n  filename string\n}\ntype Targets []Target`\n\nみたいにするかインメモリデータベースとか使っちゃうか\nなんか書いてて規模によるって思ってきた…","ts":"1576236883.485700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Mc3"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"065737d4-1044-43e8-8aa8-3e1e6003adb1","type":"message","user":"U06BRP8VD","text":"ん? なんでDBいるの? 途中でプログラムが止まる(&amp;再開する)可能性がある?","ts":"1576237088.486300","edited":{"user":"U06BRP8VD","ts":"1576237118.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"tPwt"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"a0c95ca1-17f2-4af3-92b5-90ab1e369032","type":"message","user":"U06BRP8VD","text":"そうでないならファイルをみつけたら `go func(name string){...}(foundName)` しちゃえば良い。もしも並列度を管理したいなら、goroutine内でsemaphore (<https://godoc.org/golang.org/x/sync/semaphore>) で制御すれば良さげだけど?","ts":"1576237220.487800","thread_ts":"1576237220.487800","attachments":[{"fallback":"Package semaphore","id":1,"title":"Package semaphore","title_link":"https://godoc.org/golang.org/x/sync/semaphore","text":"Package semaphore provides a weighted semaphore implementation.","blocks":null,"service_name":"godoc.org","service_icon":"https://godoc.org/favicon.ico","from_url":"https://godoc.org/golang.org/x/sync/semaphore","original_url":"https://godoc.org/golang.org/x/sync/semaphore"}],"reply_count":2,"replies":[{"user":"U06BRP8VD","ts":"1576237644.489700"},{"user":"U8CC7MDCL","ts":"1576237989.493400"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"iMHb"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"e2b8b759-4167-475f-aec9-88941e26ccf0","type":"message","user":"U06BRP8VD","text":"あとgo全く関係なくなるけど、処理内容が別プログラムですでにあるなら\n\n`find . -type f | parallel ....` みたいに GNU parallel (<https://ja.wikipedia.org/wiki/GNU_parallel>) 使う手もありますよ～","ts":"1576237300.489200","attachments":[{"fallback":"wikipedia: GNU parallel","id":1,"author_name":"Wikipedia","author_link":"https://ja.wikipedia.org/","title":"GNU parallel","title_link":"https://ja.wikipedia.org/wiki/GNU_parallel","text":"GNU parallel (グヌー・パラレル) は、Unix系OSのコマンドラインユーティリティである。Unixシェル上でコマンドの並列実行を可能にする。\nGNU parallelはOle TangeによってPerlで書かれ、GNU GPL v3+の下で配布されている。","image_url":"https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Gnu-parallel.svg/1200px-Gnu-parallel.svg.png","blocks":null,"service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","from_url":"https://ja.wikipedia.org/wiki/GNU_parallel","original_url":"https://ja.wikipedia.org/wiki/GNU_parallel"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Syl"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"a5330e98-40c7-4a7e-8298-71d08fb4ed3e","type":"message","user":"U06BRP8VD","text":"ちょっと違うけどZIPの解凍を中身を並行してやってるサンプル。exCtxの中身が変わることで並列度(同時実行されるgoroutineの数)を制限したりしなかったりしてる。\n\n<https://github.com/koron-go/zipx/blob/2c6b649b4076aba946694ced2458ba68b495dd1e/zipx.go#L70-L90>","ts":"1576237644.489700","thread_ts":"1576237220.487800","attachments":[{"fallback":"GitHub: koron-go/zipx","id":1,"title":"koron-go/zipx","title_link":"https://github.com/koron-go/zipx/blob/2c6b649b4076aba946694ced2458ba68b495dd1e/zipx.go#L70-L90","text":"zip extraction utility. Contribute to koron-go/zipx development by creating an account on GitHub.","thumb_url":"https://avatars3.githubusercontent.com/u/37774098?s=400&v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/github.png","thumb_width":400,"thumb_height":400,"from_url":"https://github.com/koron-go/zipx/blob/2c6b649b4076aba946694ced2458ba68b495dd1e/zipx.go#L70-L90","original_url":"https://github.com/koron-go/zipx/blob/2c6b649b4076aba946694ced2458ba68b495dd1e/zipx.go#L70-L90"}],"parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"DD1V"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"1502e958-0e15-4bd9-a30f-e7179379a136","type":"message","user":"U8CC7MDCL","text":"業務の中でファイル置いとくとscpしてくれるツールがあるんですがリソース潤沢な割にwhile read lineなシェルで一つづつ処理してるんでいろいろもったいないなーと思って。\nパラレル処理しやすいgoで書きなおすのもありなのでは？！ってなったんですが\n~gunu~ GNU parallelとかいうそのまんまなアレがあったんですね…","ts":"1576237945.493300","edited":{"user":"U8CC7MDCL","ts":"1576238166.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"lzBG"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"2b963aed-8bf0-4e6c-a50e-26a64bd0697d","type":"message","user":"U8CC7MDCL","text":"じっくり読ませて頂きます…","ts":"1576237989.493400","thread_ts":"1576237220.487800","parent_user_id":"U06BRP8VD","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"dvdL"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"6c6ba041-590f-4dcc-a1b7-06cff0ef6cf8","type":"message","user":"U06BRP8VD","text":"scpってことはファイルの同期が目的なら rsync のほうが良いかもですね。fsnotifyで監視してrsyncをトリガーする感じが、お手軽かつ無駄が少ないかと。\n<https://github.com/fsnotify/fsnotify>","ts":"1576238198.495300","attachments":[{"fallback":"GitHub: fsnotify/fsnotify","id":1,"title":"fsnotify/fsnotify","title_link":"https://github.com/fsnotify/fsnotify","text":"Cross-platform file system notifications for Go. Contribute to fsnotify/fsnotify development by creating an account on GitHub.","thumb_url":"https://avatars1.githubusercontent.com/u/8013877?s=400&v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/github.png","thumb_width":400,"thumb_height":400,"from_url":"https://github.com/fsnotify/fsnotify","original_url":"https://github.com/fsnotify/fsnotify"}],"edited":{"user":"U06BRP8VD","ts":"1576238219.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"bbdtG"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"9407097a-2d9a-4f3c-bbd1-d2ccba56334f","type":"message","user":"U06BRP8VD","text":"# ここでfsnotifyがgo製なのでgoに戻ってきた(といえるのでは)w","ts":"1576238250.495900","edited":{"user":"U06BRP8VD","ts":"1576238265.000000"},"team":"T03C4RC8V","reactions":[{"name":"fukaikousatsu","count":1,"users":["U8CC7MDCL"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Je=n"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"4cb8862c-6dda-472a-80e1-803350057615","type":"message","user":"U8CC7MDCL","text":"もーちょいおさまり良さそうなアレ考えてみます。\nありがとうございます\n（gnu parallelとても良さそうだった）","ts":"1576238640.498000","team":"T03C4RC8V","reactions":[{"name":"+1","count":1,"users":["U06BRP8VD"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"R8E9"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"}]
