[{"client_msg_id":"42b0b327-cca4-4721-82cc-904801498528","type":"message","user":"UNJ2DANJC","text":"Goのプロジェクトで使うCLIツールの管理方法ってこれが今もデファクトですかね。よくわからない。。。<https://marcofranssen.nl/manage-go-tools-via-go-modules/>","ts":"1578050157.399600","attachments":[{"fallback":"Marco Franssen: Manage Go tools via Go modules","id":1,"title":"Manage Go tools via Go modules","title_link":"https://marcofranssen.nl/manage-go-tools-via-go-modules/","text":"In this blog I will cover how I’m managing and versioning the tools my Go projects depend on. Go Modules are available since Go 1.11. Using Go Modules you can manage the dependencies for your project.","thumb_url":"https://marcofranssen.nl/images/955a9c20087d2569d6c292c451781e31ed7cac8d.jpg","blocks":null,"service_name":"Marco Franssen","service_icon":"https://marcofranssen.nl/images/icons/icon-152x152.png","thumb_width":1200,"thumb_height":800,"from_url":"https://marcofranssen.nl/manage-go-tools-via-go-modules/","original_url":"https://marcofranssen.nl/manage-go-tools-via-go-modules/"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"kXdRs"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"72b471f8-ebea-49c2-84fc-7a7c1f3f5cd5","type":"message","user":"UG6DF6W87","text":"あんまり気にせずやってました\nなるほどこうすればツールの version 固定出来るんですね","ts":"1578050620.401000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"T63Xu"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"82dd0716-c49d-4030-9843-ce698f60271b","type":"message","user":"UG6DF6W87","text":"これまで、単純に Makefile に go get 書きまくる位しかやってなかった...","ts":"1578050943.406800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"XHAN"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"030301e8-c300-470c-8ff9-1bcfd39363cf","type":"message","user":"UDDCM376D","text":"なるほど\nこういうやり方があるのか","ts":"1578051014.407500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"jd=eE"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"4886d136-6495-4bda-a1d5-51d415baa5b6","type":"message","user":"UNJ2DANJC","text":"Makefileにgo getベタ書きも別に悪くはないんですけど-uつけるとindirectで間接依存を更新してしまうのでgo.mod, go.sumに差分が出てしまうんですよね。","ts":"1578051105.409200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"vhF"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"3defccdf-2920-4ae3-a632-15d8efa7cc28","type":"message","user":"UG6DF6W87","text":"そうですね\nこれまではそれを甘んじて受け入れて、ハマったやつが直す、というババ抜き方式でした","ts":"1578051169.411700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Pcll"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"d252d001-0979-4284-986f-f01d3f32906b","type":"message","user":"UG6DF6W87","text":"まぁちゃんと go mod tidy してればいいはずではあるんですが","ts":"1578051210.412900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"2Ps"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"f894e2fe-d0f6-491b-a7bd-30b453538331","type":"message","user":"UNJ2DANJC","text":"tools.go方式はもともと本家のissueでも紹介されてたんですけどこの記事のawkからのxargs go installというのはなんかハッキーでモニョる","ts":"1578051239.413200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"pqq"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"578b555b-130a-4a55-a292-5733b9b20d1f","type":"message","user":"UG6DF6W87","text":"たしかに\ngo mod download ではダメなんですっけ","ts":"1578051292.414200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"VJauB"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"77fabd4e-c1ea-4413-a99d-369178613f69","type":"message","user":"UNJ2DANJC","text":"go mod downloadだと多分GOPATH/pkg/modへのsource fetchまでだったような...","ts":"1578051345.414900","edited":{"user":"UNJ2DANJC","ts":"1578051392.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"BlzD"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"a62c0474-a4aa-45ab-a321-34783f1c2c02","type":"message","user":"UG6DF6W87","text":"あーなるほど...","ts":"1578051367.415400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Di3p"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"95a95cb3-e653-42ce-adcf-233ee8c5a653","type":"message","user":"UG6DF6W87","text":"他やるとしたら、いっそバイナリをリポジトリに上げるとか...?","ts":"1578051441.416800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"5BQaC"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"10459399-06ff-4cd0-811f-c06ee9baa04a","type":"message","user":"UG6DF6W87","text":"go.mod 可能な限り汚したくない、という思いもあって悩ましいですね","ts":"1578051611.420500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Whcl"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"42dd3176-0978-45a7-b6b4-d41d01f9a366","type":"message","user":"UNJ2DANJC","text":"ビルドが通らないとか脆弱性が〜みたいなよほどの問題がない限りindirectで間接依存を上げてしまうのは個人的にはちょっとモニョりますね。semverを守っていないライブラリもありますし。","ts":"1578051621.420600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"dO2"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"4ff76bf9-4289-4f03-865a-ff57901b3553","type":"message","user":"UNJ2DANJC","text":"正直linux, osx, winのバイナリをgithub releaseとかにあげておいてみんなそれをDLして使うという運用も考えました笑","ts":"1578051746.422000","team":"T03C4RC8V","reactions":[{"name":"wakaru","count":1,"users":["UG6DF6W87"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"/oDb8"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"1a801607-e61a-4a63-bbbe-80394f816e5b","type":"message","user":"UG6DF6W87","text":"でも、たしかに他から使われる予定のない最終成果物であるなら、tools.go のやり方は良さそうですね\nxargs するとこが無理矢理感あるのはそうですが...","ts":"1578051971.425200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"i6D"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"2348e781-0f48-444a-b89a-5c66c01b911d","type":"message","user":"UG6DF6W87","text":"// 正直 golint 使ってたら vendor とか他のツールが無視するディレクトリ見てしまう問題を回避するために xargs 使って似たようなことするし、それやってれば xargs go install も許容できるな","ts":"1578052054.427300","edited":{"user":"UG6DF6W87","ts":"1578052279.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"iRe"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"8618368d-ae4a-42bf-9409-51464fbb66e7","type":"message","user":"UG6DF6W87","text":"開発ツールをまとめて一つのバイナリにして、特定のディレクトリ内で管理してくれるツールとかあればよりよいんですかね??\nやっぱバイナリを Git リポジトリに上げるだなんて言語道断...?\nGit LFS 使えばいい感じになりそう...? // LFS 使ったことなし","ts":"1578052871.431900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"+i1bK"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"9009c963-ce6f-4a06-8328-ef116ece6cff","type":"message","user":"UDDCM376D","text":"Dockerを使うという手もありかも","ts":"1578053400.432300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Xnhgu"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"dad23fed-1b92-421e-8a40-2d7305c91384","type":"message","user":"UDDCM376D","text":"必要なバイナリが入っているイメージを作ってそれを配るとか","ts":"1578053438.432900","team":"T03C4RC8V","reactions":[{"name":"naruhodo","count":1,"users":["UG6DF6W87"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"kol"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"aea58887-2870-4047-8b94-a1579a2d613d","type":"message","user":"UDDCM376D","text":"<http://sairoutine.hatenablog.com/entry/2017/12/02/182827>","ts":"1578056094.433200","attachments":[{"fallback":"まるまるこふこふ: 【翻訳】goroutine の仕組み - まるまるこふこふ","id":1,"title":"【翻訳】goroutine の仕組み - まるまるこふこふ","title_link":"http://sairoutine.hatenablog.com/entry/2017/12/02/182827","text":"訳者による概要 Krishna Sundarram 氏の記事「How Goroutines Work」の翻訳です。 「goroutine とは軽量スレッドである」という説明に対して抱くであろう 「どのようにして並行処理を実現しているのか」「既存のスレッド処理と何が違うのか」「なぜ軽量なのか」という疑問を解消する文章です。 とても良い文章なのですが、現在リンク切れになっており、 とてももったいないことだと思ったので、日本語に翻訳しました。 原文: How Goroutines Work (2017/12/02 現在、リンク切れ) golang の紹介 もしあなたが golang 初心者で、並行処…","image_url":"https://ogimage.blog.st-hatena.com/12921228815717649464/8599973812323035645/1512206907","blocks":null,"ts":1512206907,"service_name":"まるまるこふこふ","service_icon":"https://cdn.blog.st-hatena.com/images/touch-icon-iphone-retina.png","from_url":"http://sairoutine.hatenablog.com/entry/2017/12/02/182827","original_url":"http://sairoutine.hatenablog.com/entry/2017/12/02/182827"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"CNw"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"615c4e61-f818-445b-967e-c51b9b3df093","type":"message","user":"UDDCM376D","text":"goroutineの仕組みについて調べているなう\n\n&gt; goroutine は、メモリを大量に必要としません。スタック領域では 2kB しか消費せず、必要に応じてヒープ領域を割り当てたり開放したりします。\ngoroutineがメモリのスタック領域とヒープ領域をどのように使っているのだろう…？","ts":"1578056159.434400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"FORW2"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"db022429-cc21-4729-b010-ff5fa58d7986","type":"message","user":"UKHUVMBJR","text":"ツールのバージョン固定は公式ではまだ解決されてないですねえ\nサードパーティのこういうのはある\n<https://github.com/myitcv/gobin|https://github.com/myitcv/gobin>","ts":"1578056450.435600","attachments":[{"fallback":"GitHub: myitcv/gobin","id":1,"title":"myitcv/gobin","title_link":"https://github.com/myitcv/gobin","text":"gobin is an experimental, module-aware command to install/run main packages. - myitcv/gobin","thumb_url":"https://avatars0.githubusercontent.com/u/3374574?s=400&v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/github.png","thumb_width":254,"thumb_height":254,"from_url":"https://github.com/myitcv/gobin","original_url":"https://github.com/myitcv/gobin"}],"team":"T03C4RC8V","reactions":[{"name":"eyes","count":1,"users":["UG6DF6W87"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Z1Ym"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"18c66fec-e462-49f3-b3ac-8f5e2d909af1","type":"message","user":"UG6DF6W87","text":"goroutine が用意する初期のスタック領域が 2kB だと解釈してたけど間違ってそう","ts":"1578058480.439100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Pn4fU"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"e2db9bb2-f95c-4e3e-b605-e44fc86c0b1f","type":"message","user":"UDDCM376D","text":"<https://medium.com/@riteeksrivastava/a-complete-journey-with-goroutines-8472630c7f5c>","ts":"1578058552.439300","attachments":[{"fallback":"Medium: A complete journey with Goroutines","id":1,"title":"A complete journey with Goroutines","title_link":"https://medium.com/@riteeksrivastava/a-complete-journey-with-goroutines-8472630c7f5c","text":"When we want things to be done concurrently in Golang, we use Goroutines.","image_url":"https://miro.medium.com/max/1200/1*xjHxBPHZVQP2uMfCT43XnA.jpeg","fields":[{"title":"Reading time","value":"7 min read","short":true}],"blocks":null,"ts":1541737186,"service_name":"Medium","service_icon":"https://cdn-images-1.medium.com/fit/c/152/152/1*8I-HPL0bfoIzGied-dzOvA.png","from_url":"https://medium.com/@riteeksrivastava/a-complete-journey-with-goroutines-8472630c7f5c","original_url":"https://medium.com/@riteeksrivastava/a-complete-journey-with-goroutines-8472630c7f5c"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"KHbn9"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"67c815cc-9731-46ed-949f-ce5c6461fe2a","type":"message","user":"UDDCM376D","text":"この記事はスタック領域が増えたり減ったりすると言っていますが、引用元の記事がさっきはった記事の原文","ts":"1578058584.440100","thread_ts":"1578058584.440100","reply_count":1,"replies":[{"user":"UDDCM376D","ts":"1578058728.441600"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"YAKc"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"7ec4feb0-c85a-46fb-a105-8f141f4d211a","type":"message","user":"U06BRP8VD","text":"ぶっちゃけ多人数でやる場合にはdocker image用意してやるとよいです。","ts":"1578058659.441400","edited":{"user":"U06BRP8VD","ts":"1578058668.000000"},"team":"T03C4RC8V","reactions":[{"name":"naruhodo","count":1,"users":["UG6DF6W87"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"0vx"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"ec63efff-e9df-40ed-9569-0df66b5bcd3b","type":"message","user":"UDDCM376D","text":"<https://moro-archive.hatenablog.com/entry/2014/09/11/013520>\nこのブログのメモリ構造体の定義をもとに考えるとヒープ領域とスタック領域が全然役割が違うので、goroutineがどのようにスタックとヒープを使うのかを知らないと行けない感じ","ts":"1578058728.441600","thread_ts":"1578058584.440100","attachments":[{"fallback":"もろず blog: イケてるエンジニアになろうシリーズ 〜メモリとプロセスとスレッド編〜 - もろず blog","id":1,"title":"イケてるエンジニアになろうシリーズ 〜メモリとプロセスとスレッド編〜 - もろず blog","title_link":"https://moro-archive.hatenablog.com/entry/2014/09/11/013520","text":"最近はとても便利なプラットフォームがいっぱいあって、 詳細な中身を意識しなくても簡単に使えるという素晴らしい時代ですが、 深くまで突っ込んで考えないといけない場面が たまーーーーーーーに でてきますその時になって初めて、 誰かが用意してくれた快適な環境を使っていただけで自分では何も解決できない という現実を叩きつけられるわけです 大げさに言いましたすみません ちょっと前に仕事でサーバーのパフォーマンス調査をする機会があり、 その中で \"プロセス\" と \"スレッド\" って一体何が違うの！？ って疑問にぶち当たりましたわかるような、わからないような 何となくわかったつもりになっている事でもそろそろ…","image_url":"http://cdn-ak.f.st-hatena.com/images/fotolife/c/chanmoro999/20140911/20140911012444.png","blocks":null,"ts":1410363000,"service_name":"もろず blog","service_icon":"https://cdn.image.st-hatena.com/image/apple_touch_icon/4f6008f36a3c62ed6c983eb2eb8ef8c06af315ea/version=1/https%3A%2F%2Fcdn.user.blog.st-hatena.com%2Fcustom_blog_icon%2F91550473%2F1514254679469136","from_url":"https://moro-archive.hatenablog.com/entry/2014/09/11/013520","original_url":"https://moro-archive.hatenablog.com/entry/2014/09/11/013520"}],"parent_user_id":"UDDCM376D","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"bsy0"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"43ef7ebb-4f32-44a1-8cfc-149e0bc48d2a","type":"message","user":"UG6DF6W87","text":"なら Go ランタイムが goroutine 生成に必要なメモリ空間が 2kB ってことかな\n多分その中に goroutine 内部の変数とかが使うメモリ領域もあるはずで、変数作りすぎたりして最初に用意したメモリ使い切るとヒープのメモリも持っていかれるってことですかね\n// goroutine が使うメモリ空間は動的に変わるはず...","ts":"1578059267.448000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"YnS"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"US83H0U8N","text":"<@US83H0U8N> has joined the channel","ts":"1578059667.454100","subtype":"channel_join","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"2e9530c9-0424-43d7-b338-887388998501","type":"message","user":"UG6DF6W87","text":"goroutine は thread ではないので OS の管轄ではなく Go ランタイムがスケジューリングやメモリ割当、生成をしてて\nイメージとしては `type Goroutine struct { /* */ }` の初期化に必要なメモリ空間が 2kB である、というのと同じはず...\n// さっきから\"はず\"しか言ってないので私も詳しい人の話を聞きたい","ts":"1578059768.456200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"gQV8R"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"76b8f750-2c4c-41dc-aeaf-b1aec7f8a286","type":"message","user":"UG6DF6W87","text":"// go/src/runtime 何回も読もうとするけど、何もわからんすぎて何もわからんという気持ちになる","ts":"1578060601.456500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"5KXEf"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"6b49a373-a5bc-4832-a667-7783f0aef452","type":"message","user":"UDDCM376D","text":"ひとまず、前提知識が足りていないので、こちらのブログを読んで、メモリとプロセス、スレッドについて概要は掴みました\n<https://moro-archive.hatenablog.com/entry/2014/09/11/013520>","ts":"1578060866.457600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"cbo2l"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"b480ad09-b5bf-41ef-a462-70e5b51de7b8","type":"message","user":"UDDCM376D","text":"現時点わかっていることは\n\n• goroutineはスレッドではない\n• goroutineは並行処理であって、並列処理ではない\n• Goのruntimeでgoroutineの生成、破棄、管理をしているのでコストが低い\n• goroutineのメモリ消費が低い、スタック領域は2kb、必要に応じてヒープ領域の増減を行う\nわかっていないこと\n• Goのruntimeが具体的にgoroutineをどのように管理しているのか（どうやらOSのスレッドに基づくらしい）\n• goroutineのメモリの使い方、具体的にどの領域をどのように使っているのか","ts":"1578061175.462300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"r6L4y"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"491291a2-68af-4c2f-93a8-0d5b7f43770e","type":"message","user":"UG6DF6W87","text":"goroutine のスケジューリング(管理)の話は <https://www.oreilly.co.jp/books/9784873118468/> の最後に軽く触れられてました\n// 私はまだ理解できてないです...","ts":"1578061557.464900","attachments":[{"fallback":"Go言語による並行処理","id":1,"title":"Go言語による並行処理","title_link":"https://www.oreilly.co.jp/books/9784873118468/","text":"シンプルな言語仕様と手厚い並行処理機能で多くのプログラマの心を捉えるGo言語。いまではサーバーサイドでのプログラミングやコンテナツールの実装言語など、さまざまな分野で活用されています。本書は、Goの並行処理の設計哲学、言語の機能、また実際のプログラミングテクニックや並行処理の使い方、システムに導入する際のベストプラクティスとパターン、その内部構造までを簡潔にまとめた書籍です。 普段からGoでプログラミングをしているプログラマや、並行処理について学習したいプログラマが、新たな知識を身につけるのに良い一冊となるでしょう。 ［本書のサポートリポジトリ］","thumb_url":"https://www.oreilly.co.jp/books/images/picture_large978-4-87311-846-8.jpeg","blocks":null,"service_name":"oreilly.co.jp","service_icon":"https://www.oreilly.co.jp/favicon.ico","thumb_width":515,"thumb_height":660,"from_url":"https://www.oreilly.co.jp/books/9784873118468/","original_url":"https://www.oreilly.co.jp/books/9784873118468/"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"eTz0Z"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"48eaf03e-d819-487e-99df-6ba348b9d32f","type":"message","user":"UG6DF6W87","text":"<https://ota42y.com/blog/2018/07/17/goroutine/>\n概要はこの記事で触れられてますね","ts":"1578061637.465500","attachments":[{"fallback":"goroutineの動き方を調べた","id":1,"title":"goroutineの動き方を調べた","title_link":"https://ota42y.com/blog/2018/07/17/goroutine/","text":"shinjuku.rbで話した内容です。 が、スライドだけだとよくわからないのでもう少し文章を補足した版を上げておきます。","blocks":null,"ts":1531782037,"service_name":"ota42y.com","service_icon":"https://ota42y.com/favicon.ico","from_url":"https://ota42y.com/blog/2018/07/17/goroutine/","original_url":"https://ota42y.com/blog/2018/07/17/goroutine/"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"hvLP"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"20158320-2589-485c-b7ca-40fa1324efbc","type":"message","user":"UG6DF6W87","text":"<https://niconegoto.hatenadiary.jp/entry/2017/04/11/092810>\nもう少し細かそう","ts":"1578061788.465900","attachments":[{"fallback":"niconegoto Blog: GoConで発表してきたのでついでにruntime以下の知識をまとめていく #golang - niconegoto Blog","id":1,"title":"GoConで発表してきたのでついでにruntime以下の知識をまとめていく #golang - niconegoto Blog","title_link":"https://niconegoto.hatenadiary.jp/entry/2017/04/11/092810","text":"3/25に行われたGoConで\"How Communicating Sequential Goroutines Work\"という発表をしてきました。 当初僕はCommunicating Sequential Processesについての話しをする予定だったのですが、時間内にとても発表できそうな内容ではなかったため、Concurrency全般についての話をしました。 そのため、ここではその際触れられなかったgoroutineの実装の話しやCSPの話しなどを含めてGoのruntimeについて何回かに分けてまとめていきたいと思います。今回は主にgoroutineについてです。 GoのConcurre…","image_url":"https://cdn-ak.f.st-hatena.com/images/fotolife/n/niconegoto/20170411/20170411085818.png","blocks":null,"ts":1491870490,"service_name":"niconegoto Blog","service_icon":"https://cdn.image.st-hatena.com/image/apple_touch_icon/e79ae2f0873195f48be49cdbe7d04dfb001fe16c/version=1/https%3A%2F%2Fcdn.user.blog.st-hatena.com%2Fcustom_blog_icon%2F122592713%2F1514204463998797","from_url":"https://niconegoto.hatenadiary.jp/entry/2017/04/11/092810","original_url":"https://niconegoto.hatenadiary.jp/entry/2017/04/11/092810"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"x6C7"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"9d1a0221-adfd-4e31-8589-5652559ef68f","type":"message","user":"UDDCM376D","text":"&gt; <https://niconegoto.hatenadiary.jp/entry/2017/04/11/092810>\n読んでいるけど、わかりやすい","ts":"1578062283.466300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"osXm"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"}]
