[{"client_msg_id":"55d5f671-71ee-48b3-9543-6395785a2dba","type":"message","user":"UAZ33BKV2","text":"\u003chttps://ryochack.hatenablog.com/entry/2018/03/23/184943\u003e\nなるほど、これならデバイス系とか通信系のデータの処理が簡素かつ確実にいけるかな...\nあとはバイトオーダーの入れ替えとかそのへんあるとか(まあ、あるだろう)","ts":"1595723700.067200","attachments":[{"fallback":"ryochack.blog: Rustの構造体メモリレイアウト - ryochack.blog","id":1,"title":"Rustの構造体メモリレイアウト - ryochack.blog","title_link":"https://ryochack.hatenablog.com/entry/2018/03/23/184943","text":"Rustの構造体のメモリレイアウトについてのメモ。 Rustで次のような構造体を定義したときに、構造体のメモリレイアウトはどうなるか？ struct Layout { b1: u8, s1: u16, b2: u8, w1: u32, b3: u8, w2: u32, s2: u16, s3: u16, } 検証時のRustのバージョンは次の通り。 stable-x86_64-unknown-linux-gnu rustc 1.24.1 (d3ae9a9e0 2018-02-27) TL;DR 先に結論を書く。 アトリビュート指定によって構造体のメモリレイアウトとサイズは以下のように変化する。…","image_url":"https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryochack/20180323/20180323172547.png","blocks":null,"ts":1521798583,"service_name":"ryochack.blog","service_icon":"https://cdn.blog.st-hatena.com/images/touch-icon-iphone-retina.png","from_url":"https://ryochack.hatenablog.com/entry/2018/03/23/184943","original_url":"https://ryochack.hatenablog.com/entry/2018/03/23/184943"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"=oDbk"}]}]
