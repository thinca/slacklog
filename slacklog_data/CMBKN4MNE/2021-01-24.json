[{"type":"message","user":"UKKJR571V","text":"\u003c@UKKJR571V\u003e has joined the channel","ts":"1611493255.036500","subtype":"channel_join","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"b23d7e3d-0024-4a35-ba24-063cf58b28bd","type":"message","user":"UL6CFN8NR","text":"とはいえ他の多くの言語よりもレビュー辛いというのはありそう。せめて GitHub でも Python と同じように変数の定義ジャンプとかできるようになれば嬉しいんだけどなあ","ts":"1611487609.036000","edited":{"user":"UL6CFN8NR","ts":"1611487617.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"x=J"}]},{"client_msg_id":"797b099f-d84e-459d-897b-d2a7ff34e686","type":"message","user":"UAZ33BKV2","text":"プロジェクトで統制されてるとメモリの問題は回避はできなくないが、他が辛くなったりする...","ts":"1611487380.035100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"EzG"}]},{"client_msg_id":"d71c2b4b-b720-4a4e-81c2-21cf308a3cb5","type":"message","user":"U9S4G0LJW","text":"安全で関数型っぽいC++に見える","ts":"1611487380.035000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Ljh"}]},{"client_msg_id":"9fb21b01-6b86-4748-ae26-0d77d3acbe11","type":"message","user":"U8996GYBF","text":"まぁRailsもTS(React)もチーム開発むずいか・・・","ts":"1611487370.034400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"dWe"}]},{"client_msg_id":"cc12d50f-d420-4dce-9da5-4f0f58f6c065","type":"message","user":"UAZ33BKV2","text":"あれ統制できるひとはプロジェクトマネジメントとプロダクトマネジメントが両方かなりレベルがいる....","ts":"1611487354.033800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"4+1f"}]},{"client_msg_id":"62b41ff9-a97d-422e-ba93-c748e6fb6a45","type":"message","user":"U9S4G0LJW","text":"実際C++つらいが開発の動機だった気がする \u0026gt; Rust","ts":"1611487353.033600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"hB3qa"}]},{"client_msg_id":"4661fbb4-5891-41e2-b9fb-53d0644912f8","type":"message","user":"U03C71D7H","text":"C++ はメモリリークも人間が検出しないといけないからな…","ts":"1611487351.033400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"LYeA"}]},{"client_msg_id":"d2ff1db8-facc-414b-9ba3-b7865f3d212d","type":"message","user":"UAZ33BKV2","text":"C++で統制されたプロジェクトにいたので、統制が大変なのわかる","ts":"1611487334.032300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"TtkCN"}]},{"client_msg_id":"cb6525ed-a45c-4935-bbb5-88d570e24faf","type":"message","user":"UL6CFN8NR","text":"チーム開発をするにせよ、C++ よりは楽だと思います。\nC++ は簡単にカオスになる","ts":"1611487318.032000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"u1eDy"}]},{"client_msg_id":"4c40be6d-2835-46fe-b7fd-26554bf5bce5","type":"message","user":"UAZ33BKV2","text":"あと、こんだけコンパイルエラーが丁寧なので、goが脳死で脳筋で書くなら、rustは脳死でコンパイルエラーを潰して書く、でもいい気がしないでもないw","ts":"1611487295.031500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"bv6g"}]},{"client_msg_id":"f4ce96a8-ed5e-4780-9d22-e9a1a41a0d93","type":"message","user":"U8996GYBF","text":"どの言語でも同じはそうかもしれないけど、Rustは求められる経験値が大分高めな印象ありますね\n絶対チーム開発きつい","ts":"1611487286.031200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"a5Bg"}]},{"client_msg_id":"58a96574-94f2-4e76-b084-47d119e0d042","type":"message","user":"U03C71D7H","text":"そういう場合は Rust 使っちゃダメw","ts":"1611487274.030300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"qTz/R"}]},{"client_msg_id":"4c158518-bbc2-43f5-a08f-d2eac4a6e56b","type":"message","user":"U03C71D7H","text":"経験不足すぎるのは間違いない","ts":"1611487263.029500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"reGs3"}]},{"client_msg_id":"273d4107-3d79-4b4d-9004-b9874af40ad2","type":"message","user":"U9S4G0LJW","text":"メモリの動きなど気にせずにコード書きたい","ts":"1611487261.029200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"8lA0K"}]},{"client_msg_id":"de089a5c-55ca-4982-a285-ef9b4affa71e","type":"message","user":"UAZ33BKV2","text":"(つらいのはわかるけど)","ts":"1611487251.028700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Fjys9"}]},{"client_msg_id":"bdb22102-88f8-412b-a008-7988d592db61","type":"message","user":"UL6CFN8NR","text":"冗長かどうかの検証はたしかに実際に経験を積むしか無さそうですねえ。まあそれはどの言語も同じじゃないかと…","ts":"1611487246.028500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ijG"}]},{"client_msg_id":"65c41161-69c4-4757-8b5e-f88b33303224","type":"message","user":"UAZ33BKV2","text":"あとformatがあれなだけで、メモリの動きはJavaScriptもGoも考えながらやらないとだめではないかと\nOOP(Javaなど)やプロトタイプ(JSとか)は、そこらをクラスとかに投げるかわりに、状態の分散という意味で昨今話題のアレがトレードオフもいえるしなあ","ts":"1611487240.028300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"YR01G"}]},{"client_msg_id":"e212d191-41cb-4ebc-b420-88420aa38341","type":"message","user":"U03C71D7H","text":"「この書き方だとメモリが無駄です」みたいな指摘ができる気がしない","ts":"1611487221.027700","team":"T03C4RC8V","reactions":[{"name":"sorena","count":1,"users":["UL6CFN8NR"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"DX3G"}]},{"client_msg_id":"d3a6a9aa-490f-4b38-be2c-0e1241e61c5f","type":"message","user":"U8996GYBF","text":"実装が冗長なコードかどうかの判定が実際に触ってみないとできないのきつくないです？","ts":"1611487214.027100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"3/s"}]},{"client_msg_id":"275abe3e-13df-48ee-86d6-062430c028b0","type":"message","user":"UAZ33BKV2","text":"まあ、コードレビューはコンパイラとかlintで潰せるのを見る場じゃなくて、ロジックの妥当性を見る場だという意味ではなんとかなるのでは...","ts":"1611487165.025300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"sfH"}]},{"client_msg_id":"beb5e4f3-fa26-475b-bde0-c3f4163af296","type":"message","user":"UL6CFN8NR","text":"コンパイラが指摘するようなエラーはレビューで指摘しなくて良いという事実が Rust の強みですよね。 CI でチェックできる点が多い","ts":"1611487164.025200","edited":{"user":"UL6CFN8NR","ts":"1611487179.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"qB6e"}]},{"client_msg_id":"1fa3e433-40f8-4f53-befb-faba65f82d3c","type":"message","user":"U8996GYBF","text":"逆にこう書けますって言われてもなんで書けるのか分からないと思う","ts":"1611487150.024700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"VWkO"}]},{"client_msg_id":"62a5d3a1-e40a-4ae3-8458-1ab04bc4117c","type":"message","user":"U8996GYBF","text":"今のところコンパイラの気持ちにならないとレビュー不可な部分多すぎる","ts":"1611487119.023800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"T+e"}]},{"client_msg_id":"05527eb9-dffa-4186-bd61-08f1087f8400","type":"message","user":"U03C71D7H","text":"コード見ただけで指摘できる気がしないのわかるw","ts":"1611487117.023700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"6As"}]},{"client_msg_id":"4e6a529d-1e7a-46ef-9cf8-fd9023af6fb2","type":"message","user":"U8996GYBF","text":"Rust、GitHubレベルでレビュー無理な気がする","ts":"1611487095.023100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"WP4Y6"}]},{"client_msg_id":"88e30d6b-7d3f-48ec-89b5-c616986489e4","type":"message","user":"U03C71D7H","text":"Rust って、「目的は同じだけど型とか内部表現だけ違う」ような変数がたくさん出てきうるんだよね。そういうときにいちいち違う名前を付けないといけないのが煩わしいから shadowing できるようになっているのだと思う","ts":"1611487062.022800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"EaRW"}]},{"client_msg_id":"be5f386a-ae18-46ce-8e8f-0c27924e9154","type":"message","user":"U8996GYBF","text":"最近TSとRustってどっちもノウハウが尖りすぎてる言語やってる気がする","ts":"1611486994.021300","edited":{"user":"U8996GYBF","ts":"1611487012.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"FtxA"}]},{"client_msg_id":"a0cea224-ec0c-4c40-9d52-12e43c9d02f5","type":"message","user":"U03C71D7H","text":"\u003chttps://users.rust-lang.org/t/newbie-question-memory-leaks-by-shadowing/9347\u003e","ts":"1611486948.020600","attachments":[{"fallback":"The Rust Programming Language Forum: Newbie question: memory leaks by shadowing?","id":1,"title":"Newbie question: memory leaks by shadowing?","title_link":"https://users.rust-lang.org/t/newbie-question-memory-leaks-by-shadowing/9347","text":"Hi guys, I am giving rust a try as a possible replacement for C++. I am reading through “The Book” (which is BTW excellent) and got surprised by variable binding shadowing. Do I understand it right that it is possible to leak memory by shadowing the variable in the same scope? I mean in principle - I understand that the issue is easily solvable by clippy if need be. \u003chttps://doc.rust-lang.org/book/variable-bindings.html\u003e Note that shadowing a name does not alter or destroy the value it was bo...","fields":[{"title":"Reading time","value":"1 mins :clock2:","short":true},{"title":"Likes","value":"10 :heart:","short":true}],"blocks":null,"ts":1486494806,"service_name":"The Rust Programming Language Forum","from_url":"https://users.rust-lang.org/t/newbie-question-memory-leaks-by-shadowing/9347","original_url":"https://users.rust-lang.org/t/newbie-question-memory-leaks-by-shadowing/9347"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"jh2o"}]},{"client_msg_id":"02ad891e-867d-4c85-b85d-eccc262b475e","type":"message","user":"U03C71D7H","text":"shadowing された変数に名前でアクセスすることはできないが、寿命はスコープの終わりまで続いている、だそうな","ts":"1611486944.020400","team":"T03C4RC8V","reactions":[{"name":"naruhodo","count":1,"users":["UL6CFN8NR"]},{"name":"sorena","count":1,"users":["U01BY3SDBRS"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"WxJj"}]},{"client_msg_id":"ff992f73-c11d-4624-b42c-731b18b6c305","type":"message","user":"U03C71D7H","text":"Rust の shadowing は同一スコープでもできたはず","ts":"1611486819.019500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"=5XUo"}]},{"client_msg_id":"4c352a68-67df-4a1b-9bea-6bda05a1cf68","type":"message","user":"UL6CFN8NR","text":"まあ drop してないからエラーが起きないんでしょうけど…まだそのあたりの挙動をちゃんと理解できてないなあ","ts":"1611486818.019400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"qCG14"}]},{"client_msg_id":"8bd988ce-9089-4d1d-8f76-586cdeaad6ea","type":"message","user":"U9S4G0LJW","text":"スコープ単位じゃなかったっけ、ライフタイムって","ts":"1611486794.018700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Bq7F"}]},{"client_msg_id":"8bc5f164-a802-4d43-9184-abf73cc8405f","type":"message","user":"U03C71D7H","text":"別スコープだったらスコープ抜ければ復活するだろうから保持しているんだろうけど…同一スコープで上書きした場合は drop できそうですよね。してないんだろうか","ts":"1611486786.018500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Eea"}]},{"client_msg_id":"1e82b504-c8fa-4296-9ac3-cfb6423e441d","type":"message","user":"U8996GYBF","text":"明示的にfreeみたいにしないと裏ではdropされてない？","ts":"1611486785.018200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"7Dz"}]},{"client_msg_id":"1d0b961e-fbea-4737-a93a-1288117830ca","type":"message","user":"UL6CFN8NR","text":"shadowing したときはなんで許されるんでしょうね？同名の変数で shadowing したら古い方は drop されるものだと思ってたんですが、そしたら同じエラーが起きるはずですよね","ts":"1611486761.017300","edited":{"user":"UL6CFN8NR","ts":"1611486774.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"PLX9E"}]},{"client_msg_id":"dd6ac708-8f36-4bc2-900a-64fe4a4494ab","type":"message","user":"UL6CFN8NR","text":"私もたぶん thinca さんと同じところで疑問が。","ts":"1611486729.016300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"UFv3"}]},{"client_msg_id":"de86d8a4-81a3-42c2-a005-2aa647544340","type":"message","user":"U7B4ZD49X","text":"monaqaさんが言うように出たらそう書くでいい気がします。これに関しては","ts":"1611486721.016000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"4y1dG"}]},{"client_msg_id":"e7d2812c-8b41-4780-b423-28bc59c1c991","type":"message","user":"U03C71D7H","text":"Rust だとよく同名の変数で shadowing するけど、その場合の変数の寿命の扱いよくわかってないな","ts":"1611486712.015600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"CFG"}]},{"client_msg_id":"f4185e0d-0b77-444f-9b3b-357027c3146a","type":"message","user":"U8996GYBF","text":"メモリの気持ちになりながらコード書くの辛い","ts":"1611486687.014500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"fGg"}]},{"client_msg_id":"5eac2bd5-1c52-469a-90da-ad3d14a0dad3","type":"message","user":"U03C71D7H","text":"たぶんそういうことな気がする","ts":"1611486678.013900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"6hR/6"}]},{"client_msg_id":"5d69b540-2fd6-432d-b413-6c1cae5c6eee","type":"message","user":"U8996GYBF","text":"あー、slice前の元の値を束縛してないと使う時にメモリにあるか保証されてないのか","ts":"1611486663.013500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Ly2S"}]},{"client_msg_id":"ba8a9a36-f126-4d0d-8220-e0f6579e938f","type":"message","user":"U9S4G0LJW","text":"Goのエラーとは本質が違うな","ts":"1611486651.013100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"gtJ"}]},{"client_msg_id":"88536524-7567-498c-ae32-680e26eed434","type":"message","user":"U9S4G0LJW","text":"thincaさんの説明で完全理解した","ts":"1611486643.012700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Cu+"}]},{"client_msg_id":"13a33acf-4d27-442b-83e0-49b8975ab826","type":"message","user":"U8996GYBF","text":"format自体がメモリに束縛されていない\u0026amp;strを返すからエラーになってて、後者はsplitterっていう変数がメモリに束縛された上でメソッドチェインを通してるからOK？","ts":"1611486612.011800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"2nc="}]},{"client_msg_id":"29454fb8-555d-43bb-beda-b67a3ff1ba4a","type":"message","user":"U03C71D7H","text":"`trim_start()` は slice を返す。つまり元の String の一部の参照を返しますね。元の値が消えちゃうからでは?","ts":"1611486582.011100","team":"T03C4RC8V","reactions":[{"name":"naruho","count":1,"users":["U9S4G0LJW"]},{"name":"sorena","count":3,"users":["U7B4ZD49X","UL6CFN8NR","U01BY3SDBRS"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"LTkiL"}]},{"client_msg_id":"956e1c38-30e3-4a6b-b43b-63d3ce4577a1","type":"message","user":"UL6CFN8NR","text":"temporary value dropped ... のエラーは結構私も書いててよく陥るんですよねー。結局ヒントにある通り let binding で特定の値を変数に代入すればだいたい解消するんですけど","ts":"1611486555.009800","edited":{"user":"UL6CFN8NR","ts":"1611486571.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"sPVE"}]},{"client_msg_id":"4ce02e0e-ec6c-4943-a86c-477fa8a92462","type":"message","user":"U9S4G0LJW","text":"format!はマクロなので中の何かが悪さをしてる可能性がありそう","ts":"1611486506.008600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"jvk"}]},{"client_msg_id":"6812bf25-8688-403a-a203-d79d5942017d","type":"message","user":"U8996GYBF","text":"うーん、例えば長めのメソッドチェインだと\n`let pos = splitter.next().unwrap().parse::\u0026lt;usize\u0026gt;().unwrap();` みたいなのが通ってるんですけど、これは所有権を持つ変数が存在する・・・？","ts":"1611486467.008100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"KfThP"}]},{"client_msg_id":"097d3e30-0d95-455e-bf91-4192cd4ac024","type":"message","user":"U03C71D7H","text":"なんか私も見たことある気がするなそれ","ts":"1611486456.007700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"dtca"}]},{"client_msg_id":"e6332c05-ee41-4c0b-b867-597cef69723a","type":"message","user":"U9S4G0LJW","text":"返ってきた値から直接ポインタを取ろうとすると死亡するやつ","ts":"1611486421.006500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Hhg"}]},{"client_msg_id":"13b2cb4d-f429-4600-ad55-9009d6e92307","type":"message","user":"U9S4G0LJW","text":"Goでも似たようなエラーを見たことがあるな","ts":"1611486402.005700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"O2Z"}]},{"client_msg_id":"52779f72-f28c-412b-bf18-f3fd53f2ced2","type":"message","user":"UL6CFN8NR","text":"上のコードだと、所有権を持つ変数が存在しない文字列の参照を引いちゃってるのがだめなんだろうと思います","ts":"1611486371.005200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"lz8"}]},{"client_msg_id":"0701b37c-182e-4a53-9e9b-2590fcae9bf6","type":"message","user":"U03C71D7H","text":"なんとなく束縛すればいいんだなというのはエラーメッセージからわかるけど、理屈をきちんと説明できないな","ts":"1611486370.005100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"2ncPE"}]},{"client_msg_id":"58e9f18c-1956-4d6b-91b7-d5966193bcb2","type":"message","user":"U9S4G0LJW","text":"全然関係ないけど一番上のエラーメッセージをDeepLに放り込んだら「借入中に一時的に値下がり」とか言われて:thinking_face: になってる","ts":"1611486368.004800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"p0K7q"}]},{"client_msg_id":"8d311c16-1e6f-4b89-bc9f-d7f490fc8d67","type":"message","user":"U8996GYBF","text":"とにかくこの手のエラーはメモリに束縛したらOKになるようにしか見えないんだけど、OKな場合とダメな場合の区別が付いてない","ts":"1611486319.003700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"58DLn"}]},{"client_msg_id":"f9f0f831-67f6-4c23-a7d0-6542240f1d17","type":"message","user":"U8996GYBF","text":"まためっちゃ初歩的な質問なんですが、上がダメで下はOKな理由がよく分かっていないです・・・\n```let buffer = format!(\"{} {} {}\", lbuffer, snippet, rbuffer).trim_start();\n\nlet buffer = format!(\"{} {} {}\", lbuffer, snippet, rbuffer)\nlet buffer = buffer.trim_start();```\n```error[E0716]: temporary value dropped while borrowed\n   --\u0026gt; src/main.rs:124:18\n    |\n124 |     let buffer = format!(\"{} {} {}\", lbuffer, snippet, rbuffer).trim_start();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^             - temporary value is freed at the end of this statement\n    |                  |\n    |                  creates a temporary which is freed while still in use\n...\n127 |     println!(\"{}\", buffer);\n    |                    ------ borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)```\nなんですが","ts":"1611486132.002400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"qOqb"}]}]
