[{"client_msg_id":"c4a40b6a-af2a-4db6-9775-699ab5529d58","type":"message","user":"U776661HA","text":"ですよね","ts":"1612969135.135200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"qpn"}]},{"client_msg_id":"1b4102be-2f54-476e-89ee-fc1933edb4fe","type":"message","user":"U01BY3SDBRS","text":"個人的には以前↑のものを触って型が無限に合わない奴になってしまったので、出来るならtokioかactic-stdに素直に乗りたい気もしますが……","ts":"1612968987.135000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"6lSD"}]},{"client_msg_id":"5d72f566-acf6-4e49-867d-38833693785b","type":"message","user":"U01BY3SDBRS","text":"思い出しました\n\u003chttps://github.com/crossbeam-rs/crossbeam|https://github.com/crossbeam-rs/crossbeam\u003e\nこれが低レイヤーのやつですね、mpscなら crossbeam-channel がそれだったはず\nrust-analyzerとかで使ってます、確かtokioでも使ってた気がします","ts":"1612968196.127600","attachments":[{"fallback":"GitHub: crossbeam-rs/crossbeam","id":1,"title":"crossbeam-rs/crossbeam","title_link":"https://github.com/crossbeam-rs/crossbeam","text":"Tools for concurrent programming in Rust. Contribute to crossbeam-rs/crossbeam development by creating an account on GitHub.","thumb_url":"https://avatars.githubusercontent.com/u/26314159?s=400\u0026v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/github.png","thumb_width":400,"thumb_height":400,"from_url":"https://github.com/crossbeam-rs/crossbeam","original_url":"https://github.com/crossbeam-rs/crossbeam"}],"team":"T03C4RC8V","reactions":[{"name":"+1","count":1,"users":["U776661HA"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Cf8"}]},{"client_msg_id":"3113baf7-b0d6-4abb-8ea1-4247b5bb6b02","type":"message","user":"U776661HA","text":"最初 tokio の mpsc 使って書いていたので `while (let ....)` で回しててアホくさいなーと思ってたんですよねぇ","ts":"1612967810.124100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"=4tf"}]},{"client_msg_id":"d08111e2-4aab-4cee-9a9e-771a914b135c","type":"message","user":"U776661HA","text":"いま \u003chttps://github.com/sdroege/async-tungstenite\u003e の返す Sink/Steram を複数のランタイムから扱うために mpsc の Sender/Reader に変換しようとしているんですが futures::StreamExt が使えると forward とかでサクッとできそうだなーというところから tokio/futures-rs の決別に気がついたという感じです","ts":"1612967749.123100","attachments":[{"fallback":"GitHub: sdroege/async-tungstenite","id":1,"title":"sdroege/async-tungstenite","title_link":"https://github.com/sdroege/async-tungstenite","text":"Async binding for Tungstenite, the Lightweight stream-based WebSocket implementation - sdroege/async-tungstenite","thumb_url":"https://avatars.githubusercontent.com/u/301846?s=400\u0026v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/github.png","thumb_width":400,"thumb_height":400,"from_url":"https://github.com/sdroege/async-tungstenite","original_url":"https://github.com/sdroege/async-tungstenite"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Aidr2"}]},{"client_msg_id":"19ac9a5a-49d9-4fbb-adea-72d8d21bb7dd","type":"message","user":"U01BY3SDBRS","text":"後は一応もう少しレイヤーが低いcrateもあったはずなので、どうしてもという時はそれを使うといいかもしれないです","ts":"1612967688.121800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Rdia"}]},{"client_msg_id":"d5204fa8-540d-4ab7-862f-76d3738e968a","type":"message","user":"U776661HA","text":"ですよねぇ","ts":"1612967631.119500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"lUB7L"}]},{"client_msg_id":"8a460ae7-111b-44d6-9dcb-ba7f78fa9a0c","type":"message","user":"U01BY3SDBRS","text":"すごく分かります、tokio派ですが標準と何故決裂したんだ……って気持ちです","ts":"1612967618.119100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"yIge"}]},{"client_msg_id":"aeebca37-e6f9-493c-b069-b3fc488ee508","type":"message","user":"U776661HA","text":"futures に寄せておくと StreamExt とかとシームレスに相互変換できそうだしなぁ","ts":"1612967592.118300","team":"T03C4RC8V","reactions":[{"name":"desune","count":1,"users":["U01BY3SDBRS"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"SFlk"}]},{"client_msg_id":"42ee81f2-1484-447e-bb05-ea6eace7f4ae","type":"message","user":"U776661HA","text":"んーやっぱり futures-rs に寄せるのがいいのかなぁ","ts":"1612967535.116500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"CPYG"}]},{"client_msg_id":"9dafee66-def0-42d9-ad03-2bad6fcb7ec3","type":"message","user":"U776661HA","text":"async-std に期待してるけど Deno のランタイム tokio だしなぁ....","ts":"1612967489.115400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"EH/m"}]},{"client_msg_id":"20d4ae99-653a-450c-a9b7-22cd9ab09c8e","type":"message","user":"U776661HA","text":"僕の考えた最強の async が全てを駆逐して選択肢を一つにして欲しい（暴論","ts":"1612967461.114700","team":"T03C4RC8V","reactions":[{"name":"wakaru","count":2,"users":["U01BY3SDBRS","UL6CFN8NR"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"mVEs"}]},{"client_msg_id":"9c3bed26-4d61-4cbb-9111-e8a3227f3d95","type":"message","user":"U776661HA","text":"これを毎回繰り返すってだけですかね...","ts":"1612967398.114100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"VFA"}]},{"client_msg_id":"7bf88c7b-c0ca-4da6-9aa3-5a4c24f76bf5","type":"message","user":"U776661HA","text":"今回は mpsc どっち？って話で「どっちでもいい、好きなの使え」","ts":"1612967387.113800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"84c"}]},{"client_msg_id":"bd332d05-eb1c-43a8-b4ec-1a3efa90b3e5","type":"message","user":"U776661HA","text":"いや、まぁ答え出てるんでしょうね...","ts":"1612967356.113200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"eClM"}]},{"client_msg_id":"19ae6416-91ee-4449-adcb-1f8b6f742790","type":"message","user":"U776661HA","text":"はい、読んでもわからんという感じです...","ts":"1612967322.113000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"NVJn"}]},{"client_msg_id":"95ccd868-6231-4e63-b021-4977990e2d01","type":"message","user":"U01BY3SDBRS","text":"有名な記事なので既にお読みかもしれませんが……\n\u003chttps://qiita.com/legokichi/items/53536fcf247143a4721c|https://qiita.com/legokichi/items/53536fcf247143a4721c\u003e\n\u003chttps://tech-blog.optim.co.jp/entry/2019/11/08/163000|https://tech-blog.optim.co.jp/entry/2019/11/08/163000\u003e","ts":"1612967198.112200","attachments":[{"fallback":"Qiita: 2019 年の非同期 Rust の動向調査 - Qiita","id":1,"title":"2019 年の非同期 Rust の動向調査 - Qiita","title_link":"https://qiita.com/legokichi/items/53536fcf247143a4721c","text":"この記事は 2018 年の非同期 Rust の動向調査 の続報です。 TL;DR Rust 1.39.0 以降で async/await 構文が使えるようになりました Future を実行するためのランタイムはいままで to...","image_url":"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2\u0026w=1200\u0026mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3D%25202019%2520%25E5%25B9%25B4%25E3%2581%25AE%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%2520Rust%2520%25E3%2581%25AE%25E5%258B%2595%25E5%2590%2591%25E8%25AA%25BF%25E6%259F%25BB%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D90ea7d05d99e6b1424f55f20fd116a44\u0026mark-align=center%2Cmiddle\u0026blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540legokichi%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3D3bf293d6381f741b4fd96f357381648b\u0026blend-align=center%2Cmiddle\u0026blend-mode=normal\u0026s=81aa82ab0430a9763c80bc826fcc7c09","blocks":null,"service_name":"Qiita","service_icon":"https://cdn.qiita.com/assets/favicons/public/apple-touch-icon-ec5ba42a24ae923f16825592efdc356f.png","from_url":"https://qiita.com/legokichi/items/53536fcf247143a4721c","original_url":"https://qiita.com/legokichi/items/53536fcf247143a4721c"},{"fallback":"OPTiM TECH BLOG: Rustの非同期プログラミングをマスターする - OPTiM TECH BLOG","id":2,"title":"Rustの非同期プログラミングをマスターする - OPTiM TECH BLOG","title_link":"https://tech-blog.optim.co.jp/entry/2019/11/08/163000","text":"Rustの非同期プログラミングを、前提知識から無駄知識まで一通り解説します。","image_url":"https://cdn-ak.f.st-hatena.com/images/fotolife/o/optim-tech/20191105/20191105113719.png","blocks":null,"ts":1573198200,"service_name":"OPTiM TECH BLOG","service_icon":"https://tech-blog.optim.co.jp/icon/touch","from_url":"https://tech-blog.optim.co.jp/entry/2019/11/08/163000","original_url":"https://tech-blog.optim.co.jp/entry/2019/11/08/163000"}],"edited":{"user":"U01BY3SDBRS","ts":"1612967308.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ceC"}]},{"client_msg_id":"0ee84998-aea8-4ee5-9e37-1803bbb65150","type":"message","user":"U776661HA","text":"tokio は Stream が別...","ts":"1612967062.111500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"eyjp"}]},{"client_msg_id":"e9451c29-0970-47ee-b927-09c428514758","type":"message","user":"U776661HA","text":"なるほど","ts":"1612966985.111100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"q/fCV"}]},{"client_msg_id":"4ba274c8-4f4a-4c6e-882d-eadaebc808b0","type":"message","user":"U776661HA","text":"\u0026gt;  Tokio brings an async runtime (some runtime is needed to execute futures), and some additional utility to handle with environment in async way: IO, time, unix signals, also synchronization primitives (some of them provided by futures-rs, some not). Tokio is build on futures-rs, but it exports things it uses, so there is no need to depend on futures-rs if you are not using additional things which tokio doesn't reexport.","ts":"1612966976.110700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"SHdS"}]},{"client_msg_id":"4410dca0-3e87-497a-bf04-f0be28ad9350","type":"message","user":"U776661HA","text":"効きたいことを聞いている人っぽい","ts":"1612966516.110300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"KRE"}]},{"client_msg_id":"6be9956b-593f-4dfd-9a62-eb6dde6f29a5","type":"message","user":"U776661HA","text":"\u003chttps://users.rust-lang.org/t/relationship-between-std-futures-futures-and-tokio/38077\u003e","ts":"1612966465.110000","attachments":[{"fallback":"The Rust Programming Language Forum: Relationship between std::futures, futures, and tokio","id":1,"title":"Relationship between std::futures, futures, and tokio","title_link":"https://users.rust-lang.org/t/relationship-between-std-futures-futures-and-tokio/38077","text":"Can someone please break down the relationship between these 3 crates? Additionally, I have a specific use case... I want to create a Stream from an Iterator, create a future from their inner items and then map over those Futures, while ultimately limiting that stream of futures to N concurrent. So it seems the crates/traits I need are in: Iterator -\u0026gt; Stream: tokio::stream::iter Map over them: futures::future::FutureExt Limit to N concurrent: futures::stream::StreamExt And then the basic...","fields":[{"title":"Reading time","value":"1 mins :clock2:","short":true},{"title":"Likes","value":"6 :heart:","short":true}],"blocks":null,"ts":1581354120,"service_name":"The Rust Programming Language Forum","from_url":"https://users.rust-lang.org/t/relationship-between-std-futures-futures-and-tokio/38077","original_url":"https://users.rust-lang.org/t/relationship-between-std-futures-futures-and-tokio/38077"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"TWFG"}]},{"client_msg_id":"039d3628-d1e4-4aaa-940e-8bb6e375fe28","type":"message","user":"U776661HA","text":"だれか道を示してくれw","ts":"1612966438.109800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"v2s"}]},{"client_msg_id":"da4148a5-c39a-4dd6-a637-61ecd2c352d9","type":"message","user":"U776661HA","text":"戦国時代","ts":"1612966340.109400","edited":{"user":"U776661HA","ts":"1612966347.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"osaoR"}]},{"client_msg_id":"0c58f592-4ca6-4717-b46e-36176539a348","type":"message","user":"U776661HA","text":"Rust の本質的じゃないところで難易度なのが辛い","ts":"1612966332.109100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"C0rs"}]},{"client_msg_id":"e0d5a855-5a15-457f-849b-d5ec66e1a1ff","type":"message","user":"U776661HA","text":"futures に寄せておけばあとからランタイムだけ変えるってのができそう？","ts":"1612966313.108700","edited":{"user":"U776661HA","ts":"1612966320.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"b/Z"}]},{"client_msg_id":"a3b7dc32-9bec-4021-9851-f040c2a41b82","type":"message","user":"U776661HA","text":"futures が一番オフィシャルに近い？でランタイム提供してないから tokio/async-std とかがランタイムとして必要？","ts":"1612966293.108300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"sRZ="}]},{"client_msg_id":"7d82098f-880d-4762-84a8-9edc1ede6fd2","type":"message","user":"U776661HA","text":"この辺の関係性がよくわからない...","ts":"1612966261.107600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"YZs9"}]},{"client_msg_id":"bfd90061-a05f-4215-8471-5b25c4e8778d","type":"message","user":"U776661HA","text":"なるべく futures に寄せたほうがいいのか？","ts":"1612966162.107300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"um/"}]},{"client_msg_id":"f94eede3-4901-4f93-9c81-92fce886b9cc","type":"message","user":"U776661HA","text":"Deno で使ってるしランタイムは tokio かなーで mpsc 必要になったら futures にもあると...","ts":"1612966115.106800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"eADA"}]},{"client_msg_id":"49ab4c19-935d-4505-b77a-92b2983992e7","type":"message","user":"U776661HA","text":"乱立しすぎててどうすりゃいいねん感","ts":"1612966062.105900","edited":{"user":"U776661HA","ts":"1612966077.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"=O3"}]},{"client_msg_id":"e086a103-68bf-4db9-9bbf-04018b8278fa","type":"message","user":"U776661HA","text":"\u003chttps://users.rust-lang.org/t/tokio-mpsc-vs-futures-mpsc/35664/3\u003e","ts":"1612966054.105500","attachments":[{"fallback":"The Rust Programming Language Forum: Tokio:mpsc vs futures:mpsc","id":1,"title":"Tokio:mpsc vs futures:mpsc","title_link":"https://users.rust-lang.org/t/tokio-mpsc-vs-futures-mpsc/35664/3","text":"true, you have just added two more ways for implementing channels. here i am not talking about stdlib:mpsc but about mpsc implementation provided by tokio and futures crates. originally I used crossbeam but run into some problems with async/.await. so switched to futures::channel. I do like the idea of having multiple senders though.","blocks":null,"ts":1576230802,"service_name":"The Rust Programming Language Forum","from_url":"https://users.rust-lang.org/t/tokio-mpsc-vs-futures-mpsc/35664/3","original_url":"https://users.rust-lang.org/t/tokio-mpsc-vs-futures-mpsc/35664/3"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"7yz35"}]},{"type":"message","user":"U01HFHH7AET","text":"\u003c@U01HFHH7AET\u003e has joined the channel","ts":"1612961118.105100","subtype":"channel_join","replace_original":false,"delete_original":false,"blocks":null}]
