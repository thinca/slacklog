[{"client_msg_id":"6e0b5653-06b5-4df7-b373-4d8c917ff870","type":"message","user":"U0M7GCBPD","text":"右辺は function call の形になるのかな\nそんで第1引数に左辺をねじ込む感じ","ts":"1564644758.307800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"c9a52007-ac3c-4b42-8380-1695ecb560b1","type":"message","user":"U0M7GCBPD","text":"このまとめ記事で言うと Elixir と同じか <https://mametter.hatenablog.com/entry/2019/06/15/192311>","ts":"1564645124.308800","attachments":[{"fallback":"まめめも: パイプライン演算子の歴史 - まめめも","id":1,"title":"パイプライン演算子の歴史 - まめめも","title_link":"https://mametter.hatenablog.com/entry/2019/06/15/192311","text":"(You can read this article in English.) Ruby の開発版にパイプライン演算子（pipeline operator）が試験的に導入されましたが、いろいろあってプチ炎上になっています（チケット）。 せっかくの機会なので、パイプライン演算子の歴史を調べてみました。付け焼き刃の調査なので、間違ってたら教えてください。 パイプライン演算子とは こんな感じのものです。 x |&gt; f |&gt; g |&gt; h # h(g(f(x))) と同じ意味 h(g(f(x))) という関数適用の式は、関数が呼ばれる順序（f→g→h）と、プログラムの字面上の順序（h→g→f）が逆でわ…","thumb_url":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","blocks":null,"ts":1560594191,"service_name":"まめめも","service_icon":"https://cdn.image.st-hatena.com/image/apple_touch_icon/3dd51c3a7dcd07643012e7153692ae6ff50eb74a/version=1/https%3A%2F%2Fcdn.user.blog.st-hatena.com%2Fblog_custom_icon%2F724421%2F1550333213677903","thumb_width":1500,"thumb_height":1051,"from_url":"https://mametter.hatenablog.com/entry/2019/06/15/192311","original_url":"https://mametter.hatenablog.com/entry/2019/06/15/192311"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"e1972b61-0b37-47e0-81a2-fa47473534ff","type":"message","user":"U6XP9LZ6V","text":"お、resolve() の修正が取り込まれたか。ばっさりコード削った。\n<https://github.com/vim/vim/commit/3f9bdeb2a521a408c04fd9584a752845b3accbbd>","ts":"1564663105.310900","attachments":[{"fallback":"GitHub: patch 8.1.1784: MS-Windows: resolve() does not work if serial nr dupl… · vim/vim@3f9bdeb","id":1,"title":"patch 8.1.1784: MS-Windows: resolve() does not work if serial nr dupl… · vim/vim@3f9bdeb","title_link":"https://github.com/vim/vim/commit/3f9bdeb2a521a408c04fd9584a752845b3accbbd","text":"…icated Problem: MS-Windows: resolve() does not work if serial nr duplicated. Solution: Use another method to get the full path. (Ken Takata, closes #4661)","thumb_url":"https://avatars1.githubusercontent.com/u/8530623?s=200&v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/bfaba/img/unfurl_icons/github.png","thumb_width":200,"thumb_height":200,"from_url":"https://github.com/vim/vim/commit/3f9bdeb2a521a408c04fd9584a752845b3accbbd","original_url":"https://github.com/vim/vim/commit/3f9bdeb2a521a408c04fd9584a752845b3accbbd"}],"team":"T03C4RC8V","reactions":[{"name":"yossya","count":1,"users":["UAZ33BKV2"]},{"name":"+1","count":1,"users":["U06BRP8VD"]}],"replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"55f2cfcc-1f32-43cc-8691-244af7d3f163","type":"message","user":"U7D5LRRQD","text":"おお、よかったです！w","ts":"1564622928.288300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"ULSF8R128","text":"<@ULSF8R128> has joined the channel","ts":"1564627913.288500","subtype":"channel_join","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"9af89ba8-d736-4ba0-9e31-f194e24dd609","type":"message","user":"U03C71D7H","text":"todo.txt に追加されたこれはなんだ\n\n```\nAll functions are global, which makes functions like get() and len() awkward.\nFor the future use the ~get() and ~len() syntax.  It also allows for\nchaining: &gt;\n    mylist~get(idx)\n    mylist~uniq()~len()\n    mydict~get(idx)\n    mystring~len()\nOr use -&gt; (like C pointer dereference) &gt;\n    mylist-&gt;get(idx)\n    mylist-&gt;uniq()-&gt;len()\n    mydict-&gt;get(idx)\n    mystring-&gt;len()\nAlternatives for ~:\n    ^  list^get()    could also be used\n    .  list.get()    already means \"member\" in Dict\n    $  list$get()    harder to read\n    @  list@get()    harder to read\n```","ts":"1564628399.289100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"8c86f62f-e01a-4e3c-9583-e19b72b37400","type":"message","user":"U03C71D7H","text":"メソッド風の記法…?","ts":"1564628411.289400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"4821bb3f-c0de-40aa-aec8-895c5f208ea9","type":"message","user":"U03C71D7H","text":"いやこれ移動しただけで前からあったやつっぽいな","ts":"1564628512.290100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"ef73b9f8-610f-4974-a9fd-50ca6259bd61","type":"message","user":"UAZ33BKV2","text":"是非はともかく、Altに#は `already autoload submodule namespace` とかは記載しといたほうがよさそうに思う","ts":"1564628540.290900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"cb9c86d5-db31-4ad8-b3e9-8ed790c4e778","type":"message","user":"U03C71D7H","text":"`-&gt;` が有力候補に格上げされてるっぽい書き方にはなってる。移動前は `-&gt;` は下の `Alternatives` の1つだった","ts":"1564628567.291400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"bdb96ad4-1ea6-4a77-a698-f8b23c37c418","type":"message","user":"U03C71D7H","text":"`~` よりかは `-&gt;` がマシっぽさはあるが…メンバーアクセスじゃないしなぁ","ts":"1564628592.291900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"6c961617-5c60-4e58-bc11-c7b0ea2f61a3","type":"message","user":"U03C71D7H","text":"`#` は候補になさそうです","ts":"1564628612.292200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"a1af1a3e-d528-45b7-80b9-e6a0c2e689d5","type":"message","user":"UAZ33BKV2","text":"いや、誤解防止とかのために記載しといてもいいんじゃないかなと","ts":"1564628631.292600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"a091d162-8b15-4e07-932a-3181a36e33bc","type":"message","user":"UAZ33BKV2","text":"まあ間違えないならいいか","ts":"1564628639.293000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"574eeeab-6703-4a3f-9be7-cdb11e9b387e","type":"message","user":"U03C71D7H","text":"`.` が候補に入ってるのがやばい。どう考えても無理","ts":"1564628661.293900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"8EB0A61E-D571-443C-B377-FC3F914670A6","type":"message","user":"UBQ2H65JQ","text":"`.` はいやだから C++のように `::` がいいかなぁ","ts":"1564628664.294100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"1d5803b5-098f-4d01-b639-cf8874899e43","type":"message","user":"UAZ33BKV2","text":"あ、候補としてか、なら入ってないのが普通か...","ts":"1564628726.294500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"a4d5295b-0d45-4e0e-be93-321ffcdedb38","type":"message","user":"UAZ33BKV2","text":"`-&gt;` も `::` もメンバーっぽいのが気になりはしますが、書きやすさはある(慣れ)という...","ts":"1564628763.295400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"88c69ac6-90df-44ba-95bc-c705a5398fb7","type":"message","user":"U03C71D7H","text":"まあそもそもメンバーっぽく書ける記法だと言われればそう","ts":"1564628786.295700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"df4632a1-078c-4dd4-a298-adf973cc5fad","type":"message","user":"U7D5LRRQD","text":"これ、名前空間の提案かと思ったら、func f(x, y)をx-&gt;f(y)で書けるようにするやつか","ts":"1564638183.297400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"24202b9c-b9b3-414b-a845-236f6e0d11ca","type":"message","user":"U03C71D7H","text":"パイプライン演算子 (Elixir 風)","ts":"1564638225.297600","edited":{"user":"U03C71D7H","ts":"1564638258.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"3c9ae9c5-3e56-4d7b-9ca5-98582636c45a","type":"message","user":"U7D5LRRQD","text":"あ、そうだ。\nパイプライン演算子だ。","ts":"1564638246.298200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"19cf1ff7-202d-4f1a-8306-3acd41817b64","type":"message","user":"U7D5LRRQD","text":"`x|&gt;f(y)`がいいな","ts":"1564638272.299200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"5db73d98-ac35-4bf2-9e6c-43b183e1df93","type":"message","user":"U7D5LRRQD","text":"そんで `x |&gt; f(y)` っていうのも許したい！！！！！","ts":"1564638293.300000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"e00067ea-29ea-4491-9d15-171797ee9aec","type":"message","user":"U03C71D7H","text":"Elixir とそれ以前の F# で、同じ記号で同じ名前だけどやってることが全然違うの紛らわしいのでつらい","ts":"1564638303.300300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"1b61b66d-4d11-4a84-a1f3-f4d6c870d27d","type":"message","user":"U03C71D7H","text":"Vim script の `|` は Ruby で言う `;` なのでこれを演算子に含めるのは互換性的にキツそう","ts":"1564638339.301000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"bcd1ba9e-9976-479b-9f43-3ac74a436332","type":"message","user":"U7D5LRRQD","text":"あっ、そうだった……:sob:","ts":"1564638359.301400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"a74573f5-77b2-46c3-a563-004d511e0c61","type":"message","user":"U7D5LRRQD","text":"そしたら -&gt; が好きかもしれない！\n（そんでやはり `x -&gt; f(y)` って書きたい！）","ts":"1564638410.302400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"4c89fc77-1655-4971-9bb5-3289a076ce8b","type":"message","user":"U03C71D7H","text":"これ右辺値が `expr1` にならないのだよねぇ","ts":"1564638490.302900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"966591ad-329d-4e8c-8f33-b5a798b2fa77","type":"message","user":"U03C71D7H","text":"演算子っぽくするとそこが混乱しそう","ts":"1564638518.303200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"3b5acab1-1dbb-492e-b9ca-ed5f7af70566","type":"message","user":"U7D5LRRQD","text":":h expr1","ts":"1564638631.303800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"U894RTUJY","text":"```\nexpr1                                                   *expr1* *E109*\n-----\n \nexpr2 ? expr1 : expr1\n \n'?' より前の式は数値として評価される。その結果が|TRUE|であった場合、'?' と ':'\nに挟まれた式の値がこの式全体の値となり、そうでなかった場合は ':' 以降の式の値\nが全体の値となる。\n例:  \n        :echo lnum == 1 ? \"先頭\" : lnum\n \n始めの式が \"expr2\" であるから、そこに別の?:を含むことはできない。残り二つの式\nについては以下のように再帰的な?:の利用が許される。\n例:  \n        :echo lnum == 1 ? \"top\" : lnum == 1000 ? \"last\" : lnum\n \n読み易くするために、行継続|line-continuation|を利用することが推奨される:  \n        :echo lnum == 1\n        :\\      ? \"top\"\n        :\\      : lnum == 1000\n        :\\              ? \"last\"\n        :\\              : lnum\n \n':' の前には必ずスペースを入れること。そうでないと \"a:1\" のような変数の使用と\n間違えてしまう可能性がある。\n```","ts":"1564638631.303900","bot_id":"B894RTUCU","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"c574c984-65ca-4189-a810-b225e60c1e19","type":"message","user":"U7D5LRRQD","text":"あ、そうか。\nf(y)はexpr1じゃなくて、-&gt;でのパースになるのか～～","ts":"1564638761.306500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null,"source_team":"T03C4RC8V","user_team":"T03C4RC8V"}]
