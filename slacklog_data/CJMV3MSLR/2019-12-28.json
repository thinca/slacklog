[{"client_msg_id":"2d7b6a80-b39f-4140-9cfd-d536a5b7bb69","type":"message","user":"U0M7GCBPD","text":"皆様どうしてるでしょうか\n<https://twitter.com/_tyru_/status/1210854693817028608>","ts":"1577525542.409600","attachments":[{"fallback":"<https://twitter.com/_tyru_|@_tyru_>: やっぱ日本語の括弧も text object として扱いたいと思って vim-textobj-jabraces 入れたけどマッピング多すぎて覚えられる気がしない","id":1,"author_name":"tyru","author_subname":"@_tyru_","author_link":"https://twitter.com/_tyru_/status/1210854693817028608","author_icon":"https://pbs.twimg.com/profile_images/716604835328438272/4sZOAwSL_normal.jpg","text":"やっぱ日本語の括弧も text object として扱いたいと思って vim-textobj-jabraces 入れたけどマッピング多すぎて覚えられる気がしない","blocks":null,"footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png","ts":1577525230,"service_name":"twitter","from_url":"https://twitter.com/_tyru_/status/1210854693817028608","original_url":"https://twitter.com/_tyru_/status/1210854693817028608"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"8uA=R"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"68cc4a82-0b42-4e68-8536-6c67bd9a9e03","type":"message","user":"UAZ33BKV2","text":"とりあえず入れておいて、必要なときに再確認するくらいw","ts":"1577525573.410000","team":"T03C4RC8V","reactions":[{"name":"cry","count":1,"users":["U0M7GCBPD"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"cf=e"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"a00009de-9785-4454-ba48-7f54e88ab465","type":"message","user":"U0M7GCBPD","text":"悲しい…","ts":"1577525696.410500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"5y54"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"80a88475-4d60-49a4-8a67-80771f76804c","type":"message","user":"U0M7GCBPD","text":"と思ったらこんな記事が見つかった。おしょーさんが textobj まとめるプラグイン作ってたのか。\n<http://kainokikaede.hatenablog.com/entry/2014/07/14/070518>","ts":"1577525766.411700","attachments":[{"fallback":"KainokiKaede's diary: Vim の text-object で日本語と英語の括弧を包括的に扱う - KainokiKaede's diary","id":1,"title":"Vim の text-object で日本語と英語の括弧を包括的に扱う - KainokiKaede's diary","title_link":"http://kainokikaede.hatenablog.com/entry/2014/07/14/070518","text":"私はコードだけでなく日本語のテキスト編集も Vim で行うことが多い。その際に、たとえば「全角カギカッコ内を変更」したくなったりすることがある。 Vim にはテキストオブジェクトという便利な機能が存在する（詳細はたとえば ここ などを参照）。 このテキストオブジェクトを拡張する Vim Plugin として vim-textobj-user が存在し、このプラグインの拡張として全角カッコ類を扱う vim-textobj-jabraces が存在する。しかしこの拡張のデフォルトキーバインドは括弧の種類ごとに異なり、たとえば〔〕内は ijt, 【】内は ijs などと覚えにくいものとなっている。で…","image_url":"https://ogimage.blog.st-hatena.com/13208692334729900806/12921228815728095748/1405289118","blocks":null,"ts":1405289118,"service_name":"KainokiKaede's diary","service_icon":"https://cdn.blog.st-hatena.com/images/touch-icon-iphone-retina.png","from_url":"http://kainokikaede.hatenablog.com/entry/2014/07/14/070518","original_url":"http://kainokikaede.hatenablog.com/entry/2014/07/14/070518"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"WRpvX"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"c4bc5e67-0ad9-4cfc-abce-7427c62cfc8b","type":"message","user":"UAZ33BKV2","text":"あー、そっちも入れてある、けど誤爆というか意図以外になるときが(自分の設定もあって)あるので、あんまり利用してなくて、忘れている...orz","ts":"1577525811.412600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"y/kLp"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"852b338e-772a-49f8-96cd-3aa9810257d9","type":"message","user":"U0M7GCBPD","text":"使い分けよくわかってないけど多分 vim-textobj-multitextobj が自分のほしいやつかな（まとめるやつ）","ts":"1577526051.413100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"PM0Iz"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"35b8a33a-d087-4b20-92e8-959bb60ca54c","type":"message","user":"U0M7GCBPD","text":"ちょっと試してみよう","ts":"1577526063.413400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"F46"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"dc5314a4-e16d-4f9a-9769-7c8333420676","type":"message","user":"U03C6TEAZ","text":"clipboard の変化を見る様な奴だと昔書きました。","ts":"1577460319.402600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"QFI/V"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"84a2dc19-ba49-4f19-be21-99f22c913793","type":"message","user":"U03C6TEAZ","text":"<https://github.com/mattn/vim-clipboardwatcher/blob/master/clipboardwatcher/clipboardwatcher.go#L13>","ts":"1577460322.402700","attachments":[{"fallback":"GitHub: mattn/vim-clipboardwatcher","id":1,"title":"mattn/vim-clipboardwatcher","title_link":"https://github.com/mattn/vim-clipboardwatcher/blob/master/clipboardwatcher/clipboardwatcher.go#L13","text":"Contribute to mattn/vim-clipboardwatcher development by creating an account on GitHub.","thumb_url":"https://avatars1.githubusercontent.com/u/10111?s=400&v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/github.png","thumb_width":400,"thumb_height":400,"from_url":"https://github.com/mattn/vim-clipboardwatcher/blob/master/clipboardwatcher/clipboardwatcher.go#L13","original_url":"https://github.com/mattn/vim-clipboardwatcher/blob/master/clipboardwatcher/clipboardwatcher.go#L13"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"n=b"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"9ae7da3a-6be5-4f12-bbc2-a0a45ed68cd0","type":"message","user":"UGB5B3V4G","text":"[質問]\n`ins-completion` としてユーザー定義補完で定義した補完候補を、\n`&lt;C-X&gt;&lt;C-U&gt;` からではなく、直接 call できないかやり方を調べています。\nやり方ご存知の方いらっしゃいませんでしょうか…？\n\n以下サンプルです。\n\n```function! git_commit_prefix#candidates(findstart, base)\n if a:findstart\n  let line = getline('.')\n  let start = col('.') - 1\n  while start &gt; 0 &amp;&amp; line[start - 1] =~ '\\a'\n   let start -= 1\n  endwhile\n  return start\n else\n  let res = []\n  for m in split(\"feat: fix: docs: style: refactor: perf: test: chore:\")\n   if m =~ '^' . a:base\n    call add(res, m)\n   endif\n  endfor\n  return res\n endif\nendfunction\n\nset completefunc=git_commit_prefix#candidates```\n最終的には `autocmd` で登録して、Vim 起動時に補完候補を表示できるようにしたいなと思ってます\nイメージは以下のような感じなのですが…\n\n```autocmd VimEnter * startinsert | call Hogehoge()```","ts":"1577488895.403300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"9sUS"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"7bf412e3-46ad-4573-b8ab-0169ed5f536d","type":"message","user":"UG6DF6W87","text":"VimEnter に `i&lt;C-x&gt;&lt;C-u&gt;` を引っかける、とかはどうでしょう...?","ts":"1577491076.404800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"n/rb"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"c0f61cb4-c6ab-409c-8e96-903476ad6aa4","type":"message","user":"U03C6TEAZ","text":":help complete()","ts":"1577495440.405600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"dNXBS"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"UPZHKAM7W","text":"```\ncomplete({startcol}, {matches})                 *complete()* *E785*\n                挿入モード補完の候補を設定する。\n                挿入モードでのみ使用できる。CTRL-R = (|i_CTRL-R| を参照)と組み\n                合わせてマッピングを作る必要がある。CTRL-Oの後や、&lt;expr&gt;マッピ\n                ングの中では正しく動作しない。\n                {startcol}は補完すべき単語の開始位置を示す、行内のバイトオフセッ\n                トである。その位置からカーソルまでのテキストが補完すべき単語と\n                なる。\n                {matches}はリスト|List|でなければならない。リストの各要素が1つ\n                の候補となる。この要素として許される値については\n                |complete-items|を参照。\n                Note この関数を呼んだ後は補完を停止させるようなテキストの挿入\n                をしないように注意しなければならない。\n                この関数で設定した候補は普通の挿入モード補完と同じ様にCTRL-Nと\n                CTRL-Pで選択できる。設定されていればポップアップメニューが表示\n                される。|ins-completion-menu|を参照。\n                例:  \n        inoremap &lt;F5&gt; &lt;C-R&gt;=ListMonths()&lt;CR&gt;\n        func! ListMonths()\n          call complete(col('.'), ['January', 'February', 'March',\n                \\ 'April', 'May', 'June', 'July', 'August', 'September',\n                \\ 'October', 'November', 'December'])\n          return ''\n        endfunc\n                この例はそれほど役には立たないが、使い方を示している。Note 0が\n                挿入されてしまわないように空文字列を返していることに注意。\n \n                |method| としても使用でき、ベースは第2引数として渡される:  \n                        GetMatches()-&gt;complete(col('.'))\n```","ts":"1577495441.405700","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"e314793d-810e-40ce-89b9-595c249650f3","type":"message","user":"UGB5B3V4G","text":"おお、なるほど…！\n以下でやってみたのですが、`E785: complete() は挿入モードでしか利用できません` と出てしまいました。\n`startinsert` との組み合わせでできないのかな…\n使い方そもそも間違ってたらすいません\n\n```autocmd VimEnter * startinsert | call complete(col('.'), ['January', 'February'])```","ts":"1577496670.406300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"RH8a"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"client_msg_id":"a39c6553-5600-45de-8dcb-c0b917a713fa","type":"message","user":"UGB5B3V4G","text":"あー、こんな感じでできました。関数を呼ぶ形\n結果挿入のために、`CTRL-R =` から呼ぶ必要があるんですね…\n\n```func! MyComplete()\n call complete(col('.'), ['January', 'February'])\n return ''\nendfunc\nautocmd VimEnter * startinsert | call feedkeys(\"\\&lt;C-R&gt;=MyComplete()\\&lt;CR&gt;\")```\nありがとうございます！","ts":"1577497280.409100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"=Dm"}],"source_team":"T03C4RC8V","user_team":"T03C4RC8V"},{"type":"message","user":"US3CHAX5J","text":"<@US3CHAX5J> has joined the channel","ts":"1577502112.409300","subtype":"channel_join","replace_original":false,"delete_original":false,"blocks":null}]
