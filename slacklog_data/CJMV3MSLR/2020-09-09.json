[{"client_msg_id":"9d8c53ea-22cf-481f-babd-56e6b7e15e70","type":"message","user":"U03C71D7H","text":"Issue 立てたのえらい","ts":"1599658393.251000","team":"T03C4RC8V","reactions":[{"name":"wa-wa-1","count":1,"users":["U7HFY4HFY"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"YwNY"}]},{"client_msg_id":"13097769-831a-4aad-8106-66751666e971","type":"message","user":"U03C71D7H","text":"さっきの更新++","ts":"1599658383.250800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"98d1"}]},{"client_msg_id":"20350013-17d7-4d1d-a6e4-2d104039d7c2","type":"message","user":"U7HFY4HFY","text":"あ、でもさっきの更新でもうおかしくない！","ts":"1599658372.250500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"I7c3a"}]},{"client_msg_id":"cbe6bf6c-817b-43af-a52f-d896718b5aff","type":"message","user":"U7HFY4HFY","text":"`g:foo` が無いのに `let is_foo: bool = exists('g:foo') \u0026amp;\u0026amp; \u0026lt;bool\u0026gt;g:foo` が通るのがおかしい","ts":"1599658299.250100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"e0O"}]},{"client_msg_id":"0103b995-942f-46de-ba7f-c2a38a3df116","type":"message","user":"U7HFY4HFY","text":"たしかに\nいずれにせよドキュメントに \"type cast\" って書いてあったしキャストですね\nごめんなさい僕が論点間違えました","ts":"1599658254.249500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"5f9CA"}]},{"client_msg_id":"9c244e47-c33d-4ba0-8428-a1ebcd8b41ba","type":"message","user":"U03C71D7H","text":"そう。その辺りの細かい挙動は言語にも寄ってしまう…","ts":"1599658170.248100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"JfG/n"}]},{"client_msg_id":"56c38387-c711-4efd-8c83-24ae00a075a2","type":"message","user":"U9S4G0LJW","text":"型変換のさいにデータの中身も変換する言語も中にはあるけど、今は考えないほうがよさそう","ts":"1599658148.247600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ncGu"}]},{"client_msg_id":"86b5f653-7e16-4a81-beee-2663a915ca6a","type":"message","user":"U03C71D7H","text":"単に型変換というと2通り想像できてしまう。C で言うと、 `atoi()` みたいに、データを変換するものと、 `(int)` みたいにキャストするもの。こいつらは全くの別物ですね","ts":"1599658090.246800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"p+H"}]},{"client_msg_id":"9d9b6246-5f76-47e8-9047-918bf1781b11","type":"message","user":"U03C71D7H","text":"型変換という言葉の使い方がまずかった気がしてきた","ts":"1599658015.245500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"pxLl"}]},{"client_msg_id":"eb0eb1aa-609f-41ef-b648-a537a028b55a","type":"message","user":"U7HFY4HFY","text":"うむむむ","ts":"1599657961.244700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Gxi"}]},{"client_msg_id":"23b7dac5-002b-4ea7-946c-6f2663ce8535","type":"message","user":"U03C71D7H","text":"型(扱い)を変えようとしたけど型に互換性がなくて変換ができない場合にはエラーになります。キャストエラーです。","ts":"1599657727.243400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"585"}]},{"client_msg_id":"7f28e6ca-f4ee-468f-b6c9-e2b6a6686813","type":"message","user":"U03C71D7H","text":"言語や文脈によって微妙に変わることはあるけど、型変換(キャスト)は「データをどう扱うか」を変えるもので、データの中身は変わらない","ts":"1599657687.242600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"CntHL"}]},{"client_msg_id":"b19e3cac-82dd-4560-8a60-dbee54b682bf","type":"message","user":"U9S4G0LJW","text":"reinterpret_cast、相手は死ぬ","ts":"1599657670.242400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ZOD/5"}]},{"client_msg_id":"c3625253-a373-4776-b012-35bc86aa1829","type":"message","user":"UAZ33BKV2","text":"C++で学ぶいろいろなキャスト、キャストもいろいろあるので、場合によるかなと","ts":"1599657660.242100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"SQpOu"}]},{"client_msg_id":"67ecb746-5bf6-495d-9d7a-aedffb3c1130","type":"message","user":"U7HFY4HFY","text":"`\u0026lt;number\u0026gt;g:two` は型変換はしないです\n`g:two` がnumberじゃなかった場合にエラー吐くものだと認識してます","ts":"1599657647.241700","edited":{"user":"U7HFY4HFY","ts":"1599657656.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"kw6M3"}]},{"client_msg_id":"54bcff48-a835-4417-8272-3a36998e7a0c","type":"message","user":"U9S4G0LJW","text":"型という概念ふわっとしてるし文脈によって微妙に意味違うのでまあしゃーない","ts":"1599657643.241300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"zs5Td"}]},{"client_msg_id":"1a04cef6-375a-4ce2-91a4-8e32e730cc16","type":"message","user":"U03C71D7H","text":"型変換のことです","ts":"1599657573.239200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"KBgc"}]},{"client_msg_id":"8a6c8f9d-c2d0-495e-b6f7-ab562e96c5e6","type":"message","user":"U7HFY4HFY","text":"キャストって型変換のことだと思ってた","ts":"1599657536.239000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"wcrg"}]},{"client_msg_id":"d2d0940c-0708-41b6-91c1-a59bb650542e","type":"message","user":"U03C71D7H","text":"それを世間ではキャストという…","ts":"1599657248.236400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"A29"}]},{"client_msg_id":"cf48260b-2de7-4dac-8671-33ab4a229ea8","type":"message","user":"U7HFY4HFY","text":"これ、キャストじゃなくてanyな変数をnumberとみなす（型チェックするだけ）ものだとおもうです","ts":"1599657225.236000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"K7C=k"}]},{"client_msg_id":"1f0dd47c-eaa8-4b75-baae-c5ff03f6c0db","type":"message","user":"U03C71D7H","text":"ここにも、最後にキャストしろって書いてありますね","ts":"1599657166.235000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"rA2GB"}]},{"client_msg_id":"8c5891af-8592-48b3-8f1f-5e67c9005c69","type":"message","user":"U78A6ESHM","text":"ほー\n```let bool3: bool = 0\nassert_equal(0, bool3)\nlet bool4: bool = 1\nassert_equal(1, bool4)```\n","ts":"1599657163.234800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"yyf"}]},{"type":"message","user":"UPZHKAM7W","text":"```\nVariable types and type casting                         *variable-types*\n \nVariables declared in Vim9 script or in a `:def` function have a type, either\nspecified explicitly or inferred from the initialization.\n \nGlobal, buffer, window and tab page variables do not have a specific type, the\nvalue can be changed at any time, possibly changing the type.  Therefore, in\ncompiled code the \"any\" type is assumed.\n \nThis can be a problem when the \"any\" type is undesired and the actual type is\nexpected to always be the same.  For example, when declaring a list:  \n        let l: list\u0026lt;number\u0026gt; = [1, g:two]\nThis will give an error, because \"g:two\" has type \"any\".  To avoid this, use a\ntype cast:  \n        let l: list\u0026lt;number\u0026gt; = [1, \u0026lt;number\u0026gt;g:two]\n```","ts":"1599657151.234300","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"1e8e446a-f0ad-47e7-82d4-2c09e00042e9","type":"message","user":"U03C71D7H","text":":h variable-types","ts":"1599657150.234200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"9OG"}]},{"client_msg_id":"b7354f11-f881-49b5-be8e-99adb086dee5","type":"message","user":"U7HFY4HFY","text":"わお","ts":"1599657124.233500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"it5"}]},{"client_msg_id":"4153e77a-25fe-40e0-a4d5-cf28122a91cf","type":"message","user":"U78A6ESHM","text":"g:foo が存在しなければキャストに行かずエラーになりそう。","ts":"1599657105.233300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"xuV"}]},{"client_msg_id":"51918720-125a-4054-8533-85cccfafcae5","type":"message","user":"U7JL1UKKL","text":"\u003chttps://github.com/vim/vim/commit/29a86ffee794bc1a0efde215c203cf9529047252|https://github.com/vim/vim/commit/29a86ffee794bc1a0efde215c203cf9529047252\u003e","ts":"1599657100.233000","attachments":[{"fallback":"GitHub: patch 8.2.1641: Vim9: cannot use 0 or 1 where a bool is expected · vim/vim@29a86ff","id":1,"title":"patch 8.2.1641: Vim9: cannot use 0 or 1 where a bool is expected · vim/vim@29a86ff","title_link":"https://github.com/vim/vim/commit/29a86ffee794bc1a0efde215c203cf9529047252","text":"Problem: Vim9: cannot use 0 or 1 where a bool is expected. Solution: Allow using 0 and 1 for a bool type. (closes #6903)","thumb_url":"https://avatars0.githubusercontent.com/u/11618545?s=400\u0026v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/github.png","thumb_width":48,"thumb_height":48,"from_url":"https://github.com/vim/vim/commit/29a86ffee794bc1a0efde215c203cf9529047252","original_url":"https://github.com/vim/vim/commit/29a86ffee794bc1a0efde215c203cf9529047252"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"JJQZD"}]},{"client_msg_id":"ae12b5c2-8fed-4543-894a-3543440be7ab","type":"message","user":"U7JL1UKKL","text":"なんか新機能で変換できるようになったみたい","ts":"1599657086.232400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"uwC"}]},{"client_msg_id":"68e0cbc2-fe8f-46a4-a20e-68689c411ac3","type":"message","user":"U7HFY4HFY","text":"え、なんで通るんだろう","ts":"1599657037.231500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"p/u"}]},{"client_msg_id":"15246a67-8763-4ee5-8f62-cfe7b36b5152","type":"message","user":"U03C71D7H","text":"`let is_foo: bool = exists('g:foo') \u0026amp;\u0026amp; \u0026lt;bool\u0026gt;g:foo` これで一応通るな","ts":"1599656895.231100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Saf"}]},{"client_msg_id":"bdf5feee-8648-4a2c-8b63-1295eefe32e1","type":"message","user":"UAZ33BKV2","text":"```\t:autocmd BufWritePost * if v:errmsg != \"\"\n\t:autocmd BufWritePost *   let x = \"after fail\"\n\t:autocmd BufWritePost * endif```\nこれを構造化の範疇で見れるか、かなw","ts":"1599656550.230700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"sA+"}]},{"client_msg_id":"2ca0265b-5fbb-482a-8213-2ad18c9d139b","type":"message","user":"U7HFY4HFY","text":"おまけにvim9は `\u0026amp;\u0026amp;` と `||` がJavaScript式になったのでうっかり\n`let is_foo: bool = exists('g:foo') \u0026amp;\u0026amp; g:foo`\nとかやると `g:foo` が存在しなかったときに「boolにintegerは代入できない」って怒られる","ts":"1599656498.229800","edited":{"user":"U7HFY4HFY","ts":"1599656532.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"5Cg4r"}]},{"client_msg_id":"03359475-4d53-47b1-abf5-51f543064a5b","type":"message","user":"U78A6ESHM","text":"`let has_python: bool = has('python3') as bool` が欲しいってことか。","ts":"1599656478.229600","edited":{"user":"U78A6ESHM","ts":"1599656485.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"4cN8"}]},{"client_msg_id":"379e6ba4-c7d2-4b31-90db-02d76a268263","type":"message","user":"UAZ33BKV2","text":"あやしい、はちょっと言いすぎかもだけど","ts":"1599656350.227700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"m4BQS"}]},{"client_msg_id":"ed497fec-ecf4-4527-8ab2-05fd7efb6244","type":"message","user":"UAZ33BKV2","text":"構造化も :ayashii: 行指向よりスクリプト","ts":"1599656338.227500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Rd/r"}]},{"client_msg_id":"0d3dadee-1819-4e0a-9a07-a3208cc869ab","type":"message","user":"U9S4G0LJW","text":"そもそもVimLはオブジェクト指向じゃないし","ts":"1599656303.226900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"4bO"}]},{"client_msg_id":"c0d5e60a-3fa5-4512-91cf-12aa833fa5c8","type":"message","user":"UAZ33BKV2","text":"python iterator の StopIteration など、微妙に上手い、がテクニカルなので、それもどうよもなくはなくw","ts":"1599656300.226800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"rAb"}]},{"client_msg_id":"0148f576-3a9e-439a-bca0-650d43a1f577","type":"message","user":"U9S4G0LJW","text":"なさそう","ts":"1599656291.226400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"rLc"}]},{"client_msg_id":"960bd65a-3880-4e2d-8cb2-534bf9594d47","type":"message","user":"U03C71D7H","text":"サブクラスって概念があるかどうか怪しい","ts":"1599656285.226100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"kk84q"}]},{"client_msg_id":"698c7f68-f68a-44b4-a271-00dd5d195ab9","type":"message","user":"U9S4G0LJW","text":"Pythonみたいにboolがintのサブクラス、みたいだったらいいのに","ts":"1599656225.225500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"cbal"}]},{"client_msg_id":"66324a14-f142-4528-86e0-c561b280d222","type":"message","user":"U9S4G0LJW","text":"ビルトイン関数が数値返すのは既存の実装の都合上仕方ないけど、それならせめて暗黙的に型変換するくらいしてほしい","ts":"1599656212.225200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"z/foD"}]},{"client_msg_id":"9bd0ce36-b41d-40a8-b852-4f19301500cc","type":"message","user":"U03C71D7H","text":"とは言え bool 的な値を返す組み込み関数の戻り値の型は bool であってほしいってのは妥当な要求だと思う","ts":"1599656204.225000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"61f"}]},{"client_msg_id":"101d2c18-e15c-4911-93a6-710c838f3c55","type":"message","user":"U7JL1UKKL","text":"!!で変換するのはさすがに読みにくい","ts":"1599656146.223700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"jcD"}]},{"client_msg_id":"c8487068-0f3d-4ef7-95e0-9c2629b6feb9","type":"message","user":"U7JL1UKKL","text":"型変換の演算子があればよいのでは？","ts":"1599656106.223000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"H=w60"}]},{"client_msg_id":"857f8485-a463-4067-b3c9-91a25499f2b8","type":"message","user":"UAZ33BKV2","text":"ifのconditionでexpressionがないvariable || const evaluation だけなやつ、というところ?","ts":"1599655807.222300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"TLYJ8"}]},{"client_msg_id":"9ac65b27-3208-4f5c-bce8-42765a851621","type":"message","user":"U03C71D7H","text":"`!` で `true`/`false` を返すようになったのか","ts":"1599655402.219700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"U8Ngm"}]},{"client_msg_id":"c555bd4c-c70c-4ff4-9fbc-3469b653f400","type":"message","user":"U7HFY4HFY","text":"vim、ビルトイン関数からしてtrue/falseの代わりに1/0で返すのでどうにか考え直してもらいたい\n`let has_python: bool = !!has('python3')` ってしないといけない","ts":"1599655105.219100","edited":{"user":"U7HFY4HFY","ts":"1599655152.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"WBY"}]},{"client_msg_id":"6b0c55d0-c111-49e5-8be6-4845b0c40169","type":"message","user":"U7HFY4HFY","text":"あ、TypeScriptがそうなんですね\n（ググり方が甘かった）","ts":"1599654878.215800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ltfu"}]},{"client_msg_id":"3530a965-be39-4e53-b1c6-eaca85d8924f","type":"message","user":"U03C71D7H","text":"```let i: number = 10;\nif (i) {\n    let b: boolean = i;\n    console.log(b);\n}```\n\u0026gt; error TS2322: Type 'number' is not assignable to type 'boolean'.","ts":"1599654645.214700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"VjrR"}]},{"client_msg_id":"c63d9f22-23a2-4113-8550-62316de01164","type":"message","user":"U03C71D7H","text":"TypeScript...","ts":"1599654496.214100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"oVr"}]},{"client_msg_id":"b84fbb55-c9a5-458e-acd6-889fdb5653d8","type":"message","user":"U78A6ESHM","text":"へーーなるほど！","ts":"1599654064.213600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"sZ2"}]},{"client_msg_id":"83f3c26f-143f-473a-857e-e258afe114cf","type":"message","user":"U7HFY4HFY","text":"\u003chttps://github.com/vim/vim/issues/6903|https://github.com/vim/vim/issues/6903\u003e\nさんこう","ts":"1599653951.213300","attachments":[{"fallback":"GitHub: Request for vim9: Cast to boolean implicitly · Issue #6903 · vim/vim","id":1,"title":"Request for vim9: Cast to boolean implicitly · Issue #6903 · vim/vim","title_link":"https://github.com/vim/vim/issues/6903","text":"Is your feature request about something that is currently impossible or hard to do? Please describe the problem. The doc of vim9 says \u0026amp;quot;Any type of variable can be used as a condition\u0026amp;quot;, bu...","thumb_url":"https://avatars0.githubusercontent.com/u/11618545?s=400\u0026v=4","blocks":null,"service_name":"GitHub","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/github.png","thumb_width":48,"thumb_height":48,"from_url":"https://github.com/vim/vim/issues/6903","original_url":"https://github.com/vim/vim/issues/6903"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Ul2a"}]},{"client_msg_id":"69e1f8e9-7c8b-461b-9012-af4bdcf57803","type":"message","user":"U7HFY4HFY","text":"yutakatayさんが正しいです\nvim9、if文は式を暗黙でtrue/false変換するんですが、変数への代入はintegerでも明示で変換しないとだめ","ts":"1599653898.213000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Fnu"}]},{"client_msg_id":"097566d9-fe61-4809-9ffb-338d8118fb5d","type":"message","user":"U78A6ESHM","text":"や、違う。","ts":"1599653895.212800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"/xldP"}]},{"client_msg_id":"2f3f61da-e0a8-456d-835c-eb710ce6c846","type":"message","user":"U78A6ESHM","text":"~(3.8 以降で今更できるようになった)~","ts":"1599653778.210900","edited":{"user":"U78A6ESHM","ts":"1599653921.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Bgsp"}]},{"client_msg_id":"5ee49743-fc97-4b0e-a0a3-269d16360591","type":"message","user":"U78A6ESHM","text":"~なる。それなら 3.7 以前の Python san~","ts":"1599653765.210300","edited":{"user":"U78A6ESHM","ts":"1599653914.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"19a"}]},{"client_msg_id":"159fc23c-a1b5-49a5-b393-660e54f56c81","type":"message","user":"U7B4ZD49X","text":"文章からは\n```if x \u0026gt; 0 { # これはできる\n}\n\nlet b = x \u0026gt; 0; # これはできない```\nって感じましたけど(vim9scriptができるのかできないのかは知らないですけども)","ts":"1599653736.209800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"0bdOe"}]},{"client_msg_id":"5983dace-d16d-46e0-a69b-3e967beb7d77","type":"message","user":"U78A6ESHM","text":"```let bool = false;\nif (bool = ('foo' === 'foo' ? true : false)) {\n  console.log(bool);\n}```\nこういうことができない言語ってことでしょうか？","ts":"1599653494.208000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"NK0"}]},{"client_msg_id":"b9f1a58b-6771-45f0-b270-7a35a7eaffd9","type":"message","user":"U7HFY4HFY","text":"ちょいとご質問ます\nif文に突っ込める式が、そのままbool型変数に代入できない言語ってありますか？\nvim9スクリプトを除いて（真顔）","ts":"1599652655.206700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"NBzs"}]}]
