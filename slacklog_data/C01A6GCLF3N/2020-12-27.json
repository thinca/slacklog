[{"client_msg_id":"9d7d2b60-f7a0-449d-9007-1caaae648f1f","type":"message","user":"UERCTTT8B","text":"除算は -1 で割るときに厄介か \u003chttps://s-yata.hatenadiary.org/entry/20140226/1393426179|https://s-yata.hatenadiary.org/entry/20140226/1393426179\u003e","ts":"1609041517.192300","attachments":[{"fallback":"やた＠はてな日記: 整数除算のオーバーフローについて - やた＠はてな日記","id":1,"title":"整数除算のオーバーフローについて - やた＠はてな日記","title_link":"https://s-yata.hatenadiary.org/entry/20140226/1393426179","text":"整数除算のエラーとしては 0 による除算が有名ですが，オーバーフローも致命的なエラーになるなりえるという話です．（追記 2014-02-27） そもそも整数の演算におけるオーバーフロー時の動作は未定義なのですが，加算，減算，乗算のオーバーフローについては，オーバーフローした分が捨てられるという前提で使っていることがよくあります．本当はやっちゃ駄目なのでしょうが…． INT32-C. 符号付き整数演算がオーバーフローを引き起こさないことを保証する \u003chttp://www.jpcert.or.jp/sc-rules/c-int32-c.html\u003e 具体的には，符号付き 32-bit 整数の除算で IN…","image_url":"https://ogimage.blog.st-hatena.com/17680117127143130778/17680117127143133783/1558176028","blocks":null,"ts":1393426179,"service_name":"やた＠はてな日記","service_icon":"https://s-yata.hatenadiary.org/icon/touch","from_url":"https://s-yata.hatenadiary.org/entry/20140226/1393426179","original_url":"https://s-yata.hatenadiary.org/entry/20140226/1393426179"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Tf8"}]},{"client_msg_id":"46fa0993-68ca-425c-bbf6-58aca1007627","type":"message","user":"UERCTTT8B","text":"全箇所気をつけるのは実質不可能ですが…","ts":"1609041291.191700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"XYn5"}]},{"client_msg_id":"2ab5c8d6-72b0-437c-9ccb-b2ae82a3a8c7","type":"message","user":"UERCTTT8B","text":"加減乗はたんに符号なしにキャストすれば問題なさそう","ts":"1609041261.191200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"m+uJ6"}]},{"client_msg_id":"bac8cff6-e8d9-4d84-ba75-5add055dbddb","type":"message","user":"U016XJSPYD8","text":"昔よく読んだ記事だ。なつかしい。\n今でも続きを待っている","ts":"1609036586.190400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"D+SoH"}]},{"client_msg_id":"cd369173-9aa2-411b-9ada-8acab7927010","type":"message","user":"UAZ33BKV2","text":"完結はしてないけど、この人のこのシリーズが参考になるかな(沼として)\n\u003chttps://qiita.com/a4lg/items/541c9d9dd5d874eeef2f\u003e","ts":"1609031100.189900","attachments":[{"fallback":"Qiita: C++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第1回 : 整数型の怪と対策の不足) - Qiita","id":1,"title":"C++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第1回 : 整数型の怪と対策の不足) - Qiita","title_link":"https://qiita.com/a4lg/items/541c9d9dd5d874eeef2f","text":"はじめに 整数型の取り扱い (表現可能な値の範囲を超える \"整数オーバーフロー\" を防ぐなど) は、セキュリティ上の問題を避けるために、そうでなくとも予期しないバグを避けるために (頻繁に!) 注意しなければならないことだと言え...","image_url":"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2\u0026w=1200\u0026mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DC%252B%252B%2520%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E6%2595%25B4%25E6%2595%25B0%25E5%259E%258B%25E3%2581%25AE%25E6%2580%25AA%25E3%2581%25A8%2520%2522%25E7%25A7%25BB%25E6%25A4%258D%25E6%2580%25A7%25E3%2581%25AE%25E3%2581%2582%25E3%2582%258B%2522%2520%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AB%25E3%2583%25BC%2520%2528%25E7%25AC%25AC1%25E5%259B%259E%2520%253A%2520%25E6%2595%25B4%25E6%2595%25B0%25E5%259E%258B%25E3%2581%25AE%25E6%2580%25AA%25E3%2581%25A8%25E5%25AF%25BE%25E7%25AD%2596%25E3%2581%25AE%25E4%25B8%258D%25E8%25B6%25B3%2529%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D1cd32c787cf5097aa008ad8611fc5006\u0026mark-align=center%2Cmiddle\u0026blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540a4lg%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3D5ae82c855205713b74f7ce98860fd4ae\u0026blend-align=center%2Cmiddle\u0026blend-mode=normal\u0026s=4e06c3ed9338fb15dc4e5ab9ce958ec6","blocks":null,"service_name":"Qiita","service_icon":"https://cdn.qiita.com/assets/favicons/public/apple-touch-icon-ec5ba42a24ae923f16825592efdc356f.png","from_url":"https://qiita.com/a4lg/items/541c9d9dd5d874eeef2f","original_url":"https://qiita.com/a4lg/items/541c9d9dd5d874eeef2f"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"CHA"}]},{"client_msg_id":"84c4ec29-1830-4c3b-a0a5-c3b9fb6bebef","type":"message","user":"UERCTTT8B","text":"よく考えたら 2 の補数表示なら符号なしにキャストしたあとに乗算してあとで符号ありに戻しても結果的には同じだった気がする","ts":"1609003931.189200","thread_ts":"1608995546.188300","subtype":"thread_broadcast","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"/g6="}],"root":{"client_msg_id":"5a9be074-da1d-4017-8578-70c9fd0b7141","type":"message","user":"UERCTTT8B","text":"2 の補数表示における 64 ビット符号付き整数の乗算を、 Undefined Behavior 一切使わないで C++ で書くの、なんかめっちゃ難しい気がする","ts":"1608995546.188300","thread_ts":"1608995546.188300","reply_count":1,"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"V0z"}]}},{"client_msg_id":"c099a188-e9b9-4272-aa71-4862d6ddf821","type":"message","user":"UERCTTT8B","text":"\u003chttps://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html\u003e C++20 になっても相変わらず UB","ts":"1608996366.189000","attachments":[{"fallback":"cpprefjp - C++日本語リファレンス: 符号付き整数型が2の補数表現であることを規定 - cpprefjp C++日本語リファレンス","id":1,"title":"符号付き整数型が2の補数表現であることを規定 - cpprefjp C++日本語リファレンス","title_link":"https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html","text":"C++20では、符号付き整数型のビット表現を「2の補数 (Two's Complement)」に規定する。","blocks":null,"service_name":"cpprefjp - C++日本語リファレンス","service_icon":"https://cpprefjp.github.io/static/favicons/apple-touch-icon.png?cachebust=7b87d7031182251a0bb378cfc598d59e1a6782c3","from_url":"https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html","original_url":"https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html"}],"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"=DGy"}]},{"client_msg_id":"5a9be074-da1d-4017-8578-70c9fd0b7141","type":"message","user":"UERCTTT8B","text":"2 の補数表示における 64 ビット符号付き整数の乗算を、 Undefined Behavior 一切使わないで C++ で書くの、なんかめっちゃ難しい気がする","ts":"1608995546.188300","thread_ts":"1608995546.188300","reply_count":1,"team":"T03C4RC8V","reactions":[{"name":"wakaru","count":1,"users":["UEB0VGD7E"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"V0z"}]}]
