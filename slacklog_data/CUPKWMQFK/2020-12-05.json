[{"type":"message","user":"UPZHKAM7W","text":"|z\u0026lt;Right\u0026gt;|      z\u0026lt;Right\u0026gt;           \"zl\" と同じ。\n```","ts":"1607164253.442900","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"UPZHKAM7W","text":"```\n2.5 'z' で始まるコマンド                                                *z*\n \nタグ            文字          注   ノーマルモードでの動作        \n------------------------------------------------------------------------------\n|z\u0026lt;CR\u0026gt;|         z\u0026lt;CR\u0026gt;              画面の再描画、カーソル行をウィンドウの最上\n                                   部へ移動、カーソルは行のはじめの空白文字以\n                                   外の文字へ移動。\n|zN\u0026lt;CR\u0026gt;|        z{height}\u0026lt;CR\u0026gt;      画面の再描画、ウィンドウの高さを {height}\n                                   にする。\n|z+|            z+                 カーソルを N 行目に移動(省略時はウィンドウ\n                                   の下の行)、その他は \"z\u0026lt;CR\u0026gt;\" と同じ。\n|z-|            z-                 画面の再描画、カーソル行をウィンドウの最下\n                                   部へ移動、カーソルは行のはじめの空白文字以\n                                   外の文字へ移動。\n|z.|            z.                 画面の再描画、カーソル行をウィンドウの中央\n                                   部へ移動、カーソルは行のはじめの空白文字以\n                                   外の文字へ移動。\n|z=|            z=                 スペリング補完を行う。\n|zA|            zA                 折畳を再帰的に開閉する\n|zC|            zC                 折畳を再帰的に閉じる\n|zD|            zD                 折畳を再帰的に削除する\n|zE|            zE                 折畳をすべて削除する\n|zF|            zF                 N 行の折畳を作成する\n|zG|            zG                 一時的に word を正しくスペリングされた単語\n                                   としてマークする。\n|zH|            zH                 'wrap' がオフの時、スクリーンの幅の半分右へ\n                                   スクロールする\n|zL|            zL                 'wrap' がオフの時、スクリーンの幅の半分左へ\n                                   スクロールする\n|zM|            zM                 'foldlevel' を0に設定する\n|zN|            zN                 'foldenable' をオンにする\n|zO|            zO                 折畳を再帰的に開く\n|zR|            zR                 'foldlevel' を最も深い折畳と同じレベルに設\n                                   定する\n|zW|            zW                 一時的に word を間違ってスペリングされた\n                                   単語としてマークする。\n|zX|            zX                 'foldlevel' を再適用する\n|z^|            z^                 カーソルを N 行目に移動(省略時はウィンドウ\n                                   の上の行)、その他は \"z-\" と同じ。\n|za|            za                 折畳を開閉する\n|zb|            zb                 画面の再描画、カーソル行をウィンドウの最下\n                                   部へ移動。\n|zc|            zc                 折畳を閉じる\n|zd|            zd                 折畳を削除する\n|ze|            ze                 'wrap' オプションがオフの時、カーソルがスク\n                                   リーンの右端になるように、水平方向にスク\n                                   ロール。\n|zf|            zf{motion}         Nmoveテキストの折畳を作成する\n|zg|            zg                 恒久的に word を正しくスペリングされた単語\n                                   としてマークする。\n|zh|            zh                 'wrap' オプションがオフの時、水平方向に N\n                                   文字分右へスクロール。\n|zi|            zi                 'foldenable' を切り替える\n|zj|            zj              1  次の折畳の始めに移動する\n|zk|            zk              1  前の折畳の最後に移動する\n|zl|            zl                 'wrap' オプションがオフの時、水平方向に N\n                                   文字分左へスクロール。\n|zm|            zm                 'foldlevel' を1低くする\n|zn|            zn                 'foldenable' をオフにする\n|zo|            zo                 折畳を開く\n|zr|            zr                 'foldlevel' を1高くする\n|zs|            zs                 'wrap' オプションがオフの時、カーソルがスク\n                                   リーンの左端になるように、水平方向にスクロー\n                                   ル。\n|zt|            zt                 画面の再描画、カーソル行をウィンドウの最上\n                                   部へ移動。\n|zuw|           zuw                |zw| を取り消す\n|zug|           zug                |zg| を取り消す\n|zuW|           zuW                |zW| を取り消す\n|zuG|           zuG                |zG| を取り消す\n|zv|            zv                 カーソル行が表示されるように折畳を開く\n|zw|            zw                 恒久的に word を間違ってスペリングされた\n                                   単語としてマークする。\n|zx|            zx                 'foldlevel' を最適用して \"zv\" を実行する\n|zz|            zz                 画面の再描画、カーソル行をウィンドウの中央\n                                   部へ移動。\n|z\u0026lt;Left\u0026gt;|       z\u0026lt;Left\u0026gt;            \"zh\" と同じ。","ts":"1607164253.442800","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"eb69e816-62b9-4260-aed5-3a31b00bb1b4","type":"message","user":"UAZ33BKV2","text":":h z","ts":"1607164252.442700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"c+G"}]},{"type":"message","user":"UPZHKAM7W","text":"|gs|            gs                 N 秒間スリープする(省略時は1秒)\n|gt|            gt                 次のタブページに移動\n|gu|            gu{motion}      2  Nmove テキストを小文字にする\n|gv|            gv                 前回の選択範囲を再選択する\n|gw|            gw{motion}      2  Nmove テキストを整形する。カーソル移動なし\n|netrw-gx|      gx                 カーソル下のファイル名に対応したアプリケー\n                                   ションを起動する(|netrw| プラグインがあると\n                                   きのみ)\n|g@|            g@{motion}         'operatorfunc' を呼ぶ。\n|g~|            g~{motion}      2  Nmove テキストの大文字、小文字を変換する\n|g\u0026lt;Down\u0026gt;|       g\u0026lt;Down\u0026gt;         1  \"gj\" と同じ。\n|g\u0026lt;End\u0026gt;|        g\u0026lt;End\u0026gt;          1  \"g$\" と同じ。\n|g\u0026lt;Home\u0026gt;|       g\u0026lt;Home\u0026gt;         1  \"g0\" と同じ。\n|g\u0026lt;LeftMouse\u0026gt;|  g\u0026lt;LeftMouse\u0026gt;       \u0026lt;C-LeftMouse\u0026gt; と同じ。\n                g\u0026lt;MiddleMouse\u0026gt;     \u0026lt;C-MiddleMouse\u0026gt; と同じ。\n|g\u0026lt;RightMouse\u0026gt;| g\u0026lt;RightMouse\u0026gt;      \u0026lt;C-RightMouse\u0026gt; と同じ。\n|g\u0026lt;Up\u0026gt;|         g\u0026lt;Up\u0026gt;           1  \"gk\" と同じ。\n```","ts":"1607164248.442400","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"UPZHKAM7W","text":"```\n2.4 'g' で始まるコマンド                                                *g*\n \nタグ            文字          注   ノーマルモードでの動作        \n------------------------------------------------------------------------------\n|g_CTRL-A|      g CTRL-A           MEM_PROFILEを定義してコンパイルしたときのみ\n                                   メモリプロファイルをダンプする\n|g_CTRL-G|      g CTRL-G           現在のカーソル位置に関する情報を表示。\n|g_CTRL-H|      g CTRL-H           選択モードで矩形選択を開始\n|g_CTRL-]|      g CTRL-]           カーソル位置のタグへ |:tjump| する。\n|g#|            g#              1  \"#\" と同様、ただし \"\\\u0026lt;\" と \"\\\u0026gt;\" を使用しな\n                                   い。\n|g$|            g$              1  本当の行末ではなく、表示されたとおりの、見\n                                   ため上の行末へ移動\n|g\u0026amp;|            g\u0026amp;              2  最後に実行した \":s\" をすべての行で実行する\n|g'|            g'{mark}        1  |'|と同じだがジャンプリストを更新しない\n|g`|            g`{mark}        1  |`|と同じだがジャンプリストを更新しない\n|gstar|         g*              1  \"*\" と同様、ただし \"\\\u0026lt;\" と \"\\\u0026gt;\" を使用しな\n                                   い。\n|g+|            g+                 N 回後の新しいテキスト状態へ移動。\n|g,|            g,              1  変更リスト中の N 個後の位置へ移動。\n|g-|            g-                 N 回前の古いテキスト状態へ移動。\n|g0|            g0              1  本当の行頭ではなく、表示されたとおりの、見\n                                   ため上の行頭へ移動\n|g8|            g8                 UTF-8環境でカーソル位置の文字のバイト列を16\n                                   進数で表示する\n|g;|            g;              1  変更リスト中の N 個前の位置へ移動。\n|g\u0026lt;|            g\u0026lt;                 前のコマンドの出力を表示する。\n|g?|            g?              2  Rot13 エンコード演算子。\n|g?g?|          g??             2  現在の行を Rot13 エンコード。\n|g?g?|          g?g?            2  現在の行を Rot13 エンコード。\n|gD|            gD              1  カーソル位置の単語の定義をカレントファイル\n                                   内で検索し、移動。\n|gE|            gE              1  直前の WORD の末尾に移動。\n|gH|            gH                 選択モードで行選択を開始。\n|gI|            gI              2  \"I\" と同様、ただし1カラム目より挿入開始。\n|gJ|            gJ              2  スペースを挿入せずに行を連結。\n|gN|            gN            1,2  最後に使われた検索パターンを後方検索し、そ\n                                   れをビジュアル選択する。\n|gP|            [\"x]gP          2  (レジスタ x からの)テキストをカーソルの前に\n                                   挿入、カーソルは挿入テキストの最後へ移動。\n|gQ|            gQ                 \"Ex\" モードを開始する。\n|gR|            gR              2  仮想置換モード開始。\n|gT|            gT                 前のタブページに移動\n|gU|            gU{motion}      2  Nmove テキストを大文字にする。\n|gV|            gV                 選択モードでマップやメニューを使用した後、\n                                   選択していた選択範囲を再選択しない。\n|g]|            g]                 カーソル位置の単語をタグとして :tselect\n                                   を実行する\n|g^|            g^              1  本当の行頭ではなく、表示されたとおりの、見\n                                   ため上の行頭から最初の非空白文字へ移動\n|g_|            g_              1  N-1 行下の最後の非空白文字へ移動。\n|ga|            ga                 カーソル位置の文字の ASCII コード値を表示\n|gd|            gd              1  カーソル位置の単語の定義を現在の関数内で探\n                                   し、移動\n|ge|            ge              1  直前の単語の末尾に移動\n|gf|            gf                 カーソル位置のファイル名のファイルを開く\n|gF|            gF                 カーソル位置のファイル名のファイルを開き、\n                                   ファイル名の後に書かれた行番号にジャンプす\n                                   る。\n|gg|            gg              1  N 行目へジャンプ、省略時は1行目\n|gh|            gh                 選択モードの開始\n|gi|            gi              2  \"i\" と同じだがその前に|'^|マークへ移動する\n|gj|            gj              1  \"j\" と同様、ただし 'wrap' がオンの時はスク\n                                   リーン行で N 行下へ移動\n|gk|            gk              1  \"k\" と同様、ただし 'wrap' がオンの時はスク\n                                   リーン行で N 行上へ移動\n|gn|            gn            1,2  最後に使われた検索パターンを前方検索し、そ\n                                   れをビジュアル選択する。\n|gm|            gm              1  スクリーン行の中央の文字へジャンプ\n|gM|            gM              1  テキスト行の中央の文字へジャンプ\n|go|            go              1  バッファ中の N バイト目へジャンプ\n|gp|            [\"x]gp          2  N 回カーソルの後に(レジスタxの)テキストを挿\n                                   入、カーソルは挿入テキストの直後へ移動\n|gq|            gq{motion}      2  Nmove テキストを整形する\n|gr|            gr{char}        2  N 文字を {char} で仮想上書きする","ts":"1607164248.442300","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"aa0bca9c-55dc-496a-a150-e55b9b9ea96e","type":"message","user":"UAZ33BKV2","text":":h g","ts":"1607164247.442200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"OmLX/"}]},{"client_msg_id":"bb4c1f8b-d546-413c-b737-b27d4eeba5a7","type":"message","user":"U03C71D7H","text":"`:call` つけ忘れのために行頭に `foo(` があったらエラーになるハイライトを独自に設定しているのだけど、Vim9 script で裏目に出てる","ts":"1607160762.441900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"x1ha"}]},{"client_msg_id":"317d88dd-8846-48f2-a8c3-e99adbd0a8e7","type":"message","user":"U03C71D7H","text":"なお、このような順序で追加されたので `appendline()` `deleteline()` は存在しない","ts":"1607159414.441000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"dgx7L"}]},{"client_msg_id":"70953ce3-6572-4181-a760-a5c719a92ac7","type":"message","user":"U03C71D7H","text":"昔は、\n`getline()` `setline()`\nくらいしかなかった。どちらも現在のバッファが対象。\n今は、\n`getbufline()` `setbufline()` `appendbufline()` `deletebufline()` がある。こいつらのおかげで任意のバッファ(ロード済み)の操作が一通りできるようになった。とても便利","ts":"1607159395.440400","team":"T03C4RC8V","reactions":[{"name":"benri","count":2,"users":["U9S4G0LJW","UAZ33BKV2"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ODD"}]},{"client_msg_id":"1960f63d-632a-4631-b0df-83aef3996e68","type":"message","user":"U9S4G0LJW","text":"今のVim script環境って本当に恵まれてるんだな","ts":"1607159315.439200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"sw=J1"}]},{"client_msg_id":"c85033b5-78e9-433a-afe6-de21de486a5f","type":"message","user":"U9S4G0LJW","text":"昔は関数が無かったのか","ts":"1607159292.438700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Q6X"}]},{"client_msg_id":"86b3ee6b-90f0-47e8-8c09-8ca5a32f4a02","type":"message","user":"U03C71D7H","text":"実際のところ、最近は必要な関数も揃っているので `:put` や `:delete` を無理にスクリプトから使う必要はほぼほぼないですね。私の書いた古いスクリプトだと `:put` `:delete` よく使ってる","ts":"1607159262.438100","team":"T03C4RC8V","reactions":[{"name":"wakaru","count":1,"users":["UBQ2H65JQ"]}],"replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"s5Z9"}]},{"client_msg_id":"33065b80-443d-473f-ad91-ebd5e0b2b5b4","type":"message","user":"U03C71D7H","text":"それさっきめっちゃ出ました。 `:delete` を range 付きで読んでた。deletebufline() に変更した","ts":"1607159205.437100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"e51mk"}]},{"client_msg_id":"21c906cf-271f-404b-9278-f997739b7120","type":"message","user":"UBQ2H65JQ","text":"`E1050: Colon required before a range` がなかなかなれないVim9 script","ts":"1607159143.436500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Dxw="}]},{"client_msg_id":"b2cb263d-38e5-4ef6-b93a-69df9f040601","type":"message","user":"U03C71D7H","text":"setline() 使えばいいのだけど、既存のスクリプトを書き換えてみているとちょいちょいでくわす","ts":"1607159059.435700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"3ANDT"}]},{"client_msg_id":"d5997e3b-8bd9-41c1-87ca-2bf4bd776943","type":"message","user":"U03C71D7H","text":"`:put =foo` できない","ts":"1607159002.435100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"+OSJu"}]},{"client_msg_id":"e2915223-2e7c-4a48-92bc-499e131621ba","type":"message","user":"U03C71D7H","text":"Vim9 script 難しすぎる","ts":"1607158993.434800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"q=WvK"}]}]
