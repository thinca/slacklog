[{"client_msg_id":"b738af13-43b3-450f-9f92-53d2c03a2c4f","type":"message","user":"UDDCM376D","text":"うごきました\nありがとうございます","ts":"1600599259.023100","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"zrx"}]},{"client_msg_id":"f02a64cf-d92f-48bd-999b-8c939773a81a","type":"message","user":"UDDCM376D","text":"ありがとうございます\n試してみます","ts":"1600598489.022900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"ifHn"}]},{"client_msg_id":"81cd0daa-ea3c-4802-b0da-b1b1d20c15fe","type":"message","user":"UAZ33BKV2","text":"大丈夫じゃないかな","ts":"1600598475.022500","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"viV"}]},{"client_msg_id":"2dfd2539-7f17-42af-b559-9baf27a57b2a","type":"message","user":"UDDCM376D","text":"abortとdictって同時宣言できますか？","ts":"1600598459.022300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"9bJa"}]},{"client_msg_id":"f9a8391c-81f6-4826-ba70-8f72a6a011f9","type":"message","user":"UDDCM376D","text":"今気づいた…","ts":"1600598439.021900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Cv+5Z"}]},{"client_msg_id":"04ad8078-7d4a-4107-a059-c2259ed1637d","type":"message","user":"UDDCM376D","text":"dict","ts":"1600598430.021600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"qnZG"}]},{"client_msg_id":"6c1fcf9f-7609-423c-9b69-79a7fa0b56de","type":"message","user":"UAZ33BKV2","text":"dict付きで宣言しないと","ts":"1600598428.021400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"lyg"}]},{"client_msg_id":"0a00e123-44a0-4b78-8370-d45cb9e4cb86","type":"message","user":"UDDCM376D","text":"あ","ts":"1600598426.021200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"pRnd"}]},{"type":"message","user":"UPZHKAM7W","text":"```\n                                                *E124* *E125* *E853* *E884*\n:fu[nction][!] {name}([arguments]) [range] [abort] [dict] [closure]\n                        {name} という名前で新しい関数を定義する。関数の本体は、\n                        次の行から |:endfunction| と一致するまで続く。\n \n                        関数名はアルファベットと数字と '_' からなり、通常の関\n                        数はアルファベットの大文字、スクリプトローカル関数は\n                        \"s:\" で始まらなければならない。Note: \"b:\" や \"g:\" は\n                        使用できない (7.4.260 からは関数名にコロンが含まれる場\n                        合は E884 エラーが発生する。例 \"foo:bar()\"。このパッチ\n                        以前はエラーにはならない)。\n \n                        {name}は辞書|Dictionary|の要素の|Funcref|であってもよ\n                        い:  \n                                :function dict.init(arg)\n                        \"dict\" は既に定義されている辞書でなければならない。そ\n                        の要素 \"init\" がまだ存在しないならば追加される。存在す\n                        る場合は、既存の関数を上書きするためには [!] をつけな\n                        ければならない。この値は番号つきの関数を指す|Funcref|\n                        である。この関数は|Funcref|を通してのみ呼ぶことができ、\n                        そこへの参照がなくなると削除される。\n```","ts":"1600598419.020800","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"908aafe9-8baa-4d5c-bc96-c01fdeb5eee4","type":"message","user":"UAZ33BKV2","text":":help E884","ts":"1600598419.020700","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"h9psV"}]},{"client_msg_id":"bdd04560-a7f3-4611-9b21-f99d566e7d87","type":"message","user":"UAZ33BKV2","text":"あー、すんません、ボケました 関数がメンバになれないからじゃないかな?","ts":"1600598382.020300","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Ijyk"}]},{"client_msg_id":"66ae73ef-0a8e-488d-bd9b-70ef6efc7f4e","type":"message","user":"UDDCM376D","text":"↑をやろうとしてできないって言う状態です","ts":"1600598381.020200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"JE7nB"}]},{"type":"message","user":"UPZHKAM7W","text":"```\n                                *Dictionary-function* *self* *E725* *E862*\n関数が \"dict\" 属性つきで定義されると、特殊な方法で呼び出すことができる。例:  \n        :function Mylen() dict\n        :   return len(self.data)\n        :endfunction\n        :let mydict = {'data': [0, 1, 2, 3], 'len': function(\"Mylen\")}\n        :echo mydict.len()\n \nこれはオブジェクト指向プログラミングのメソッドに似ている。この辞書の要素は\n|Funcref|である。暗黙に定義されるローカル変数 \"self\" は、この関数を呼び出した\n辞書を参照している。\n \n\"dict\" 属性をつけないでFuncrefを辞書に入れることもできる。しかしその場合、変\n数 \"self\" は定義されない。\n```","ts":"1600598359.019300","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"bc5f92bd-1b08-4a0e-b335-a1b065c8166d","type":"message","user":"UDDCM376D","text":":h self","ts":"1600598358.019200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"/QNB"}]},{"client_msg_id":"9c0dd885-5fab-4c8f-b3ce-7fbb6de8eacc","type":"message","user":"UAZ33BKV2","text":"どこでselfを定義してるんです?","ts":"1600598341.018900","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"G/X"}]},{"client_msg_id":"5297f559-c31c-4b75-a673-6af7cedfbfce","type":"message","user":"UDDCM376D","text":"```function! s:own() abort\n  return self\nendfunction\n\nfunction! gh#buffer#new(name, ...) abort\n  return #{\n        \\ name: a:name,\n        \\ own: function('s:own')\n        \\ }\nendfunction```\n↑の関数を用意して、↓のように呼び出そうとしていますが、`E121: Undefined variable: self`が出ちゃいます\nどこかを間違っているんでしょうか？\n```echom gh#buffer#new('default').own()```","ts":"1600598051.018600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"meu"}]}]
