[{"client_msg_id":"8b00d11b-7821-44ff-a414-5b4f7b4b1e4e","type":"message","user":"U01H161HVPS","text":"ありがたや","ts":"1612502858.030000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"yiZ"}]},{"client_msg_id":"06374a02-4693-4da4-ab93-24fab3a7bd8e","type":"message","user":"U01H161HVPS","text":"お、直ったんですね","ts":"1612502854.029800","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"Nri3"}]},{"client_msg_id":"9ca380cc-6ea4-4774-8c50-f41fc00cabb0","type":"message","user":"UAZ33BKV2","text":"あ、まだマージされてないや(翻訳でなおしたの覚えてる) -\u0026gt; 99","ts":"1612502654.029600","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"fXld"}]},{"type":"message","user":"UPZHKAM7W","text":"                        call searchcount()\n \n                {options} は辞書 |Dictionary| でなくてはならない。これらを含め\n                られる:\n                  キー          型              意味  \n                  recompute     |Boolean|       もし |TRUE| なら、|n| か |N|\n                                                を実行されたかのようにカウント\n                                                を再計算する。\n                                                そうでないなら、最後に計算した\n                                                結果を返す (|n| か |N| を\n                                                'shortmess' に \"S\" を入れない\n                                                で実行、もしくはこの関数を呼ん\n                                                だ時)\n                                                (デフォルト: |TRUE|)\n                  pattern       |String|        |@/| と違う値が与えられたとき\n                                                に再計算される。これは以下のコ\n                                                マンドをこの関数の呼び出し前に\n                                                実行したのと同じ動作になる  \n                                                  let @/ = pattern\n                                                (デフォルト: |@/|)\n                  timeout       |Number|        0 か負数の場合タイムアウトしな\n                                                い。再計算でのmsecのタイムアウ\n                                                ト値\n                                                (デフォルト: 0)\n                  maxcount      |Number|        0 もしくは負数で制限なし。\n                                                結果の再計算におけるマッチの最\n                                                大カウント。\n                                                もし検索の総計カウントが到達し\n                                                たら \"total\" の値が maxcount +\n                                                1 になる\n                                                (デフォルト: 0)\n                  pos           |List|          `[lnum, col, off]` 値\n                                                再計算の値。\n                                                \"current\" の結果の値を更新する。\n                                                |cursor()|、 |getpos()| を参照\n                                                (デフォルト: カーソルの位置)\n```","ts":"1612502616.029200","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"UPZHKAM7W","text":"```\nsearchcount([{options}])                                        *searchcount()*\n                最後の検索数の取得もしくは更新をする。'shortmess' で \"S\" 無し\n                で表示されるのと同等の結果が得られる。'shortmess' で \"S\" あり\n                の場合でも動作する。\n \n                辞書 |Dictionary| を返す。この辞書は前の{訳註:検索}パターンが\n                設定されてなく、{訳註:オプショナル引数の辞書の} \"pattern\" が指\n                定されてないと空になる。\n \n                  キー          型              意味  \n                  current       |Number|        マッチの現在の位置; カーソル位\n                                                置が最初のマッチより前にあると0\n                  exact_match   |Boolean|       \"current\" が \"pos\" でマッチし\n                                                ているなら1、そうでないなら0\n                  total         |Number|        見付けたマッチのトータル数\n                  incomplete    |Number|        0: 検索が完了した\n                                                1: 再計算がタイムアウトした\n                                                2: 最大数を超えた\n \n                {options} についてはさらに以下を参照。\n \n                |n| や |N| を押下したときの最後の検索カウントを取るには、この\n                関数を `recompute: 0` で呼ぶ。|n| と |N| の最大カウントが 99\n                であるため、時として正しくない情報を返すことがある。もし 99 を\n                超える時は結果が最大カウント+1(100)でなくてはならない。もし正\n                しい情報を取得したいのであれば、`recompute: 1` を指定する:  \n \n                        \" 多量にマッチする場合、 result == maxcount + 1 (100)\n                        \" になる\n                        let result = searchcount(#{recompute: 0})\n \n                        \" 以下は正しい結果を返す(recompute はデフォルトで 1)\n                        let result = searchcount()\n \n                この関数は |statusline| にカウントを追加するのに便利である:  \n                        function! LastSearchCount() abort\n                          let result = searchcount(#{recompute: 0})\n                          if empty(result)\n                            return ''\n                          endif\n                          if result.incomplete ==# 1     \" タイムアウト\n                            return printf(' /%s [?/??]', @/)\n                          elseif result.incomplete ==# 2 \" 最大数を超過\n                            if result.total \u0026gt; result.maxcount \u0026amp;\u0026amp;\n                            \\  result.current \u0026gt; result.maxcount\n                              return printf(' /%s [\u0026gt;%d/\u0026gt;%d]', @/,\n                              \\             result.current, result.total)\n                            elseif result.total \u0026gt; result.maxcount\n                              return printf(' /%s [%d/\u0026gt;%d]', @/,\n                              \\             result.current, result.total)\n                            endif\n                          endif\n                          return printf(' /%s [%d/%d]', @/,\n                          \\             result.current, result.total)\n                        endfunction\n                        let \u0026amp;statusline .= '%{LastSearchCount()}'\n \n                        \" もしくは 'hlsearch' がオンのときのみカウントを表示し\n                        \" たいのであれば\n                        \" let \u0026amp;statusline .=\n                        \" \\   '%{v:hlsearch ? LastSearchCount() : \"\"}'\n \n                もし検索カウントの更新もしたいのであれば、|CursorMoved| か\n                |CursorMovedI| の自動コマンドを使うのが便利である:  \n \n                        autocmd CursorMoved,CursorMovedI *\n                          \\ let s:searchcount_timer = timer_start(\n                          \\   200, function('s:update_searchcount'))\n                        function! s:update_searchcount(timer) abort\n                          if a:timer ==# s:searchcount_timer\n                            call searchcount(#{\n                            \\ recompute: 1, maxcount: 0, timeout: 100})\n                            redrawstatus\n                          endif\n                        endfunction\n \n                また、カレントバッファで \"pattern\" を使い指定パターンにマッチ\n                したテキストのカウントを使いたいのならば:   \n \n                        \" このバッファでの '\\\u0026lt;foo\\\u0026gt;' のカウント\n                        \" (Note 検索カウントもまた更新される)\n                        let result = searchcount(#{pattern: '\\\u0026lt;foo\\\u0026gt;'})\n \n                        \" 古いパターンの古い検索カウントに戻すには再度検索する","ts":"1612502616.029100","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"ee8810f6-5f62-44e9-b5d7-9503ca844aed","type":"message","user":"UAZ33BKV2","text":":h searchcount","ts":"1612502614.029000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"k3E"}]},{"client_msg_id":"c6fdaebb-0f63-4354-895c-423f94c5c0d7","type":"message","user":"U01H161HVPS","text":"`{options}` の `maxcount` のデフォルト値は `0` とあるけどこれは罠で実際は `99` だったりする :vimnokimochi:","ts":"1612502498.028500","edited":{"user":"U01H161HVPS","ts":"1612502534.000000"},"team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"9Zt"}]},{"client_msg_id":"f1027772-ff46-45d5-9f2a-498062d73f5d","type":"message","user":"UAZ33BKV2","text":"最近またvimdoc-jp更新されてるので","ts":"1612502216.028200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"QemV"}]},{"type":"message","user":"UPZHKAM7W","text":"Update success: vim-jp/vimdoc-ja (fad9cfd =\u0026gt; ab076e1)","ts":"1612502183.027900","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"UPZHKAM7W","text":"Update success: mattn/vim-lsp-settings (52e1be5 =\u0026gt; f19c2f5)","ts":"1612502183.027800","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"UPZHKAM7W","text":"Update success: lambdalisue/fern.vim (4ec2a38 =\u0026gt; fa8a106)","ts":"1612502182.027700","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"UPZHKAM7W","text":"Update success: Shougo/dein.vim (9cdda18 =\u0026gt; e5c10d3)","ts":"1612502182.027600","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"UPZHKAM7W","text":"Update success: tpope/vim-fugitive (bebe504 =\u0026gt; 8cf0cf5)","ts":"1612502181.027500","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"42f2c3cd-2251-411a-9bca-8b36470ff161","type":"message","user":"UAZ33BKV2","text":":vimhelp plugin update","ts":"1612502179.027400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"sChQ"}]},{"type":"message","user":"UPZHKAM7W","text":"Utilities for :help\n\nCommands:\n  /vimhelp plugin  Manage Vim plugins","ts":"1612502155.027100","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"099f6d4c-40ea-4156-9ae0-f448187cf03d","type":"message","user":"UAZ33BKV2","text":":vimhelp help","ts":"1612502155.027000","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"WfXY"}]},{"type":"message","user":"UPZHKAM7W","text":"                        call searchcount()\n \n                {options} は辞書 |Dictionary| でなくてはならない。これらを含め\n                られる:\n                  キー          型              意味  \n                  recompute     |Boolean|       もし |TRUE| なら、|n| か |N|\n                                                を実行されたかのようにカウント\n                                                を再計算する。\n                                                そうでないなら、最後に計算した\n                                                結果を返す (|n| か |N| を\n                                                'shortmess' に \"S\" を入れない\n                                                で実行、もしくはこの関数を呼ん\n                                                だ時)\n                                                (デフォルト: |TRUE|)\n                  pattern       |String|        |@/| と違う値が与えられたとき\n                                                に再計算される。これは以下のコ\n                                                マンドをこの関数の呼び出し前に\n                                                実行したのと同じ動作になる  \n                                                  let @/ = pattern\n                                                (デフォルト: |@/|)\n                  timeout       |Number|        0 か負数の場合タイムアウトしな\n                                                い。再計算でのmsecのタイムアウ\n                                                ト値\n                                                (デフォルト: 0)\n                  maxcount      |Number|        0 もしくは負数で制限なし。\n                                                結果の再計算におけるマッチの最\n                                                大カウント。\n                                                もし検索の総計カウントが到達し\n                                                たら \"total\" の値が maxcount +\n                                                1 になる\n                                                (デフォルト: 0)\n                  pos           |List|          `[lnum, col, off]` 値\n                                                再計算の値。\n                                                \"current\" の結果の値を更新する。\n                                                |cursor()|、 |getpos()| を参照\n                                                (デフォルト: カーソルの位置)\n```","ts":"1612501935.026600","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"type":"message","user":"UPZHKAM7W","text":"```\nsearchcount([{options}])                                        *searchcount()*\n                最後の検索数の取得もしくは更新をする。'shortmess' で \"S\" 無し\n                で表示されるのと同等の結果が得られる。'shortmess' で \"S\" あり\n                の場合でも動作する。\n \n                辞書 |Dictionary| を返す。この辞書は前の{訳註:検索}パターンが\n                設定されてなく、{訳註:オプショナル引数の辞書の} \"pattern\" が指\n                定されてないと空になる。\n \n                  キー          型              意味  \n                  current       |Number|        マッチの現在の位置; カーソル位\n                                                置が最初のマッチより前にあると0\n                  exact_match   |Boolean|       \"current\" が \"pos\" でマッチし\n                                                ているなら1、そうでないなら0\n                  total         |Number|        見付けたマッチのトータル数\n                  incomplete    |Number|        0: 検索が完了した\n                                                1: 再計算がタイムアウトした\n                                                2: 最大数を超えた\n \n                {options} についてはさらに以下を参照。\n \n                |n| や |N| を押下したときの最後の検索カウントを取るには、この\n                関数を `recompute: 0` で呼ぶ。|n| と |N| の最大カウントが 99\n                であるため、時として正しくない情報を返すことがある。もし 99 を\n                超える時は結果が最大カウント+1(100)でなくてはならない。もし正\n                しい情報を取得したいのであれば、`recompute: 1` を指定する:  \n \n                        \" 多量にマッチする場合、 result == maxcount + 1 (100)\n                        \" になる\n                        let result = searchcount(#{recompute: 0})\n \n                        \" 以下は正しい結果を返す(recompute はデフォルトで 1)\n                        let result = searchcount()\n \n                この関数は |statusline| にカウントを追加するのに便利である:  \n                        function! LastSearchCount() abort\n                          let result = searchcount(#{recompute: 0})\n                          if empty(result)\n                            return ''\n                          endif\n                          if result.incomplete ==# 1     \" タイムアウト\n                            return printf(' /%s [?/??]', @/)\n                          elseif result.incomplete ==# 2 \" 最大数を超過\n                            if result.total \u0026gt; result.maxcount \u0026amp;\u0026amp;\n                            \\  result.current \u0026gt; result.maxcount\n                              return printf(' /%s [\u0026gt;%d/\u0026gt;%d]', @/,\n                              \\             result.current, result.total)\n                            elseif result.total \u0026gt; result.maxcount\n                              return printf(' /%s [%d/\u0026gt;%d]', @/,\n                              \\             result.current, result.total)\n                            endif\n                          endif\n                          return printf(' /%s [%d/%d]', @/,\n                          \\             result.current, result.total)\n                        endfunction\n                        let \u0026amp;statusline .= '%{LastSearchCount()}'\n \n                        \" もしくは 'hlsearch' がオンのときのみカウントを表示し\n                        \" たいのであれば\n                        \" let \u0026amp;statusline .=\n                        \" \\   '%{v:hlsearch ? LastSearchCount() : \"\"}'\n \n                もし検索カウントの更新もしたいのであれば、|CursorMoved| か\n                |CursorMovedI| の自動コマンドを使うのが便利である:  \n \n                        autocmd CursorMoved,CursorMovedI *\n                          \\ let s:searchcount_timer = timer_start(\n                          \\   200, function('s:update_searchcount'))\n                        function! s:update_searchcount(timer) abort\n                          if a:timer ==# s:searchcount_timer\n                            call searchcount(#{\n                            \\ recompute: 1, maxcount: 0, timeout: 100})\n                            redrawstatus\n                          endif\n                        endfunction\n \n                また、カレントバッファで \"pattern\" を使い指定パターンにマッチ\n                したテキストのカウントを使いたいのならば:   \n \n                        \" このバッファでの '\\\u0026lt;foo\\\u0026gt;' のカウント\n                        \" (Note 検索カウントもまた更新される)\n                        let result = searchcount(#{pattern: '\\\u0026lt;foo\\\u0026gt;'})\n \n                        \" 古いパターンの古い検索カウントに戻すには再度検索する","ts":"1612501935.026500","bot_id":"BPM858KEE","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":null},{"client_msg_id":"14612ca4-3fd8-4a48-8373-3beb43e242b8","type":"message","user":"UEBF2KQTD","text":":h searchcount","ts":"1612501935.026400","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"tKb"}]},{"client_msg_id":"849b34d2-661d-4f65-b48a-7711f30d313a","type":"message","user":"UEBF2KQTD","text":":h","ts":"1612501914.026200","team":"T03C4RC8V","replace_original":false,"delete_original":false,"blocks":[{"type":"rich_text","block_id":"sCc"}]}]
